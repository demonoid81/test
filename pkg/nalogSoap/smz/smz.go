// Code generated by gowsdl DO NOT EDIT.

package smz

import (
	"context"
	"encoding/xml"
	"github.com/sphera-erp/sphera/pkg/nalogSoap/models/smz"
	"github.com/sphera-erp/sphera/pkg/nalogSoap/pkg/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ProcessingStatuses string

const (
	ProcessingStatusesPROCESSING ProcessingStatuses = "PROCESSING"

	ProcessingStatusesCOMPLETED ProcessingStatuses = "COMPLETED"
)

type GetMessageRequest struct {
	XMLName xml.Name `xml:"urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0 GetMessageRequest"`

	// Идентификатор сообщения
	MessageId string `xml:"MessageId,omitempty" json:"MessageId,omitempty"`
}

type Message struct {
	PostPlatformRegistrationResponse smz_models.PostPlatformRegistrationResponse
	GetTaxpayerStatusResponse        smz_models.GetTaxpayerStatusResponse
	GetInnByPersonalInfoResponse     smz_models.GetInnByPersonalInfoResponse
	GetInnByPersonalInfoResponseV2   smz_models.GetInnByPersonalInfoResponseV2
	PostBindPartnerWithInnResponse   smz_models.PostBindPartnerWithInnResponse
	GetBindPartnerStatusResponse     smz_models.GetBindPartnerStatusResponse
	PostIncomeResponse               smz_models.PostIncomeResponse
	SmzPlatformError                 smz_models.SmzPlatformError
}

type GetMessageResponse struct {
	XMLName xml.Name `xml:"urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0 GetMessageResponse"`

	ProcessingStatus *ProcessingStatuses `xml:"ProcessingStatus,omitempty" json:"ProcessingStatus,omitempty"`

	Message Message `xml:"Message,omitempty" json:"Message,omitempty"`

	FileLinks []string `xml:"FileLinks,omitempty" json:"FileLinks,omitempty"`
}

type GetMessagesRequest struct {
	XMLName xml.Name `xml:"urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0 GetMessagesRequest"`

	Expressions []*GetMessagesRequestExpression `xml:"Expressions,omitempty" json:"Expressions,omitempty"`
}

type GetMessagesResponse struct {
	XMLName xml.Name `xml:"urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0 GetMessagesResponse"`

	Messages []*GetMessagesResponseMessage `xml:"Messages,omitempty" json:"Messages,omitempty"`
}

type SendMessage struct {
	Message interface{}
}

type SendMessageRequest struct {
	XMLName xml.Name `xml:"urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0 SendMessageRequest"`

	Message SendMessage `xml:"Message,omitempty" json:"Message,omitempty"`

	FileLinks []string `xml:"FileLinks,omitempty" json:"FileLinks,omitempty"`
}

type SendMessageResponse struct {
	XMLName xml.Name `xml:"urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0 SendMessageResponse"`

	// Идентификатор сообщения
	MessageId string `xml:"MessageId,omitempty" json:"MessageId,omitempty"`
}

type AsyncMessageConsumerServiceFault struct {

	// Сообщение об ошибке
	Message string `xml:"Message,omitempty" json:"Message,omitempty"`
}

type MessageNotFoundFault struct {
	*AsyncMessageConsumerServiceFault
}

type AuthenticationFault struct {
	*AsyncMessageConsumerServiceFault
}

type FileNotFoundFault struct {
	*AsyncMessageConsumerServiceFault
}

type GetMessagesRequestExpression struct {

	// Идентификатор сообщения
	MessageId string `xml:"MessageId,omitempty" json:"MessageId,omitempty"`

	// Токен пользователя
	UserToken string `xml:"UserToken,omitempty" json:"UserToken,omitempty"`
}

type GetMessagesResponseMessage struct {

	// Идентификатор сообщения
	MessageId string `xml:"MessageId,omitempty" json:"MessageId,omitempty"`

	Result struct {
		ProcessingStatus *ProcessingStatuses `xml:"ProcessingStatus,omitempty" json:"ProcessingStatus,omitempty"`

		Message struct{} `xml:"Message,omitempty" json:"Message,omitempty"`

		FileLinks []string `xml:"FileLinks,omitempty" json:"FileLinks,omitempty"`
	} `xml:"Result,omitempty" json:"Result,omitempty"`

	Fault *AsyncMessageConsumerServiceFault `xml:"Fault,omitempty" json:"Fault,omitempty"`
}

type OpenApiAsyncSMZ interface {
	GetMessage(request *GetMessageRequest) (*GetMessageResponse, error)

	GetMessageContext(ctx context.Context, request *GetMessageRequest) (*GetMessageResponse, error)

	SendMessage(request *SendMessageRequest) (*SendMessageResponse, error)

	SendMessageContext(ctx context.Context, request *SendMessageRequest) (*SendMessageResponse, error)

	GetMessages(request *GetMessagesRequest) (*GetMessagesResponse, error)

	GetMessagesContext(ctx context.Context, request *GetMessagesRequest) (*GetMessagesResponse, error)
}

type openApiAsyncSMZ struct {
	client *soap.Client
}

func NewOpenApiAsyncSMZ(client *soap.Client) OpenApiAsyncSMZ {
	return &openApiAsyncSMZ{
		client: client,
	}
}

func (service *openApiAsyncSMZ) GetMessageContext(ctx context.Context, request *GetMessageRequest) (*GetMessageResponse, error) {
	response := new(GetMessageResponse)
	err := service.client.CallContext(ctx, "urn:GetMessageRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openApiAsyncSMZ) GetMessage(request *GetMessageRequest) (*GetMessageResponse, error) {
	return service.GetMessageContext(
		context.Background(),
		request,
	)
}

func (service *openApiAsyncSMZ) SendMessageContext(ctx context.Context, request *SendMessageRequest) (*SendMessageResponse, error) {
	response := new(SendMessageResponse)
	err := service.client.CallContext(ctx, "urn:SendMessageRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openApiAsyncSMZ) SendMessage(request *SendMessageRequest) (*SendMessageResponse, error) {
	return service.SendMessageContext(
		context.Background(),
		request,
	)
}

func (service *openApiAsyncSMZ) GetMessagesContext(ctx context.Context, request *GetMessagesRequest) (*GetMessagesResponse, error) {
	response := new(GetMessagesResponse)
	err := service.client.CallContext(ctx, "urn:GetMessagesRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openApiAsyncSMZ) GetMessages(request *GetMessagesRequest) (*GetMessagesResponse, error) {
	return service.GetMessagesContext(
		context.Background(),
		request,
	)
}
