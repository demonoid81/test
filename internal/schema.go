// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package internal

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/google/uuid"
	"github.com/sphera-erp/sphera/internal/directives"
	"github.com/sphera-erp/sphera/internal/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
	BlockParsePerson func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasAccess        func(ctx context.Context, obj interface{}, next graphql.Resolver, attributes directives.ResourceAttributes) (res interface{}, err error)
	Private          func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Address struct {
		Area             func(childComplexity int) int
		Block            func(childComplexity int) int
		City             func(childComplexity int) int
		CityDistrict     func(childComplexity int) int
		Country          func(childComplexity int) int
		Created          func(childComplexity int) int
		Flat             func(childComplexity int) int
		FormattedAddress func(childComplexity int) int
		House            func(childComplexity int) int
		IsDeleted        func(childComplexity int) int
		Lat              func(childComplexity int) int
		Lon              func(childComplexity int) int
		Organization     func(childComplexity int) int
		Person           func(childComplexity int) int
		Region           func(childComplexity int) int
		Settlement       func(childComplexity int) int
		Street           func(childComplexity int) int
		UUID             func(childComplexity int) int
		Updated          func(childComplexity int) int
	}

	Area struct {
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		Region    func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	Balance struct {
		Amount       func(childComplexity int) int
		Created      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Movement     func(childComplexity int) int
		Organization func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	Candidate struct {
		CandidateTags func(childComplexity int) int
		Created       func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Job           func(childComplexity int) int
		Person        func(childComplexity int) int
		UUID          func(childComplexity int) int
		Updated       func(childComplexity int) int
	}

	City struct {
		Area      func(childComplexity int) int
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		Region    func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	CityDistrict struct {
		Area      func(childComplexity int) int
		City      func(childComplexity int) int
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		Region    func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	Contact struct {
		ContactType  func(childComplexity int) int
		Created      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Organization func(childComplexity int) int
		Person       func(childComplexity int) int
		Presentation func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	ContactType struct {
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	Content struct {
		Bucket    func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		UUID      func(childComplexity int) int
	}

	Country struct {
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	Course struct {
		Content      func(childComplexity int) int
		CourseType   func(childComplexity int) int
		Created      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Name         func(childComplexity int) int
		Organization func(childComplexity int) int
		PassingScore func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	InfoAboutJob struct {
		Courses     func(childComplexity int) int
		WorkerOrder func(childComplexity int) int
	}

	Job struct {
		Candidates        func(childComplexity int) int
		Cost              func(childComplexity int) int
		Created           func(childComplexity int) int
		Date              func(childComplexity int) int
		Description       func(childComplexity int) int
		Duration          func(childComplexity int) int
		EndTime           func(childComplexity int) int
		Executor          func(childComplexity int) int
		IsDeleted         func(childComplexity int) int
		IsHot             func(childComplexity int) int
		JobTemplate       func(childComplexity int) int
		JobType           func(childComplexity int) int
		Name              func(childComplexity int) int
		Object            func(childComplexity int) int
		Published         func(childComplexity int) int
		Rating            func(childComplexity int) int
		RatingDescription func(childComplexity int) int
		StartTime         func(childComplexity int) int
		Status            func(childComplexity int) int
		Statuses          func(childComplexity int) int
		UUID              func(childComplexity int) int
		Updated           func(childComplexity int) int
	}

	JobFlow struct {
		Created      func(childComplexity int) int
		Diff         func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		JobType      func(childComplexity int) int
		Organization func(childComplexity int) int
		Script       func(childComplexity int) int
		ScriptType   func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	JobTemplate struct {
		Area         func(childComplexity int) int
		City         func(childComplexity int) int
		Cost         func(childComplexity int) int
		Created      func(childComplexity int) int
		Date         func(childComplexity int) int
		Description  func(childComplexity int) int
		Duration     func(childComplexity int) int
		EndTime      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		JobType      func(childComplexity int) int
		Name         func(childComplexity int) int
		Object       func(childComplexity int) int
		Organization func(childComplexity int) int
		Published    func(childComplexity int) int
		Region       func(childComplexity int) int
		StartTime    func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	JobType struct {
		Courses         func(childComplexity int) int
		Created         func(childComplexity int) int
		Icon            func(childComplexity int) int
		IsDeleted       func(childComplexity int) int
		LocalityJobCost func(childComplexity int) int
		Name            func(childComplexity int) int
		NeedMedicalBook func(childComplexity int) int
		Organization    func(childComplexity int) int
		UUID            func(childComplexity int) int
		Updated         func(childComplexity int) int
	}

	LocalityJobCost struct {
		Area         func(childComplexity int) int
		City         func(childComplexity int) int
		CityDistrict func(childComplexity int) int
		Country      func(childComplexity int) int
		Created      func(childComplexity int, start string, stop string) int
		IsDeleted    func(childComplexity int) int
		MaxCost      func(childComplexity int) int
		Organization func(childComplexity int) int
		Region       func(childComplexity int) int
		Settlement   func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	MedicalBook struct {
		Checked                       func(childComplexity int) int
		CheckedDate                   func(childComplexity int) int
		CheckedPerson                 func(childComplexity int) int
		Contents                      func(childComplexity int) int
		Created                       func(childComplexity int) int
		DescriptionHealthRestrictions func(childComplexity int) int
		HaveHealthRestrictions        func(childComplexity int) int
		HaveMedicalBook               func(childComplexity int) int
		IsDeleted                     func(childComplexity int) int
		MedicalExaminationDate        func(childComplexity int) int
		Number                        func(childComplexity int) int
		Person                        func(childComplexity int) int
		UUID                          func(childComplexity int) int
		Updated                       func(childComplexity int) int
	}

	Movement struct {
		Amount       func(childComplexity int) int
		Created      func(childComplexity int) int
		Destination  func(childComplexity int) int
		Direct       func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Job          func(childComplexity int) int
		Link         func(childComplexity int) int
		Organization func(childComplexity int) int
		Person       func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	MsgStat struct {
		Job     func(childComplexity int) int
		Person  func(childComplexity int) int
		Reading func(childComplexity int) int
	}

	Mutation struct {
		AddMsg                       func(childComplexity int, job *models.Job, description string, content []*models.Content) int
		AddToBalance                 func(childComplexity int, organization models.Organization, amount float64) int
		AddressMutation              func(childComplexity int, address *models.Address) int
		AgreeToJob                   func(childComplexity int, job *models.Job, user *models.User) int
		Agreement                    func(childComplexity int, incomeRegistration bool, taxPayment bool) int
		AreaMutation                 func(childComplexity int, area *models.Area) int
		BrokenJob                    func(childComplexity int, job *models.Job, reason string) int
		CancelJob                    func(childComplexity int, job *models.Job, reason string) int
		CandidateMutate              func(childComplexity int, candidate *models.Candidate) int
		ChangeStatusJob              func(childComplexity int, job *models.Job, status *models.Status) int
		Check                        func(childComplexity int, job *models.Job, lat *float64, lon *float64, user *models.User) int
		CityDistrictMutation         func(childComplexity int, cityDistrict *models.CityDistrict) int
		CityMutation                 func(childComplexity int, city *models.City) int
		CloseJob                     func(childComplexity int, job *models.Job, percentagePayment *int) int
		ConflictOnJob                func(childComplexity int, job *models.Job, reason string) int
		ContactMutation              func(childComplexity int, contact *models.Contact) int
		ContactTypeMutation          func(childComplexity int, contactType *models.ContactType) int
		CountryMutation              func(childComplexity int, country *models.Country) int
		CourseMutate                 func(childComplexity int, course *models.Course) int
		DropOrganization             func(childComplexity int, organization *models.Organization) int
		EndJob                       func(childComplexity int, code *string, rating *float64, ratingDescription *string) int
		ExcludePerson                func(childComplexity int, organization uuid.UUID, person uuid.UUID) int
		ExcludePersonInObject        func(childComplexity int, organization uuid.UUID, person uuid.UUID) int
		JobFlowMutation              func(childComplexity int, jobFlow *models.JobFlow) int
		JobMutate                    func(childComplexity int, job *models.Job) int
		JobTemplateMutate            func(childComplexity int, jobTemplate *models.JobTemplate) int
		JobTypeMutate                func(childComplexity int, jobType *models.JobType) int
		LocalityJobCostMutate        func(childComplexity int, localityJobCost *models.LocalityJobCost) int
		MassCreationJobs             func(childComplexity int, jobTemplate models.JobTemplate, objects []models.Organization, dates []*time.Time) int
		MedicalBookMutation          func(childComplexity int, medicalBook *models.MedicalBook) int
		MovementMutation             func(childComplexity int, movement *models.Movement) int
		MultipleUpload               func(childComplexity int, files []graphql.Upload, bucket string) int
		NationalityMutation          func(childComplexity int, nationality *models.Nationality) int
		OnPlace                      func(childComplexity int, job *models.Job, lat *float64, lon *float64) int
		OrganizationContactMutation  func(childComplexity int, organizationContact *models.OrganizationContact) int
		OrganizationMutation         func(childComplexity int, organization *models.Organization) int
		OrganizationPositionMutation func(childComplexity int, organizationPosition *models.OrganizationPosition) int
		ParseAddress                 func(childComplexity int, rawAddress *string) int
		PassportMutation             func(childComplexity int, passport *models.Passport) int
		PersonCourseMutation         func(childComplexity int, course *models.PersonCourse) int
		PersonMutation               func(childComplexity int, person *models.Person) int
		PersonRatingMutation         func(childComplexity int, personRating *models.PersonRating) int
		Ping                         func(childComplexity int) int
		PublishJob                   func(childComplexity int, job *models.Job) int
		ReadMsg                      func(childComplexity int, job models.Job) int
		RefuseJob                    func(childComplexity int, job *models.Job, reason string) int
		RegionMutation               func(childComplexity int, region *models.Region) int
		RejectPerson                 func(childComplexity int, job *models.Job, person *models.Person, reason string) int
		RemoveContact                func(childComplexity int, person *models.Person, contact *models.Contact) int
		RemoveParent                 func(childComplexity int, organization *models.Organization) int
		ReqToPartner                 func(childComplexity int) int
		ResetUser                    func(childComplexity int, phone *string) int
		RoleMutation                 func(childComplexity int, role *models.Role) int
		RunJob                       func(childComplexity int, code *string) int
		SetJobRating                 func(childComplexity int, job uuid.UUID, rating float64, description *string) int
		SettlementMutation           func(childComplexity int, settlement *models.Settlement) int
		SingleUpload                 func(childComplexity int, file graphql.Upload, bucket string) int
		StatusMutate                 func(childComplexity int, status *models.Status) int
		StreetMutation               func(childComplexity int, street *models.Street) int
		TagMutate                    func(childComplexity int, tag *models.Tag) int
		UpdateToken                  func(childComplexity int, token string) int
		UserMutation                 func(childComplexity int, user *models.User) int
		Validate                     func(childComplexity int, pincode string) int
	}

	Nationality struct {
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	Organization struct {
		AddressFact         func(childComplexity int) int
		AddressLegal        func(childComplexity int) int
		Created             func(childComplexity int) int
		Departments         func(childComplexity int) int
		Fee                 func(childComplexity int) int
		FirstReserveReward  func(childComplexity int) int
		FullName            func(childComplexity int) int
		INN                 func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsGroup             func(childComplexity int) int
		KPP                 func(childComplexity int) int
		Logo                func(childComplexity int) int
		Name                func(childComplexity int) int
		Parent              func(childComplexity int) int
		ParentOrganization  func(childComplexity int) int
		Persons             func(childComplexity int) int
		Prefix              func(childComplexity int) int
		SecondReserveReward func(childComplexity int) int
		ShortName           func(childComplexity int) int
		StDistance          func(childComplexity int) int
		StTime              func(childComplexity int) int
		UUID                func(childComplexity int) int
		Updated             func(childComplexity int) int
	}

	OrganizationContact struct {
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Person    func(childComplexity int) int
		Position  func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	OrganizationPosition struct {
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	Passport struct {
		AddressRegistration func(childComplexity int) int
		Created             func(childComplexity int) int
		DateIssue           func(childComplexity int) int
		Department          func(childComplexity int) int
		DepartmentCode      func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		Number              func(childComplexity int) int
		Person              func(childComplexity int) int
		PhotoRegistration   func(childComplexity int) int
		Scan                func(childComplexity int) int
		Serial              func(childComplexity int) int
		UUID                func(childComplexity int) int
		Updated             func(childComplexity int) int
	}

	Permission struct {
		Created   func(childComplexity int) int
		Delete    func(childComplexity int) int
		Insert    func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Object    func(childComplexity int) int
		Read      func(childComplexity int) int
		UUID      func(childComplexity int) int
		Update    func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	Person struct {
		ActualContact      func(childComplexity int) int
		BirthDate          func(childComplexity int) int
		Contacts           func(childComplexity int) int
		Country            func(childComplexity int) int
		Created            func(childComplexity int) int
		DistanceResult     func(childComplexity int) int
		Gender             func(childComplexity int) int
		INN                func(childComplexity int) int
		IncomeRegistration func(childComplexity int) int
		IsContact          func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		MedicalBook        func(childComplexity int) int
		Name               func(childComplexity int) int
		Passport           func(childComplexity int) int
		Patronymic         func(childComplexity int) int
		Photo              func(childComplexity int) int
		Position           func(childComplexity int) int
		Rating             func(childComplexity int) int
		RecognizeResult    func(childComplexity int) int
		RecognizedFields   func(childComplexity int) int
		Surname            func(childComplexity int) int
		TaxPayment         func(childComplexity int) int
		UUID               func(childComplexity int) int
		Updated            func(childComplexity int) int
		User               func(childComplexity int) int
		Validated          func(childComplexity int) int
	}

	PersonCourse struct {
		Answers   func(childComplexity int) int
		Course    func(childComplexity int) int
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Person    func(childComplexity int) int
		Questions func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	PersonRating struct {
		Created     func(childComplexity int) int
		Description func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Job         func(childComplexity int) int
		Person      func(childComplexity int) int
		Rating      func(childComplexity int) int
		UUID        func(childComplexity int) int
		Updated     func(childComplexity int) int
	}

	PersonValidateStatus struct {
		Avatar   func(childComplexity int) int
		Passport func(childComplexity int) int
	}

	Query struct {
		ActiveJobs            func(childComplexity int, job *models.Job, filter *models.JobFilter, sort []models.JobSort, offset *int, limit *int) int
		Address               func(childComplexity int, address *models.Address) int
		Addresses             func(childComplexity int, address *models.Address, offset *int, limit *int) int
		Area                  func(childComplexity int, area *models.Area) int
		Areas                 func(childComplexity int, area *models.Area, offset *int, limit *int) int
		AuthUserByPhone       func(childComplexity int, phone string, client *models.ClientType) int
		Candidate             func(childComplexity int, candidate *models.Candidate) int
		Candidates            func(childComplexity int, candidate *models.Candidate, offset *int, limit *int) int
		Cities                func(childComplexity int, city *models.City, offset *int, limit *int) int
		City                  func(childComplexity int, city *models.City) int
		CityDistrict          func(childComplexity int, cityDistrict *models.CityDistrict) int
		CityDistricts         func(childComplexity int, cityDistrict *models.CityDistrict, offset *int, limit *int) int
		Contact               func(childComplexity int, contact models.Contact) int
		ContactType           func(childComplexity int, contactType *models.ContactType) int
		ContactTypes          func(childComplexity int, contactType *models.ContactType, filter *models.ContactTypeFilter, offset *int, limit *int) int
		Contacts              func(childComplexity int, contact *models.Contact, filter *models.ContactFilter, offset *int, limit *int) int
		Countries             func(childComplexity int, country *models.Country, offset *int, limit *int) int
		Country               func(childComplexity int, country *models.Country) int
		Course                func(childComplexity int, course *models.Course) int
		Courses               func(childComplexity int, course *models.Course, offset *int, limit *int) int
		EndJobRequest         func(childComplexity int, job *models.Job, lat *float64, lon *float64) int
		FlowBalance           func(childComplexity int, organization *models.Organization, from *time.Time, to *time.Time) int
		GetBalance            func(childComplexity int, organization models.Organization, until *time.Time) int
		GetCurrentUser        func(childComplexity int) int
		GetMsgStats           func(childComplexity int) int
		GetMyRating           func(childComplexity int) int
		GetOrganizationRating func(childComplexity int, organization *models.Organization) int
		GetPersonRating       func(childComplexity int, person models.Person) int
		GetSelfEmployerStatus func(childComplexity int) int
		GetTypeJobIcons       func(childComplexity int) int
		Job                   func(childComplexity int, job *models.Job) int
		JobFlow               func(childComplexity int, jobFlow *models.JobFlow) int
		JobTemplate           func(childComplexity int, jobTemplate *models.JobTemplate) int
		JobTemplates          func(childComplexity int, jobTemplate *models.JobTemplate, offset *int, limit *int) int
		JobType               func(childComplexity int, jobType *models.JobType) int
		JobTypes              func(childComplexity int, jobType *models.JobType, offset *int, limit *int) int
		Jobs                  func(childComplexity int, job *models.Job, filter *models.JobFilter, sort []models.JobSort, offset *int, limit *int) int
		LocalityJobCost       func(childComplexity int, localityJobCost *models.LocalityJobCost) int
		LocalityJobCosts      func(childComplexity int, localityJobCost *models.LocalityJobCost, offset *int, limit *int) int
		MedicalBook           func(childComplexity int, medicalBook models.MedicalBook) int
		MedicalBooks          func(childComplexity int, medicalBook *models.MedicalBook, offset *int, limit *int) int
		Movement              func(childComplexity int, movement *models.Movement) int
		Movements             func(childComplexity int, movement *models.Movement, filter *models.MovementFilter, offset *int, limit *int) int
		Nationalities         func(childComplexity int, nationality *models.Nationality, offset *int, limit *int) int
		Nationality           func(childComplexity int, nationality *models.Nationality) int
		Organization          func(childComplexity int, organization *models.Organization) int
		OrganizationContact   func(childComplexity int, organizationContact *models.OrganizationContact) int
		OrganizationContacts  func(childComplexity int, organizationContact *models.OrganizationContact, offset *int, limit *int) int
		OrganizationPosition  func(childComplexity int, organizationPosition *models.OrganizationPosition) int
		OrganizationPositions func(childComplexity int, organizationPosition *models.OrganizationPosition, offset *int, limit *int) int
		Organizations         func(childComplexity int, organization *models.Organization, offset *int, limit *int) int
		ParsePerson           func(childComplexity int, photo *graphql.Upload, passport *graphql.Upload) int
		Passport              func(childComplexity int, passport models.Passport) int
		Passports             func(childComplexity int, passport *models.Passport, filter *models.PassportFilter, sort []models.PassportSort, offset *int, limit *int) int
		Person                func(childComplexity int, person models.Person) int
		PersonCourses         func(childComplexity int, course *models.PersonCourse) int
		PersonRating          func(childComplexity int, personRating *models.PersonRating) int
		PersonRatings         func(childComplexity int, personRating *models.PersonRating, offset *int, limit *int) int
		PersonTax             func(childComplexity int) int
		Persons               func(childComplexity int, person *models.Person, filter *models.PersonFilter, sort []models.PersonSort, offset *int, limit *int) int
		Ping                  func(childComplexity int, id *string) int
		RegUserByPhone        func(childComplexity int, phone string) int
		Region                func(childComplexity int, region *models.Region) int
		Regions               func(childComplexity int, region *models.Region, offset *int, limit *int) int
		Role                  func(childComplexity int, role *models.Role) int
		Roles                 func(childComplexity int, role *models.Role, offset *int, limit *int) int
		RunJobRequest         func(childComplexity int, job *models.Job, lat *float64, lon *float64) int
		Settlement            func(childComplexity int, settlement *models.Settlement) int
		Settlements           func(childComplexity int, settlement *models.Settlement, offset *int, limit *int) int
		SignToHotJob          func(childComplexity int) int
		Statistics            func(childComplexity int, organization *models.Organization) int
		Status                func(childComplexity int, status *models.Status) int
		Statuses              func(childComplexity int, status *models.Status, offset *int, limit *int) int
		Street                func(childComplexity int, street *models.Street) int
		Streets               func(childComplexity int, street *models.Street, offset *int, limit *int) int
		Tag                   func(childComplexity int, tag *models.Tag) int
		Tags                  func(childComplexity int, tag *models.Tag, offset *int, limit *int) int
		User                  func(childComplexity int, user *models.User) int
		UserLocation          func(childComplexity int, lat *float64, lon *float64) int
		UserMsg               func(childComplexity int, status *models.Status, offset *int, limit *int) int
		Users                 func(childComplexity int, user *models.User, filter *models.UserFilter, sort []models.UserSort, offset *int, limit *int) int
		UsersByObject         func(childComplexity int, object *models.Organization, user *models.User, filter *models.UserFilter, sort []models.UserSort, offset *int, limit *int) int
		ValidateInn           func(childComplexity int, inn string) int
	}

	RecognizedField struct {
		Confidence func(childComplexity int) int
		Result     func(childComplexity int) int
		Valid      func(childComplexity int) int
	}

	RecognizedFields struct {
		BirthDate      func(childComplexity int) int
		DateIssue      func(childComplexity int) int
		Department     func(childComplexity int) int
		DepartmentCode func(childComplexity int) int
		Error          func(childComplexity int) int
		Gender         func(childComplexity int) int
		Name           func(childComplexity int) int
		Number         func(childComplexity int) int
		Patronymic     func(childComplexity int) int
		Serial         func(childComplexity int) int
		Surname        func(childComplexity int) int
	}

	Region struct {
		Created   func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		UUID      func(childComplexity int) int
		Updated   func(childComplexity int) int
	}

	RightToObject struct {
		Delete func(childComplexity int) int
		Insert func(childComplexity int) int
		Object func(childComplexity int) int
		Select func(childComplexity int) int
		Update func(childComplexity int) int
	}

	Role struct {
		Created      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Name         func(childComplexity int) int
		Organization func(childComplexity int) int
		Permissions  func(childComplexity int) int
		RoleType     func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	Settlement struct {
		Area         func(childComplexity int) int
		City         func(childComplexity int) int
		CityDistrict func(childComplexity int) int
		Created      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Name         func(childComplexity int) int
		Region       func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	Status struct {
		Content     func(childComplexity int) int
		Created     func(childComplexity int) int
		Description func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Job         func(childComplexity int) int
		Lat         func(childComplexity int) int
		Lon         func(childComplexity int) int
		Person      func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		UUID        func(childComplexity int) int
		Updated     func(childComplexity int) int
	}

	Street struct {
		Area         func(childComplexity int) int
		City         func(childComplexity int) int
		CityDistrict func(childComplexity int) int
		Created      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Name         func(childComplexity int) int
		Region       func(childComplexity int) int
		Settlement   func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
	}

	Subscription struct {
		AreaSub         func(childComplexity int) int
		CitySub         func(childComplexity int) int
		JobSub          func(childComplexity int) int
		MsgStatSub      func(childComplexity int) int
		OrganizationSub func(childComplexity int) int
		ParsePersonSub  func(childComplexity int) int
		PersonSub       func(childComplexity int) int
		PingSub         func(childComplexity int, id *string) int
		RegionSub       func(childComplexity int) int
		UserSub         func(childComplexity int) int
	}

	Tag struct {
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		UUID      func(childComplexity int) int
	}

	Taxes struct {
		Penalty     func(childComplexity int) int
		Preliminary func(childComplexity int) int
		Proceeds    func(childComplexity int) int
		Tax         func(childComplexity int) int
	}

	TemplateRights struct {
		Created        func(childComplexity int) int
		IsDeleted      func(childComplexity int) int
		Name           func(childComplexity int) int
		RightsToObject func(childComplexity int) int
		UUID           func(childComplexity int) int
		Updated        func(childComplexity int) int
	}

	User struct {
		Contact      func(childComplexity int) int
		Created      func(childComplexity int) int
		Groups       func(childComplexity int) int
		IsBlocked    func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		IsDisabled   func(childComplexity int) int
		Objects      func(childComplexity int) int
		Organization func(childComplexity int) int
		Person       func(childComplexity int) int
		Role         func(childComplexity int) int
		UUID         func(childComplexity int) int
		Updated      func(childComplexity int) int
		UserType     func(childComplexity int) int
	}

	Stat struct {
		Month         func(childComplexity int) int
		PreviousMonth func(childComplexity int) int
		Quarter       func(childComplexity int) int
	}
}

type MutationResolver interface {
	Ping(ctx context.Context) (*string, error)
	MovementMutation(ctx context.Context, movement *models.Movement) (*models.Movement, error)
	AddToBalance(ctx context.Context, organization models.Organization, amount float64) (bool, error)
	ParseAddress(ctx context.Context, rawAddress *string) ([]*string, error)
	CountryMutation(ctx context.Context, country *models.Country) (*models.Country, error)
	RegionMutation(ctx context.Context, region *models.Region) (*models.Region, error)
	AreaMutation(ctx context.Context, area *models.Area) (*models.Area, error)
	CityMutation(ctx context.Context, city *models.City) (*models.City, error)
	CityDistrictMutation(ctx context.Context, cityDistrict *models.CityDistrict) (*models.CityDistrict, error)
	SettlementMutation(ctx context.Context, settlement *models.Settlement) (*models.Settlement, error)
	StreetMutation(ctx context.Context, street *models.Street) (*models.Street, error)
	AddressMutation(ctx context.Context, address *models.Address) (*models.Address, error)
	ContactMutation(ctx context.Context, contact *models.Contact) (*models.Contact, error)
	ContactTypeMutation(ctx context.Context, contactType *models.ContactType) (*models.ContactType, error)
	JobFlowMutation(ctx context.Context, jobFlow *models.JobFlow) (*models.JobFlow, error)
	PublishJob(ctx context.Context, job *models.Job) (bool, error)
	AgreeToJob(ctx context.Context, job *models.Job, user *models.User) (*models.InfoAboutJob, error)
	RefuseJob(ctx context.Context, job *models.Job, reason string) (bool, error)
	Check(ctx context.Context, job *models.Job, lat *float64, lon *float64, user *models.User) (bool, error)
	OnPlace(ctx context.Context, job *models.Job, lat *float64, lon *float64) (bool, error)
	ConflictOnJob(ctx context.Context, job *models.Job, reason string) (bool, error)
	ChangeStatusJob(ctx context.Context, job *models.Job, status *models.Status) (bool, error)
	CancelJob(ctx context.Context, job *models.Job, reason string) (bool, error)
	RejectPerson(ctx context.Context, job *models.Job, person *models.Person, reason string) (bool, error)
	BrokenJob(ctx context.Context, job *models.Job, reason string) (bool, error)
	CloseJob(ctx context.Context, job *models.Job, percentagePayment *int) (bool, error)
	RunJob(ctx context.Context, code *string) (bool, error)
	EndJob(ctx context.Context, code *string, rating *float64, ratingDescription *string) (*models.PersonRating, error)
	AddMsg(ctx context.Context, job *models.Job, description string, content []*models.Content) (bool, error)
	ReadMsg(ctx context.Context, job models.Job) (bool, error)
	CourseMutate(ctx context.Context, course *models.Course) (*models.Course, error)
	LocalityJobCostMutate(ctx context.Context, localityJobCost *models.LocalityJobCost) (*models.LocalityJobCost, error)
	JobTypeMutate(ctx context.Context, jobType *models.JobType) (*models.JobType, error)
	JobTemplateMutate(ctx context.Context, jobTemplate *models.JobTemplate) (*models.JobTemplate, error)
	JobMutate(ctx context.Context, job *models.Job) (*models.Job, error)
	CandidateMutate(ctx context.Context, candidate *models.Candidate) (*models.Candidate, error)
	StatusMutate(ctx context.Context, status *models.Status) (*models.Status, error)
	TagMutate(ctx context.Context, tag *models.Tag) (*models.Tag, error)
	MassCreationJobs(ctx context.Context, jobTemplate models.JobTemplate, objects []models.Organization, dates []*time.Time) (bool, error)
	SetJobRating(ctx context.Context, job uuid.UUID, rating float64, description *string) (bool, error)
	MedicalBookMutation(ctx context.Context, medicalBook *models.MedicalBook) (*models.MedicalBook, error)
	NationalityMutation(ctx context.Context, nationality *models.Nationality) (*models.Nationality, error)
	SingleUpload(ctx context.Context, file graphql.Upload, bucket string) (uuid.UUID, error)
	MultipleUpload(ctx context.Context, files []graphql.Upload, bucket string) ([]uuid.UUID, error)
	OrganizationPositionMutation(ctx context.Context, organizationPosition *models.OrganizationPosition) (*models.OrganizationPosition, error)
	OrganizationContactMutation(ctx context.Context, organizationContact *models.OrganizationContact) (*models.OrganizationContact, error)
	OrganizationMutation(ctx context.Context, organization *models.Organization) (*models.Organization, error)
	ExcludePerson(ctx context.Context, organization uuid.UUID, person uuid.UUID) (bool, error)
	ExcludePersonInObject(ctx context.Context, organization uuid.UUID, person uuid.UUID) (bool, error)
	DropOrganization(ctx context.Context, organization *models.Organization) (bool, error)
	RemoveParent(ctx context.Context, organization *models.Organization) (bool, error)
	PassportMutation(ctx context.Context, passport *models.Passport) (*models.Passport, error)
	PersonMutation(ctx context.Context, person *models.Person) (*models.Person, error)
	PersonCourseMutation(ctx context.Context, course *models.PersonCourse) (*models.PersonCourse, error)
	PersonRatingMutation(ctx context.Context, personRating *models.PersonRating) (*models.PersonRating, error)
	Agreement(ctx context.Context, incomeRegistration bool, taxPayment bool) (bool, error)
	RemoveContact(ctx context.Context, person *models.Person, contact *models.Contact) (bool, error)
	ReqToPartner(ctx context.Context) (bool, error)
	RoleMutation(ctx context.Context, role *models.Role) (*models.Role, error)
	Validate(ctx context.Context, pincode string) (*string, error)
	UserMutation(ctx context.Context, user *models.User) (*models.User, error)
	ResetUser(ctx context.Context, phone *string) (bool, error)
	UpdateToken(ctx context.Context, token string) (bool, error)
}
type QueryResolver interface {
	Ping(ctx context.Context, id *string) (*string, error)
	Movement(ctx context.Context, movement *models.Movement) (*models.Movement, error)
	Movements(ctx context.Context, movement *models.Movement, filter *models.MovementFilter, offset *int, limit *int) ([]*models.Movement, error)
	FlowBalance(ctx context.Context, organization *models.Organization, from *time.Time, to *time.Time) ([]*models.Balance, error)
	GetBalance(ctx context.Context, organization models.Organization, until *time.Time) (*float64, error)
	Statistics(ctx context.Context, organization *models.Organization) (*models.Stat, error)
	Country(ctx context.Context, country *models.Country) (*models.Country, error)
	Countries(ctx context.Context, country *models.Country, offset *int, limit *int) ([]*models.Country, error)
	Region(ctx context.Context, region *models.Region) (*models.Region, error)
	Regions(ctx context.Context, region *models.Region, offset *int, limit *int) ([]*models.Region, error)
	Area(ctx context.Context, area *models.Area) (*models.Area, error)
	Areas(ctx context.Context, area *models.Area, offset *int, limit *int) ([]*models.Area, error)
	City(ctx context.Context, city *models.City) (*models.City, error)
	Cities(ctx context.Context, city *models.City, offset *int, limit *int) ([]*models.City, error)
	CityDistrict(ctx context.Context, cityDistrict *models.CityDistrict) (*models.CityDistrict, error)
	CityDistricts(ctx context.Context, cityDistrict *models.CityDistrict, offset *int, limit *int) ([]*models.CityDistrict, error)
	Settlement(ctx context.Context, settlement *models.Settlement) (*models.Settlement, error)
	Settlements(ctx context.Context, settlement *models.Settlement, offset *int, limit *int) ([]*models.Settlement, error)
	Street(ctx context.Context, street *models.Street) (*models.Street, error)
	Streets(ctx context.Context, street *models.Street, offset *int, limit *int) ([]*models.Street, error)
	Address(ctx context.Context, address *models.Address) (*models.Address, error)
	Addresses(ctx context.Context, address *models.Address, offset *int, limit *int) ([]*models.Address, error)
	Contact(ctx context.Context, contact models.Contact) (*models.Contact, error)
	Contacts(ctx context.Context, contact *models.Contact, filter *models.ContactFilter, offset *int, limit *int) ([]*models.Contact, error)
	ContactType(ctx context.Context, contactType *models.ContactType) (*models.ContactType, error)
	ContactTypes(ctx context.Context, contactType *models.ContactType, filter *models.ContactTypeFilter, offset *int, limit *int) ([]*models.ContactType, error)
	JobFlow(ctx context.Context, jobFlow *models.JobFlow) (*models.JobFlow, error)
	RunJobRequest(ctx context.Context, job *models.Job, lat *float64, lon *float64) (*string, error)
	EndJobRequest(ctx context.Context, job *models.Job, lat *float64, lon *float64) (*string, error)
	SignToHotJob(ctx context.Context) (*bool, error)
	GetMsgStats(ctx context.Context) ([]*models.MsgStat, error)
	UserMsg(ctx context.Context, status *models.Status, offset *int, limit *int) ([]*models.Status, error)
	GetTypeJobIcons(ctx context.Context) ([]string, error)
	Course(ctx context.Context, course *models.Course) (*models.Course, error)
	Courses(ctx context.Context, course *models.Course, offset *int, limit *int) ([]*models.Course, error)
	LocalityJobCost(ctx context.Context, localityJobCost *models.LocalityJobCost) (*models.LocalityJobCost, error)
	LocalityJobCosts(ctx context.Context, localityJobCost *models.LocalityJobCost, offset *int, limit *int) ([]*models.LocalityJobCost, error)
	JobType(ctx context.Context, jobType *models.JobType) (*models.JobType, error)
	JobTypes(ctx context.Context, jobType *models.JobType, offset *int, limit *int) ([]*models.JobType, error)
	JobTemplate(ctx context.Context, jobTemplate *models.JobTemplate) (*models.JobTemplate, error)
	JobTemplates(ctx context.Context, jobTemplate *models.JobTemplate, offset *int, limit *int) ([]*models.JobTemplate, error)
	Job(ctx context.Context, job *models.Job) (*models.Job, error)
	Jobs(ctx context.Context, job *models.Job, filter *models.JobFilter, sort []models.JobSort, offset *int, limit *int) ([]*models.Job, error)
	ActiveJobs(ctx context.Context, job *models.Job, filter *models.JobFilter, sort []models.JobSort, offset *int, limit *int) ([]*models.Job, error)
	Candidate(ctx context.Context, candidate *models.Candidate) (*models.Candidate, error)
	Candidates(ctx context.Context, candidate *models.Candidate, offset *int, limit *int) ([]*models.Candidate, error)
	Status(ctx context.Context, status *models.Status) (*models.Status, error)
	Statuses(ctx context.Context, status *models.Status, offset *int, limit *int) ([]*models.Status, error)
	Tag(ctx context.Context, tag *models.Tag) (*models.Tag, error)
	Tags(ctx context.Context, tag *models.Tag, offset *int, limit *int) ([]*models.Tag, error)
	MedicalBook(ctx context.Context, medicalBook models.MedicalBook) (*models.MedicalBook, error)
	MedicalBooks(ctx context.Context, medicalBook *models.MedicalBook, offset *int, limit *int) ([]*models.MedicalBook, error)
	Nationality(ctx context.Context, nationality *models.Nationality) (*models.Nationality, error)
	Nationalities(ctx context.Context, nationality *models.Nationality, offset *int, limit *int) ([]*models.Nationality, error)
	OrganizationPosition(ctx context.Context, organizationPosition *models.OrganizationPosition) (*models.OrganizationPosition, error)
	OrganizationPositions(ctx context.Context, organizationPosition *models.OrganizationPosition, offset *int, limit *int) ([]*models.OrganizationPosition, error)
	OrganizationContact(ctx context.Context, organizationContact *models.OrganizationContact) (*models.OrganizationContact, error)
	OrganizationContacts(ctx context.Context, organizationContact *models.OrganizationContact, offset *int, limit *int) ([]*models.OrganizationContact, error)
	Organization(ctx context.Context, organization *models.Organization) (*models.Organization, error)
	Organizations(ctx context.Context, organization *models.Organization, offset *int, limit *int) ([]*models.Organization, error)
	GetOrganizationRating(ctx context.Context, organization *models.Organization) (*float64, error)
	Passport(ctx context.Context, passport models.Passport) (*models.Passport, error)
	Passports(ctx context.Context, passport *models.Passport, filter *models.PassportFilter, sort []models.PassportSort, offset *int, limit *int) ([]*models.Passport, error)
	Person(ctx context.Context, person models.Person) (*models.Person, error)
	Persons(ctx context.Context, person *models.Person, filter *models.PersonFilter, sort []models.PersonSort, offset *int, limit *int) ([]*models.Person, error)
	ParsePerson(ctx context.Context, photo *graphql.Upload, passport *graphql.Upload) (*models.PersonValidateStatus, error)
	ValidateInn(ctx context.Context, inn string) (*bool, error)
	PersonCourses(ctx context.Context, course *models.PersonCourse) ([]*models.PersonCourse, error)
	GetPersonRating(ctx context.Context, person models.Person) (*float64, error)
	GetMyRating(ctx context.Context) (*float64, error)
	PersonRating(ctx context.Context, personRating *models.PersonRating) (*models.PersonRating, error)
	PersonRatings(ctx context.Context, personRating *models.PersonRating, offset *int, limit *int) ([]*models.PersonRating, error)
	GetSelfEmployerStatus(ctx context.Context) (bool, error)
	PersonTax(ctx context.Context) (*models.Taxes, error)
	Role(ctx context.Context, role *models.Role) (*models.Role, error)
	Roles(ctx context.Context, role *models.Role, offset *int, limit *int) ([]*models.Role, error)
	AuthUserByPhone(ctx context.Context, phone string, client *models.ClientType) (*string, error)
	RegUserByPhone(ctx context.Context, phone string) (*string, error)
	GetCurrentUser(ctx context.Context) (*models.User, error)
	User(ctx context.Context, user *models.User) (*models.User, error)
	Users(ctx context.Context, user *models.User, filter *models.UserFilter, sort []models.UserSort, offset *int, limit *int) ([]*models.User, error)
	UsersByObject(ctx context.Context, object *models.Organization, user *models.User, filter *models.UserFilter, sort []models.UserSort, offset *int, limit *int) ([]*models.User, error)
	UserLocation(ctx context.Context, lat *float64, lon *float64) (*bool, error)
}
type SubscriptionResolver interface {
	PingSub(ctx context.Context, id *string) (<-chan *string, error)
	RegionSub(ctx context.Context) (<-chan *models.Region, error)
	AreaSub(ctx context.Context) (<-chan *models.Area, error)
	CitySub(ctx context.Context) (<-chan *models.City, error)
	MsgStatSub(ctx context.Context) (<-chan *models.MsgStat, error)
	JobSub(ctx context.Context) (<-chan *models.Job, error)
	OrganizationSub(ctx context.Context) (<-chan *models.Organization, error)
	ParsePersonSub(ctx context.Context) (<-chan *models.RecognizedFields, error)
	PersonSub(ctx context.Context) (<-chan *models.Person, error)
	UserSub(ctx context.Context) (<-chan *models.User, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Address.area":
		if e.complexity.Address.Area == nil {
			break
		}

		return e.complexity.Address.Area(childComplexity), true

	case "Address.block":
		if e.complexity.Address.Block == nil {
			break
		}

		return e.complexity.Address.Block(childComplexity), true

	case "Address.city":
		if e.complexity.Address.City == nil {
			break
		}

		return e.complexity.Address.City(childComplexity), true

	case "Address.cityDistrict":
		if e.complexity.Address.CityDistrict == nil {
			break
		}

		return e.complexity.Address.CityDistrict(childComplexity), true

	case "Address.country":
		if e.complexity.Address.Country == nil {
			break
		}

		return e.complexity.Address.Country(childComplexity), true

	case "Address.created":
		if e.complexity.Address.Created == nil {
			break
		}

		return e.complexity.Address.Created(childComplexity), true

	case "Address.flat":
		if e.complexity.Address.Flat == nil {
			break
		}

		return e.complexity.Address.Flat(childComplexity), true

	case "Address.formattedAddress":
		if e.complexity.Address.FormattedAddress == nil {
			break
		}

		return e.complexity.Address.FormattedAddress(childComplexity), true

	case "Address.house":
		if e.complexity.Address.House == nil {
			break
		}

		return e.complexity.Address.House(childComplexity), true

	case "Address.isDeleted":
		if e.complexity.Address.IsDeleted == nil {
			break
		}

		return e.complexity.Address.IsDeleted(childComplexity), true

	case "Address.lat":
		if e.complexity.Address.Lat == nil {
			break
		}

		return e.complexity.Address.Lat(childComplexity), true

	case "Address.lon":
		if e.complexity.Address.Lon == nil {
			break
		}

		return e.complexity.Address.Lon(childComplexity), true

	case "Address.organization":
		if e.complexity.Address.Organization == nil {
			break
		}

		return e.complexity.Address.Organization(childComplexity), true

	case "Address.person":
		if e.complexity.Address.Person == nil {
			break
		}

		return e.complexity.Address.Person(childComplexity), true

	case "Address.region":
		if e.complexity.Address.Region == nil {
			break
		}

		return e.complexity.Address.Region(childComplexity), true

	case "Address.settlement":
		if e.complexity.Address.Settlement == nil {
			break
		}

		return e.complexity.Address.Settlement(childComplexity), true

	case "Address.street":
		if e.complexity.Address.Street == nil {
			break
		}

		return e.complexity.Address.Street(childComplexity), true

	case "Address.uuid":
		if e.complexity.Address.UUID == nil {
			break
		}

		return e.complexity.Address.UUID(childComplexity), true

	case "Address.updated":
		if e.complexity.Address.Updated == nil {
			break
		}

		return e.complexity.Address.Updated(childComplexity), true

	case "Area.created":
		if e.complexity.Area.Created == nil {
			break
		}

		return e.complexity.Area.Created(childComplexity), true

	case "Area.isDeleted":
		if e.complexity.Area.IsDeleted == nil {
			break
		}

		return e.complexity.Area.IsDeleted(childComplexity), true

	case "Area.name":
		if e.complexity.Area.Name == nil {
			break
		}

		return e.complexity.Area.Name(childComplexity), true

	case "Area.region":
		if e.complexity.Area.Region == nil {
			break
		}

		return e.complexity.Area.Region(childComplexity), true

	case "Area.uuid":
		if e.complexity.Area.UUID == nil {
			break
		}

		return e.complexity.Area.UUID(childComplexity), true

	case "Area.updated":
		if e.complexity.Area.Updated == nil {
			break
		}

		return e.complexity.Area.Updated(childComplexity), true

	case "Balance.amount":
		if e.complexity.Balance.Amount == nil {
			break
		}

		return e.complexity.Balance.Amount(childComplexity), true

	case "Balance.created":
		if e.complexity.Balance.Created == nil {
			break
		}

		return e.complexity.Balance.Created(childComplexity), true

	case "Balance.isDeleted":
		if e.complexity.Balance.IsDeleted == nil {
			break
		}

		return e.complexity.Balance.IsDeleted(childComplexity), true

	case "Balance.movement":
		if e.complexity.Balance.Movement == nil {
			break
		}

		return e.complexity.Balance.Movement(childComplexity), true

	case "Balance.organization":
		if e.complexity.Balance.Organization == nil {
			break
		}

		return e.complexity.Balance.Organization(childComplexity), true

	case "Balance.uuid":
		if e.complexity.Balance.UUID == nil {
			break
		}

		return e.complexity.Balance.UUID(childComplexity), true

	case "Balance.updated":
		if e.complexity.Balance.Updated == nil {
			break
		}

		return e.complexity.Balance.Updated(childComplexity), true

	case "Candidate.candidateTag":
		if e.complexity.Candidate.CandidateTags == nil {
			break
		}

		return e.complexity.Candidate.CandidateTags(childComplexity), true

	case "Candidate.created":
		if e.complexity.Candidate.Created == nil {
			break
		}

		return e.complexity.Candidate.Created(childComplexity), true

	case "Candidate.isDeleted":
		if e.complexity.Candidate.IsDeleted == nil {
			break
		}

		return e.complexity.Candidate.IsDeleted(childComplexity), true

	case "Candidate.job":
		if e.complexity.Candidate.Job == nil {
			break
		}

		return e.complexity.Candidate.Job(childComplexity), true

	case "Candidate.person":
		if e.complexity.Candidate.Person == nil {
			break
		}

		return e.complexity.Candidate.Person(childComplexity), true

	case "Candidate.uuid":
		if e.complexity.Candidate.UUID == nil {
			break
		}

		return e.complexity.Candidate.UUID(childComplexity), true

	case "Candidate.updated":
		if e.complexity.Candidate.Updated == nil {
			break
		}

		return e.complexity.Candidate.Updated(childComplexity), true

	case "City.area":
		if e.complexity.City.Area == nil {
			break
		}

		return e.complexity.City.Area(childComplexity), true

	case "City.created":
		if e.complexity.City.Created == nil {
			break
		}

		return e.complexity.City.Created(childComplexity), true

	case "City.isDeleted":
		if e.complexity.City.IsDeleted == nil {
			break
		}

		return e.complexity.City.IsDeleted(childComplexity), true

	case "City.name":
		if e.complexity.City.Name == nil {
			break
		}

		return e.complexity.City.Name(childComplexity), true

	case "City.region":
		if e.complexity.City.Region == nil {
			break
		}

		return e.complexity.City.Region(childComplexity), true

	case "City.uuid":
		if e.complexity.City.UUID == nil {
			break
		}

		return e.complexity.City.UUID(childComplexity), true

	case "City.updated":
		if e.complexity.City.Updated == nil {
			break
		}

		return e.complexity.City.Updated(childComplexity), true

	case "CityDistrict.area":
		if e.complexity.CityDistrict.Area == nil {
			break
		}

		return e.complexity.CityDistrict.Area(childComplexity), true

	case "CityDistrict.city":
		if e.complexity.CityDistrict.City == nil {
			break
		}

		return e.complexity.CityDistrict.City(childComplexity), true

	case "CityDistrict.created":
		if e.complexity.CityDistrict.Created == nil {
			break
		}

		return e.complexity.CityDistrict.Created(childComplexity), true

	case "CityDistrict.isDeleted":
		if e.complexity.CityDistrict.IsDeleted == nil {
			break
		}

		return e.complexity.CityDistrict.IsDeleted(childComplexity), true

	case "CityDistrict.name":
		if e.complexity.CityDistrict.Name == nil {
			break
		}

		return e.complexity.CityDistrict.Name(childComplexity), true

	case "CityDistrict.region":
		if e.complexity.CityDistrict.Region == nil {
			break
		}

		return e.complexity.CityDistrict.Region(childComplexity), true

	case "CityDistrict.uuid":
		if e.complexity.CityDistrict.UUID == nil {
			break
		}

		return e.complexity.CityDistrict.UUID(childComplexity), true

	case "CityDistrict.updated":
		if e.complexity.CityDistrict.Updated == nil {
			break
		}

		return e.complexity.CityDistrict.Updated(childComplexity), true

	case "Contact.contactType":
		if e.complexity.Contact.ContactType == nil {
			break
		}

		return e.complexity.Contact.ContactType(childComplexity), true

	case "Contact.created":
		if e.complexity.Contact.Created == nil {
			break
		}

		return e.complexity.Contact.Created(childComplexity), true

	case "Contact.isDeleted":
		if e.complexity.Contact.IsDeleted == nil {
			break
		}

		return e.complexity.Contact.IsDeleted(childComplexity), true

	case "Contact.organization":
		if e.complexity.Contact.Organization == nil {
			break
		}

		return e.complexity.Contact.Organization(childComplexity), true

	case "Contact.person":
		if e.complexity.Contact.Person == nil {
			break
		}

		return e.complexity.Contact.Person(childComplexity), true

	case "Contact.presentation":
		if e.complexity.Contact.Presentation == nil {
			break
		}

		return e.complexity.Contact.Presentation(childComplexity), true

	case "Contact.uuid":
		if e.complexity.Contact.UUID == nil {
			break
		}

		return e.complexity.Contact.UUID(childComplexity), true

	case "Contact.updated":
		if e.complexity.Contact.Updated == nil {
			break
		}

		return e.complexity.Contact.Updated(childComplexity), true

	case "ContactType.created":
		if e.complexity.ContactType.Created == nil {
			break
		}

		return e.complexity.ContactType.Created(childComplexity), true

	case "ContactType.isDeleted":
		if e.complexity.ContactType.IsDeleted == nil {
			break
		}

		return e.complexity.ContactType.IsDeleted(childComplexity), true

	case "ContactType.name":
		if e.complexity.ContactType.Name == nil {
			break
		}

		return e.complexity.ContactType.Name(childComplexity), true

	case "ContactType.uuid":
		if e.complexity.ContactType.UUID == nil {
			break
		}

		return e.complexity.ContactType.UUID(childComplexity), true

	case "ContactType.updated":
		if e.complexity.ContactType.Updated == nil {
			break
		}

		return e.complexity.ContactType.Updated(childComplexity), true

	case "Content.bucket":
		if e.complexity.Content.Bucket == nil {
			break
		}

		return e.complexity.Content.Bucket(childComplexity), true

	case "Content.isDeleted":
		if e.complexity.Content.IsDeleted == nil {
			break
		}

		return e.complexity.Content.IsDeleted(childComplexity), true

	case "Content.uuid":
		if e.complexity.Content.UUID == nil {
			break
		}

		return e.complexity.Content.UUID(childComplexity), true

	case "Country.created":
		if e.complexity.Country.Created == nil {
			break
		}

		return e.complexity.Country.Created(childComplexity), true

	case "Country.isDeleted":
		if e.complexity.Country.IsDeleted == nil {
			break
		}

		return e.complexity.Country.IsDeleted(childComplexity), true

	case "Country.name":
		if e.complexity.Country.Name == nil {
			break
		}

		return e.complexity.Country.Name(childComplexity), true

	case "Country.uuid":
		if e.complexity.Country.UUID == nil {
			break
		}

		return e.complexity.Country.UUID(childComplexity), true

	case "Country.updated":
		if e.complexity.Country.Updated == nil {
			break
		}

		return e.complexity.Country.Updated(childComplexity), true

	case "Course.content":
		if e.complexity.Course.Content == nil {
			break
		}

		return e.complexity.Course.Content(childComplexity), true

	case "Course.courseType":
		if e.complexity.Course.CourseType == nil {
			break
		}

		return e.complexity.Course.CourseType(childComplexity), true

	case "Course.created":
		if e.complexity.Course.Created == nil {
			break
		}

		return e.complexity.Course.Created(childComplexity), true

	case "Course.isDeleted":
		if e.complexity.Course.IsDeleted == nil {
			break
		}

		return e.complexity.Course.IsDeleted(childComplexity), true

	case "Course.name":
		if e.complexity.Course.Name == nil {
			break
		}

		return e.complexity.Course.Name(childComplexity), true

	case "Course.organization":
		if e.complexity.Course.Organization == nil {
			break
		}

		return e.complexity.Course.Organization(childComplexity), true

	case "Course.passingScore":
		if e.complexity.Course.PassingScore == nil {
			break
		}

		return e.complexity.Course.PassingScore(childComplexity), true

	case "Course.uuid":
		if e.complexity.Course.UUID == nil {
			break
		}

		return e.complexity.Course.UUID(childComplexity), true

	case "Course.updated":
		if e.complexity.Course.Updated == nil {
			break
		}

		return e.complexity.Course.Updated(childComplexity), true

	case "InfoAboutJob.courses":
		if e.complexity.InfoAboutJob.Courses == nil {
			break
		}

		return e.complexity.InfoAboutJob.Courses(childComplexity), true

	case "InfoAboutJob.workerOrder":
		if e.complexity.InfoAboutJob.WorkerOrder == nil {
			break
		}

		return e.complexity.InfoAboutJob.WorkerOrder(childComplexity), true

	case "Job.candidates":
		if e.complexity.Job.Candidates == nil {
			break
		}

		return e.complexity.Job.Candidates(childComplexity), true

	case "Job.cost":
		if e.complexity.Job.Cost == nil {
			break
		}

		return e.complexity.Job.Cost(childComplexity), true

	case "Job.created":
		if e.complexity.Job.Created == nil {
			break
		}

		return e.complexity.Job.Created(childComplexity), true

	case "Job.date":
		if e.complexity.Job.Date == nil {
			break
		}

		return e.complexity.Job.Date(childComplexity), true

	case "Job.description":
		if e.complexity.Job.Description == nil {
			break
		}

		return e.complexity.Job.Description(childComplexity), true

	case "Job.duration":
		if e.complexity.Job.Duration == nil {
			break
		}

		return e.complexity.Job.Duration(childComplexity), true

	case "Job.endTime":
		if e.complexity.Job.EndTime == nil {
			break
		}

		return e.complexity.Job.EndTime(childComplexity), true

	case "Job.executor":
		if e.complexity.Job.Executor == nil {
			break
		}

		return e.complexity.Job.Executor(childComplexity), true

	case "Job.isDeleted":
		if e.complexity.Job.IsDeleted == nil {
			break
		}

		return e.complexity.Job.IsDeleted(childComplexity), true

	case "Job.isHot":
		if e.complexity.Job.IsHot == nil {
			break
		}

		return e.complexity.Job.IsHot(childComplexity), true

	case "Job.jobTemplate":
		if e.complexity.Job.JobTemplate == nil {
			break
		}

		return e.complexity.Job.JobTemplate(childComplexity), true

	case "Job.jobType":
		if e.complexity.Job.JobType == nil {
			break
		}

		return e.complexity.Job.JobType(childComplexity), true

	case "Job.name":
		if e.complexity.Job.Name == nil {
			break
		}

		return e.complexity.Job.Name(childComplexity), true

	case "Job.object":
		if e.complexity.Job.Object == nil {
			break
		}

		return e.complexity.Job.Object(childComplexity), true

	case "Job.published":
		if e.complexity.Job.Published == nil {
			break
		}

		return e.complexity.Job.Published(childComplexity), true

	case "Job.rating":
		if e.complexity.Job.Rating == nil {
			break
		}

		return e.complexity.Job.Rating(childComplexity), true

	case "Job.ratingDescription":
		if e.complexity.Job.RatingDescription == nil {
			break
		}

		return e.complexity.Job.RatingDescription(childComplexity), true

	case "Job.startTime":
		if e.complexity.Job.StartTime == nil {
			break
		}

		return e.complexity.Job.StartTime(childComplexity), true

	case "Job.status":
		if e.complexity.Job.Status == nil {
			break
		}

		return e.complexity.Job.Status(childComplexity), true

	case "Job.statuses":
		if e.complexity.Job.Statuses == nil {
			break
		}

		return e.complexity.Job.Statuses(childComplexity), true

	case "Job.uuid":
		if e.complexity.Job.UUID == nil {
			break
		}

		return e.complexity.Job.UUID(childComplexity), true

	case "Job.updated":
		if e.complexity.Job.Updated == nil {
			break
		}

		return e.complexity.Job.Updated(childComplexity), true

	case "JobFlow.created":
		if e.complexity.JobFlow.Created == nil {
			break
		}

		return e.complexity.JobFlow.Created(childComplexity), true

	case "JobFlow.diff":
		if e.complexity.JobFlow.Diff == nil {
			break
		}

		return e.complexity.JobFlow.Diff(childComplexity), true

	case "JobFlow.isDeleted":
		if e.complexity.JobFlow.IsDeleted == nil {
			break
		}

		return e.complexity.JobFlow.IsDeleted(childComplexity), true

	case "JobFlow.jobType":
		if e.complexity.JobFlow.JobType == nil {
			break
		}

		return e.complexity.JobFlow.JobType(childComplexity), true

	case "JobFlow.organization":
		if e.complexity.JobFlow.Organization == nil {
			break
		}

		return e.complexity.JobFlow.Organization(childComplexity), true

	case "JobFlow.script":
		if e.complexity.JobFlow.Script == nil {
			break
		}

		return e.complexity.JobFlow.Script(childComplexity), true

	case "JobFlow.scriptType":
		if e.complexity.JobFlow.ScriptType == nil {
			break
		}

		return e.complexity.JobFlow.ScriptType(childComplexity), true

	case "JobFlow.uuid":
		if e.complexity.JobFlow.UUID == nil {
			break
		}

		return e.complexity.JobFlow.UUID(childComplexity), true

	case "JobFlow.updated":
		if e.complexity.JobFlow.Updated == nil {
			break
		}

		return e.complexity.JobFlow.Updated(childComplexity), true

	case "JobTemplate.area":
		if e.complexity.JobTemplate.Area == nil {
			break
		}

		return e.complexity.JobTemplate.Area(childComplexity), true

	case "JobTemplate.city":
		if e.complexity.JobTemplate.City == nil {
			break
		}

		return e.complexity.JobTemplate.City(childComplexity), true

	case "JobTemplate.cost":
		if e.complexity.JobTemplate.Cost == nil {
			break
		}

		return e.complexity.JobTemplate.Cost(childComplexity), true

	case "JobTemplate.created":
		if e.complexity.JobTemplate.Created == nil {
			break
		}

		return e.complexity.JobTemplate.Created(childComplexity), true

	case "JobTemplate.date":
		if e.complexity.JobTemplate.Date == nil {
			break
		}

		return e.complexity.JobTemplate.Date(childComplexity), true

	case "JobTemplate.description":
		if e.complexity.JobTemplate.Description == nil {
			break
		}

		return e.complexity.JobTemplate.Description(childComplexity), true

	case "JobTemplate.duration":
		if e.complexity.JobTemplate.Duration == nil {
			break
		}

		return e.complexity.JobTemplate.Duration(childComplexity), true

	case "JobTemplate.endTime":
		if e.complexity.JobTemplate.EndTime == nil {
			break
		}

		return e.complexity.JobTemplate.EndTime(childComplexity), true

	case "JobTemplate.isDeleted":
		if e.complexity.JobTemplate.IsDeleted == nil {
			break
		}

		return e.complexity.JobTemplate.IsDeleted(childComplexity), true

	case "JobTemplate.jobType":
		if e.complexity.JobTemplate.JobType == nil {
			break
		}

		return e.complexity.JobTemplate.JobType(childComplexity), true

	case "JobTemplate.name":
		if e.complexity.JobTemplate.Name == nil {
			break
		}

		return e.complexity.JobTemplate.Name(childComplexity), true

	case "JobTemplate.object":
		if e.complexity.JobTemplate.Object == nil {
			break
		}

		return e.complexity.JobTemplate.Object(childComplexity), true

	case "JobTemplate.organization":
		if e.complexity.JobTemplate.Organization == nil {
			break
		}

		return e.complexity.JobTemplate.Organization(childComplexity), true

	case "JobTemplate.published":
		if e.complexity.JobTemplate.Published == nil {
			break
		}

		return e.complexity.JobTemplate.Published(childComplexity), true

	case "JobTemplate.region":
		if e.complexity.JobTemplate.Region == nil {
			break
		}

		return e.complexity.JobTemplate.Region(childComplexity), true

	case "JobTemplate.startTime":
		if e.complexity.JobTemplate.StartTime == nil {
			break
		}

		return e.complexity.JobTemplate.StartTime(childComplexity), true

	case "JobTemplate.uuid":
		if e.complexity.JobTemplate.UUID == nil {
			break
		}

		return e.complexity.JobTemplate.UUID(childComplexity), true

	case "JobTemplate.updated":
		if e.complexity.JobTemplate.Updated == nil {
			break
		}

		return e.complexity.JobTemplate.Updated(childComplexity), true

	case "JobType.courses":
		if e.complexity.JobType.Courses == nil {
			break
		}

		return e.complexity.JobType.Courses(childComplexity), true

	case "JobType.created":
		if e.complexity.JobType.Created == nil {
			break
		}

		return e.complexity.JobType.Created(childComplexity), true

	case "JobType.icon":
		if e.complexity.JobType.Icon == nil {
			break
		}

		return e.complexity.JobType.Icon(childComplexity), true

	case "JobType.isDeleted":
		if e.complexity.JobType.IsDeleted == nil {
			break
		}

		return e.complexity.JobType.IsDeleted(childComplexity), true

	case "JobType.localityJobCost":
		if e.complexity.JobType.LocalityJobCost == nil {
			break
		}

		return e.complexity.JobType.LocalityJobCost(childComplexity), true

	case "JobType.name":
		if e.complexity.JobType.Name == nil {
			break
		}

		return e.complexity.JobType.Name(childComplexity), true

	case "JobType.needMedicalBook":
		if e.complexity.JobType.NeedMedicalBook == nil {
			break
		}

		return e.complexity.JobType.NeedMedicalBook(childComplexity), true

	case "JobType.organization":
		if e.complexity.JobType.Organization == nil {
			break
		}

		return e.complexity.JobType.Organization(childComplexity), true

	case "JobType.uuid":
		if e.complexity.JobType.UUID == nil {
			break
		}

		return e.complexity.JobType.UUID(childComplexity), true

	case "JobType.updated":
		if e.complexity.JobType.Updated == nil {
			break
		}

		return e.complexity.JobType.Updated(childComplexity), true

	case "LocalityJobCost.area":
		if e.complexity.LocalityJobCost.Area == nil {
			break
		}

		return e.complexity.LocalityJobCost.Area(childComplexity), true

	case "LocalityJobCost.city":
		if e.complexity.LocalityJobCost.City == nil {
			break
		}

		return e.complexity.LocalityJobCost.City(childComplexity), true

	case "LocalityJobCost.cityDistrict":
		if e.complexity.LocalityJobCost.CityDistrict == nil {
			break
		}

		return e.complexity.LocalityJobCost.CityDistrict(childComplexity), true

	case "LocalityJobCost.country":
		if e.complexity.LocalityJobCost.Country == nil {
			break
		}

		return e.complexity.LocalityJobCost.Country(childComplexity), true

	case "LocalityJobCost.created":
		if e.complexity.LocalityJobCost.Created == nil {
			break
		}

		args, err := ec.field_LocalityJobCost_created_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.LocalityJobCost.Created(childComplexity, args["start"].(string), args["stop"].(string)), true

	case "LocalityJobCost.isDeleted":
		if e.complexity.LocalityJobCost.IsDeleted == nil {
			break
		}

		return e.complexity.LocalityJobCost.IsDeleted(childComplexity), true

	case "LocalityJobCost.maxCost":
		if e.complexity.LocalityJobCost.MaxCost == nil {
			break
		}

		return e.complexity.LocalityJobCost.MaxCost(childComplexity), true

	case "LocalityJobCost.organization":
		if e.complexity.LocalityJobCost.Organization == nil {
			break
		}

		return e.complexity.LocalityJobCost.Organization(childComplexity), true

	case "LocalityJobCost.region":
		if e.complexity.LocalityJobCost.Region == nil {
			break
		}

		return e.complexity.LocalityJobCost.Region(childComplexity), true

	case "LocalityJobCost.settlement":
		if e.complexity.LocalityJobCost.Settlement == nil {
			break
		}

		return e.complexity.LocalityJobCost.Settlement(childComplexity), true

	case "LocalityJobCost.uuid":
		if e.complexity.LocalityJobCost.UUID == nil {
			break
		}

		return e.complexity.LocalityJobCost.UUID(childComplexity), true

	case "LocalityJobCost.updated":
		if e.complexity.LocalityJobCost.Updated == nil {
			break
		}

		return e.complexity.LocalityJobCost.Updated(childComplexity), true

	case "MedicalBook.checked":
		if e.complexity.MedicalBook.Checked == nil {
			break
		}

		return e.complexity.MedicalBook.Checked(childComplexity), true

	case "MedicalBook.checkedDate":
		if e.complexity.MedicalBook.CheckedDate == nil {
			break
		}

		return e.complexity.MedicalBook.CheckedDate(childComplexity), true

	case "MedicalBook.checkedPerson":
		if e.complexity.MedicalBook.CheckedPerson == nil {
			break
		}

		return e.complexity.MedicalBook.CheckedPerson(childComplexity), true

	case "MedicalBook.contents":
		if e.complexity.MedicalBook.Contents == nil {
			break
		}

		return e.complexity.MedicalBook.Contents(childComplexity), true

	case "MedicalBook.created":
		if e.complexity.MedicalBook.Created == nil {
			break
		}

		return e.complexity.MedicalBook.Created(childComplexity), true

	case "MedicalBook.descriptionHealthRestrictions":
		if e.complexity.MedicalBook.DescriptionHealthRestrictions == nil {
			break
		}

		return e.complexity.MedicalBook.DescriptionHealthRestrictions(childComplexity), true

	case "MedicalBook.haveHealthRestrictions":
		if e.complexity.MedicalBook.HaveHealthRestrictions == nil {
			break
		}

		return e.complexity.MedicalBook.HaveHealthRestrictions(childComplexity), true

	case "MedicalBook.haveMedicalBook":
		if e.complexity.MedicalBook.HaveMedicalBook == nil {
			break
		}

		return e.complexity.MedicalBook.HaveMedicalBook(childComplexity), true

	case "MedicalBook.isDeleted":
		if e.complexity.MedicalBook.IsDeleted == nil {
			break
		}

		return e.complexity.MedicalBook.IsDeleted(childComplexity), true

	case "MedicalBook.medicalExaminationDate":
		if e.complexity.MedicalBook.MedicalExaminationDate == nil {
			break
		}

		return e.complexity.MedicalBook.MedicalExaminationDate(childComplexity), true

	case "MedicalBook.number":
		if e.complexity.MedicalBook.Number == nil {
			break
		}

		return e.complexity.MedicalBook.Number(childComplexity), true

	case "MedicalBook.person":
		if e.complexity.MedicalBook.Person == nil {
			break
		}

		return e.complexity.MedicalBook.Person(childComplexity), true

	case "MedicalBook.uuid":
		if e.complexity.MedicalBook.UUID == nil {
			break
		}

		return e.complexity.MedicalBook.UUID(childComplexity), true

	case "MedicalBook.updated":
		if e.complexity.MedicalBook.Updated == nil {
			break
		}

		return e.complexity.MedicalBook.Updated(childComplexity), true

	case "Movement.amount":
		if e.complexity.Movement.Amount == nil {
			break
		}

		return e.complexity.Movement.Amount(childComplexity), true

	case "Movement.created":
		if e.complexity.Movement.Created == nil {
			break
		}

		return e.complexity.Movement.Created(childComplexity), true

	case "Movement.destination":
		if e.complexity.Movement.Destination == nil {
			break
		}

		return e.complexity.Movement.Destination(childComplexity), true

	case "Movement.direct":
		if e.complexity.Movement.Direct == nil {
			break
		}

		return e.complexity.Movement.Direct(childComplexity), true

	case "Movement.isDeleted":
		if e.complexity.Movement.IsDeleted == nil {
			break
		}

		return e.complexity.Movement.IsDeleted(childComplexity), true

	case "Movement.job":
		if e.complexity.Movement.Job == nil {
			break
		}

		return e.complexity.Movement.Job(childComplexity), true

	case "Movement.link":
		if e.complexity.Movement.Link == nil {
			break
		}

		return e.complexity.Movement.Link(childComplexity), true

	case "Movement.organization":
		if e.complexity.Movement.Organization == nil {
			break
		}

		return e.complexity.Movement.Organization(childComplexity), true

	case "Movement.person":
		if e.complexity.Movement.Person == nil {
			break
		}

		return e.complexity.Movement.Person(childComplexity), true

	case "Movement.uuid":
		if e.complexity.Movement.UUID == nil {
			break
		}

		return e.complexity.Movement.UUID(childComplexity), true

	case "Movement.updated":
		if e.complexity.Movement.Updated == nil {
			break
		}

		return e.complexity.Movement.Updated(childComplexity), true

	case "MsgStat.job":
		if e.complexity.MsgStat.Job == nil {
			break
		}

		return e.complexity.MsgStat.Job(childComplexity), true

	case "MsgStat.person":
		if e.complexity.MsgStat.Person == nil {
			break
		}

		return e.complexity.MsgStat.Person(childComplexity), true

	case "MsgStat.reading":
		if e.complexity.MsgStat.Reading == nil {
			break
		}

		return e.complexity.MsgStat.Reading(childComplexity), true

	case "Mutation.addMsg":
		if e.complexity.Mutation.AddMsg == nil {
			break
		}

		args, err := ec.field_Mutation_addMsg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddMsg(childComplexity, args["job"].(*models.Job), args["description"].(string), args["content"].([]*models.Content)), true

	case "Mutation.addToBalance":
		if e.complexity.Mutation.AddToBalance == nil {
			break
		}

		args, err := ec.field_Mutation_addToBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddToBalance(childComplexity, args["organization"].(models.Organization), args["amount"].(float64)), true

	case "Mutation.addressMutation":
		if e.complexity.Mutation.AddressMutation == nil {
			break
		}

		args, err := ec.field_Mutation_addressMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddressMutation(childComplexity, args["address"].(*models.Address)), true

	case "Mutation.agreeToJob":
		if e.complexity.Mutation.AgreeToJob == nil {
			break
		}

		args, err := ec.field_Mutation_agreeToJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AgreeToJob(childComplexity, args["job"].(*models.Job), args["user"].(*models.User)), true

	case "Mutation.agreement":
		if e.complexity.Mutation.Agreement == nil {
			break
		}

		args, err := ec.field_Mutation_agreement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Agreement(childComplexity, args["incomeRegistration"].(bool), args["taxPayment"].(bool)), true

	case "Mutation.areaMutation":
		if e.complexity.Mutation.AreaMutation == nil {
			break
		}

		args, err := ec.field_Mutation_areaMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AreaMutation(childComplexity, args["area"].(*models.Area)), true

	case "Mutation.brokenJob":
		if e.complexity.Mutation.BrokenJob == nil {
			break
		}

		args, err := ec.field_Mutation_brokenJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BrokenJob(childComplexity, args["job"].(*models.Job), args["reason"].(string)), true

	case "Mutation.cancelJob":
		if e.complexity.Mutation.CancelJob == nil {
			break
		}

		args, err := ec.field_Mutation_cancelJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelJob(childComplexity, args["job"].(*models.Job), args["reason"].(string)), true

	case "Mutation.candidateMutate":
		if e.complexity.Mutation.CandidateMutate == nil {
			break
		}

		args, err := ec.field_Mutation_candidateMutate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CandidateMutate(childComplexity, args["candidate"].(*models.Candidate)), true

	case "Mutation.changeStatusJob":
		if e.complexity.Mutation.ChangeStatusJob == nil {
			break
		}

		args, err := ec.field_Mutation_changeStatusJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeStatusJob(childComplexity, args["job"].(*models.Job), args["status"].(*models.Status)), true

	case "Mutation.check":
		if e.complexity.Mutation.Check == nil {
			break
		}

		args, err := ec.field_Mutation_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Check(childComplexity, args["job"].(*models.Job), args["lat"].(*float64), args["lon"].(*float64), args["user"].(*models.User)), true

	case "Mutation.cityDistrictMutation":
		if e.complexity.Mutation.CityDistrictMutation == nil {
			break
		}

		args, err := ec.field_Mutation_cityDistrictMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CityDistrictMutation(childComplexity, args["cityDistrict"].(*models.CityDistrict)), true

	case "Mutation.cityMutation":
		if e.complexity.Mutation.CityMutation == nil {
			break
		}

		args, err := ec.field_Mutation_cityMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CityMutation(childComplexity, args["city"].(*models.City)), true

	case "Mutation.closeJob":
		if e.complexity.Mutation.CloseJob == nil {
			break
		}

		args, err := ec.field_Mutation_closeJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CloseJob(childComplexity, args["job"].(*models.Job), args["percentagePayment"].(*int)), true

	case "Mutation.conflictOnJob":
		if e.complexity.Mutation.ConflictOnJob == nil {
			break
		}

		args, err := ec.field_Mutation_conflictOnJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConflictOnJob(childComplexity, args["job"].(*models.Job), args["reason"].(string)), true

	case "Mutation.contactMutation":
		if e.complexity.Mutation.ContactMutation == nil {
			break
		}

		args, err := ec.field_Mutation_contactMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactMutation(childComplexity, args["contact"].(*models.Contact)), true

	case "Mutation.contactTypeMutation":
		if e.complexity.Mutation.ContactTypeMutation == nil {
			break
		}

		args, err := ec.field_Mutation_contactTypeMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactTypeMutation(childComplexity, args["contactType"].(*models.ContactType)), true

	case "Mutation.countryMutation":
		if e.complexity.Mutation.CountryMutation == nil {
			break
		}

		args, err := ec.field_Mutation_countryMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CountryMutation(childComplexity, args["country"].(*models.Country)), true

	case "Mutation.courseMutate":
		if e.complexity.Mutation.CourseMutate == nil {
			break
		}

		args, err := ec.field_Mutation_courseMutate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CourseMutate(childComplexity, args["course"].(*models.Course)), true

	case "Mutation.dropOrganization":
		if e.complexity.Mutation.DropOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_dropOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DropOrganization(childComplexity, args["organization"].(*models.Organization)), true

	case "Mutation.endJob":
		if e.complexity.Mutation.EndJob == nil {
			break
		}

		args, err := ec.field_Mutation_endJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EndJob(childComplexity, args["code"].(*string), args["rating"].(*float64), args["ratingDescription"].(*string)), true

	case "Mutation.excludePerson":
		if e.complexity.Mutation.ExcludePerson == nil {
			break
		}

		args, err := ec.field_Mutation_excludePerson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ExcludePerson(childComplexity, args["organization"].(uuid.UUID), args["person"].(uuid.UUID)), true

	case "Mutation.excludePersonInObject":
		if e.complexity.Mutation.ExcludePersonInObject == nil {
			break
		}

		args, err := ec.field_Mutation_excludePersonInObject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ExcludePersonInObject(childComplexity, args["organization"].(uuid.UUID), args["person"].(uuid.UUID)), true

	case "Mutation.JobFlowMutation":
		if e.complexity.Mutation.JobFlowMutation == nil {
			break
		}

		args, err := ec.field_Mutation_JobFlowMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobFlowMutation(childComplexity, args["jobFlow"].(*models.JobFlow)), true

	case "Mutation.jobMutate":
		if e.complexity.Mutation.JobMutate == nil {
			break
		}

		args, err := ec.field_Mutation_jobMutate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobMutate(childComplexity, args["job"].(*models.Job)), true

	case "Mutation.jobTemplateMutate":
		if e.complexity.Mutation.JobTemplateMutate == nil {
			break
		}

		args, err := ec.field_Mutation_jobTemplateMutate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobTemplateMutate(childComplexity, args["jobTemplate"].(*models.JobTemplate)), true

	case "Mutation.jobTypeMutate":
		if e.complexity.Mutation.JobTypeMutate == nil {
			break
		}

		args, err := ec.field_Mutation_jobTypeMutate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobTypeMutate(childComplexity, args["jobType"].(*models.JobType)), true

	case "Mutation.localityJobCostMutate":
		if e.complexity.Mutation.LocalityJobCostMutate == nil {
			break
		}

		args, err := ec.field_Mutation_localityJobCostMutate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LocalityJobCostMutate(childComplexity, args["localityJobCost"].(*models.LocalityJobCost)), true

	case "Mutation.massCreationJobs":
		if e.complexity.Mutation.MassCreationJobs == nil {
			break
		}

		args, err := ec.field_Mutation_massCreationJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MassCreationJobs(childComplexity, args["jobTemplate"].(models.JobTemplate), args["objects"].([]models.Organization), args["Dates"].([]*time.Time)), true

	case "Mutation.medicalBookMutation":
		if e.complexity.Mutation.MedicalBookMutation == nil {
			break
		}

		args, err := ec.field_Mutation_medicalBookMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MedicalBookMutation(childComplexity, args["medicalBook"].(*models.MedicalBook)), true

	case "Mutation.movementMutation":
		if e.complexity.Mutation.MovementMutation == nil {
			break
		}

		args, err := ec.field_Mutation_movementMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MovementMutation(childComplexity, args["movement"].(*models.Movement)), true

	case "Mutation.multipleUpload":
		if e.complexity.Mutation.MultipleUpload == nil {
			break
		}

		args, err := ec.field_Mutation_multipleUpload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MultipleUpload(childComplexity, args["files"].([]graphql.Upload), args["bucket"].(string)), true

	case "Mutation.nationalityMutation":
		if e.complexity.Mutation.NationalityMutation == nil {
			break
		}

		args, err := ec.field_Mutation_nationalityMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NationalityMutation(childComplexity, args["nationality"].(*models.Nationality)), true

	case "Mutation.onPlace":
		if e.complexity.Mutation.OnPlace == nil {
			break
		}

		args, err := ec.field_Mutation_onPlace_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OnPlace(childComplexity, args["job"].(*models.Job), args["lat"].(*float64), args["lon"].(*float64)), true

	case "Mutation.organizationContactMutation":
		if e.complexity.Mutation.OrganizationContactMutation == nil {
			break
		}

		args, err := ec.field_Mutation_organizationContactMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationContactMutation(childComplexity, args["organizationContact"].(*models.OrganizationContact)), true

	case "Mutation.organizationMutation":
		if e.complexity.Mutation.OrganizationMutation == nil {
			break
		}

		args, err := ec.field_Mutation_organizationMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationMutation(childComplexity, args["organization"].(*models.Organization)), true

	case "Mutation.organizationPositionMutation":
		if e.complexity.Mutation.OrganizationPositionMutation == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPositionMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPositionMutation(childComplexity, args["organizationPosition"].(*models.OrganizationPosition)), true

	case "Mutation.parseAddress":
		if e.complexity.Mutation.ParseAddress == nil {
			break
		}

		args, err := ec.field_Mutation_parseAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ParseAddress(childComplexity, args["rawAddress"].(*string)), true

	case "Mutation.passportMutation":
		if e.complexity.Mutation.PassportMutation == nil {
			break
		}

		args, err := ec.field_Mutation_passportMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PassportMutation(childComplexity, args["passport"].(*models.Passport)), true

	case "Mutation.personCourseMutation":
		if e.complexity.Mutation.PersonCourseMutation == nil {
			break
		}

		args, err := ec.field_Mutation_personCourseMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PersonCourseMutation(childComplexity, args["course"].(*models.PersonCourse)), true

	case "Mutation.personMutation":
		if e.complexity.Mutation.PersonMutation == nil {
			break
		}

		args, err := ec.field_Mutation_personMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PersonMutation(childComplexity, args["person"].(*models.Person)), true

	case "Mutation.personRatingMutation":
		if e.complexity.Mutation.PersonRatingMutation == nil {
			break
		}

		args, err := ec.field_Mutation_personRatingMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PersonRatingMutation(childComplexity, args["personRating"].(*models.PersonRating)), true

	case "Mutation.ping":
		if e.complexity.Mutation.Ping == nil {
			break
		}

		return e.complexity.Mutation.Ping(childComplexity), true

	case "Mutation.publishJob":
		if e.complexity.Mutation.PublishJob == nil {
			break
		}

		args, err := ec.field_Mutation_publishJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PublishJob(childComplexity, args["job"].(*models.Job)), true

	case "Mutation.readMsg":
		if e.complexity.Mutation.ReadMsg == nil {
			break
		}

		args, err := ec.field_Mutation_readMsg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReadMsg(childComplexity, args["job"].(models.Job)), true

	case "Mutation.refuseJob":
		if e.complexity.Mutation.RefuseJob == nil {
			break
		}

		args, err := ec.field_Mutation_refuseJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefuseJob(childComplexity, args["job"].(*models.Job), args["reason"].(string)), true

	case "Mutation.regionMutation":
		if e.complexity.Mutation.RegionMutation == nil {
			break
		}

		args, err := ec.field_Mutation_regionMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegionMutation(childComplexity, args["region"].(*models.Region)), true

	case "Mutation.rejectPerson":
		if e.complexity.Mutation.RejectPerson == nil {
			break
		}

		args, err := ec.field_Mutation_rejectPerson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectPerson(childComplexity, args["job"].(*models.Job), args["person"].(*models.Person), args["reason"].(string)), true

	case "Mutation.removeContact":
		if e.complexity.Mutation.RemoveContact == nil {
			break
		}

		args, err := ec.field_Mutation_removeContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveContact(childComplexity, args["person"].(*models.Person), args["contact"].(*models.Contact)), true

	case "Mutation.removeParent":
		if e.complexity.Mutation.RemoveParent == nil {
			break
		}

		args, err := ec.field_Mutation_removeParent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveParent(childComplexity, args["organization"].(*models.Organization)), true

	case "Mutation.reqToPartner":
		if e.complexity.Mutation.ReqToPartner == nil {
			break
		}

		return e.complexity.Mutation.ReqToPartner(childComplexity), true

	case "Mutation.resetUser":
		if e.complexity.Mutation.ResetUser == nil {
			break
		}

		args, err := ec.field_Mutation_resetUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetUser(childComplexity, args["phone"].(*string)), true

	case "Mutation.roleMutation":
		if e.complexity.Mutation.RoleMutation == nil {
			break
		}

		args, err := ec.field_Mutation_roleMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RoleMutation(childComplexity, args["role"].(*models.Role)), true

	case "Mutation.runJob":
		if e.complexity.Mutation.RunJob == nil {
			break
		}

		args, err := ec.field_Mutation_runJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RunJob(childComplexity, args["code"].(*string)), true

	case "Mutation.setJobRating":
		if e.complexity.Mutation.SetJobRating == nil {
			break
		}

		args, err := ec.field_Mutation_setJobRating_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetJobRating(childComplexity, args["job"].(uuid.UUID), args["rating"].(float64), args["description"].(*string)), true

	case "Mutation.settlementMutation":
		if e.complexity.Mutation.SettlementMutation == nil {
			break
		}

		args, err := ec.field_Mutation_settlementMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SettlementMutation(childComplexity, args["settlement"].(*models.Settlement)), true

	case "Mutation.singleUpload":
		if e.complexity.Mutation.SingleUpload == nil {
			break
		}

		args, err := ec.field_Mutation_singleUpload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SingleUpload(childComplexity, args["file"].(graphql.Upload), args["bucket"].(string)), true

	case "Mutation.statusMutate":
		if e.complexity.Mutation.StatusMutate == nil {
			break
		}

		args, err := ec.field_Mutation_statusMutate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StatusMutate(childComplexity, args["status"].(*models.Status)), true

	case "Mutation.streetMutation":
		if e.complexity.Mutation.StreetMutation == nil {
			break
		}

		args, err := ec.field_Mutation_streetMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StreetMutation(childComplexity, args["street"].(*models.Street)), true

	case "Mutation.tagMutate":
		if e.complexity.Mutation.TagMutate == nil {
			break
		}

		args, err := ec.field_Mutation_tagMutate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagMutate(childComplexity, args["tag"].(*models.Tag)), true

	case "Mutation.updateToken":
		if e.complexity.Mutation.UpdateToken == nil {
			break
		}

		args, err := ec.field_Mutation_updateToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateToken(childComplexity, args["token"].(string)), true

	case "Mutation.userMutation":
		if e.complexity.Mutation.UserMutation == nil {
			break
		}

		args, err := ec.field_Mutation_userMutation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserMutation(childComplexity, args["user"].(*models.User)), true

	case "Mutation.validate":
		if e.complexity.Mutation.Validate == nil {
			break
		}

		args, err := ec.field_Mutation_validate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Validate(childComplexity, args["pincode"].(string)), true

	case "Nationality.created":
		if e.complexity.Nationality.Created == nil {
			break
		}

		return e.complexity.Nationality.Created(childComplexity), true

	case "Nationality.isDeleted":
		if e.complexity.Nationality.IsDeleted == nil {
			break
		}

		return e.complexity.Nationality.IsDeleted(childComplexity), true

	case "Nationality.name":
		if e.complexity.Nationality.Name == nil {
			break
		}

		return e.complexity.Nationality.Name(childComplexity), true

	case "Nationality.uuid":
		if e.complexity.Nationality.UUID == nil {
			break
		}

		return e.complexity.Nationality.UUID(childComplexity), true

	case "Nationality.updated":
		if e.complexity.Nationality.Updated == nil {
			break
		}

		return e.complexity.Nationality.Updated(childComplexity), true

	case "Organization.addressFact":
		if e.complexity.Organization.AddressFact == nil {
			break
		}

		return e.complexity.Organization.AddressFact(childComplexity), true

	case "Organization.addressLegal":
		if e.complexity.Organization.AddressLegal == nil {
			break
		}

		return e.complexity.Organization.AddressLegal(childComplexity), true

	case "Organization.created":
		if e.complexity.Organization.Created == nil {
			break
		}

		return e.complexity.Organization.Created(childComplexity), true

	case "Organization.departments":
		if e.complexity.Organization.Departments == nil {
			break
		}

		return e.complexity.Organization.Departments(childComplexity), true

	case "Organization.fee":
		if e.complexity.Organization.Fee == nil {
			break
		}

		return e.complexity.Organization.Fee(childComplexity), true

	case "Organization.firstReserveReward":
		if e.complexity.Organization.FirstReserveReward == nil {
			break
		}

		return e.complexity.Organization.FirstReserveReward(childComplexity), true

	case "Organization.fullName":
		if e.complexity.Organization.FullName == nil {
			break
		}

		return e.complexity.Organization.FullName(childComplexity), true

	case "Organization.inn":
		if e.complexity.Organization.INN == nil {
			break
		}

		return e.complexity.Organization.INN(childComplexity), true

	case "Organization.isDeleted":
		if e.complexity.Organization.IsDeleted == nil {
			break
		}

		return e.complexity.Organization.IsDeleted(childComplexity), true

	case "Organization.isGroup":
		if e.complexity.Organization.IsGroup == nil {
			break
		}

		return e.complexity.Organization.IsGroup(childComplexity), true

	case "Organization.kpp":
		if e.complexity.Organization.KPP == nil {
			break
		}

		return e.complexity.Organization.KPP(childComplexity), true

	case "Organization.logo":
		if e.complexity.Organization.Logo == nil {
			break
		}

		return e.complexity.Organization.Logo(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.parent":
		if e.complexity.Organization.Parent == nil {
			break
		}

		return e.complexity.Organization.Parent(childComplexity), true

	case "Organization.parentOrganization":
		if e.complexity.Organization.ParentOrganization == nil {
			break
		}

		return e.complexity.Organization.ParentOrganization(childComplexity), true

	case "Organization.persons":
		if e.complexity.Organization.Persons == nil {
			break
		}

		return e.complexity.Organization.Persons(childComplexity), true

	case "Organization.prefix":
		if e.complexity.Organization.Prefix == nil {
			break
		}

		return e.complexity.Organization.Prefix(childComplexity), true

	case "Organization.secondReserveReward":
		if e.complexity.Organization.SecondReserveReward == nil {
			break
		}

		return e.complexity.Organization.SecondReserveReward(childComplexity), true

	case "Organization.shortName":
		if e.complexity.Organization.ShortName == nil {
			break
		}

		return e.complexity.Organization.ShortName(childComplexity), true

	case "Organization.stDistance":
		if e.complexity.Organization.StDistance == nil {
			break
		}

		return e.complexity.Organization.StDistance(childComplexity), true

	case "Organization.stTime":
		if e.complexity.Organization.StTime == nil {
			break
		}

		return e.complexity.Organization.StTime(childComplexity), true

	case "Organization.uuid":
		if e.complexity.Organization.UUID == nil {
			break
		}

		return e.complexity.Organization.UUID(childComplexity), true

	case "Organization.updated":
		if e.complexity.Organization.Updated == nil {
			break
		}

		return e.complexity.Organization.Updated(childComplexity), true

	case "OrganizationContact.created":
		if e.complexity.OrganizationContact.Created == nil {
			break
		}

		return e.complexity.OrganizationContact.Created(childComplexity), true

	case "OrganizationContact.isDeleted":
		if e.complexity.OrganizationContact.IsDeleted == nil {
			break
		}

		return e.complexity.OrganizationContact.IsDeleted(childComplexity), true

	case "OrganizationContact.person":
		if e.complexity.OrganizationContact.Person == nil {
			break
		}

		return e.complexity.OrganizationContact.Person(childComplexity), true

	case "OrganizationContact.position":
		if e.complexity.OrganizationContact.Position == nil {
			break
		}

		return e.complexity.OrganizationContact.Position(childComplexity), true

	case "OrganizationContact.uuid":
		if e.complexity.OrganizationContact.UUID == nil {
			break
		}

		return e.complexity.OrganizationContact.UUID(childComplexity), true

	case "OrganizationContact.updated":
		if e.complexity.OrganizationContact.Updated == nil {
			break
		}

		return e.complexity.OrganizationContact.Updated(childComplexity), true

	case "OrganizationPosition.created":
		if e.complexity.OrganizationPosition.Created == nil {
			break
		}

		return e.complexity.OrganizationPosition.Created(childComplexity), true

	case "OrganizationPosition.isDeleted":
		if e.complexity.OrganizationPosition.IsDeleted == nil {
			break
		}

		return e.complexity.OrganizationPosition.IsDeleted(childComplexity), true

	case "OrganizationPosition.name":
		if e.complexity.OrganizationPosition.Name == nil {
			break
		}

		return e.complexity.OrganizationPosition.Name(childComplexity), true

	case "OrganizationPosition.uuid":
		if e.complexity.OrganizationPosition.UUID == nil {
			break
		}

		return e.complexity.OrganizationPosition.UUID(childComplexity), true

	case "OrganizationPosition.updated":
		if e.complexity.OrganizationPosition.Updated == nil {
			break
		}

		return e.complexity.OrganizationPosition.Updated(childComplexity), true

	case "Passport.addressRegistration":
		if e.complexity.Passport.AddressRegistration == nil {
			break
		}

		return e.complexity.Passport.AddressRegistration(childComplexity), true

	case "Passport.created":
		if e.complexity.Passport.Created == nil {
			break
		}

		return e.complexity.Passport.Created(childComplexity), true

	case "Passport.dateIssue":
		if e.complexity.Passport.DateIssue == nil {
			break
		}

		return e.complexity.Passport.DateIssue(childComplexity), true

	case "Passport.department":
		if e.complexity.Passport.Department == nil {
			break
		}

		return e.complexity.Passport.Department(childComplexity), true

	case "Passport.departmentCode":
		if e.complexity.Passport.DepartmentCode == nil {
			break
		}

		return e.complexity.Passport.DepartmentCode(childComplexity), true

	case "Passport.isDeleted":
		if e.complexity.Passport.IsDeleted == nil {
			break
		}

		return e.complexity.Passport.IsDeleted(childComplexity), true

	case "Passport.number":
		if e.complexity.Passport.Number == nil {
			break
		}

		return e.complexity.Passport.Number(childComplexity), true

	case "Passport.person":
		if e.complexity.Passport.Person == nil {
			break
		}

		return e.complexity.Passport.Person(childComplexity), true

	case "Passport.photoRegistration":
		if e.complexity.Passport.PhotoRegistration == nil {
			break
		}

		return e.complexity.Passport.PhotoRegistration(childComplexity), true

	case "Passport.scan":
		if e.complexity.Passport.Scan == nil {
			break
		}

		return e.complexity.Passport.Scan(childComplexity), true

	case "Passport.serial":
		if e.complexity.Passport.Serial == nil {
			break
		}

		return e.complexity.Passport.Serial(childComplexity), true

	case "Passport.uuid":
		if e.complexity.Passport.UUID == nil {
			break
		}

		return e.complexity.Passport.UUID(childComplexity), true

	case "Passport.updated":
		if e.complexity.Passport.Updated == nil {
			break
		}

		return e.complexity.Passport.Updated(childComplexity), true

	case "Permission.created":
		if e.complexity.Permission.Created == nil {
			break
		}

		return e.complexity.Permission.Created(childComplexity), true

	case "Permission.delete":
		if e.complexity.Permission.Delete == nil {
			break
		}

		return e.complexity.Permission.Delete(childComplexity), true

	case "Permission.insert":
		if e.complexity.Permission.Insert == nil {
			break
		}

		return e.complexity.Permission.Insert(childComplexity), true

	case "Permission.isDeleted":
		if e.complexity.Permission.IsDeleted == nil {
			break
		}

		return e.complexity.Permission.IsDeleted(childComplexity), true

	case "Permission.object":
		if e.complexity.Permission.Object == nil {
			break
		}

		return e.complexity.Permission.Object(childComplexity), true

	case "Permission.read":
		if e.complexity.Permission.Read == nil {
			break
		}

		return e.complexity.Permission.Read(childComplexity), true

	case "Permission.uuid":
		if e.complexity.Permission.UUID == nil {
			break
		}

		return e.complexity.Permission.UUID(childComplexity), true

	case "Permission.update":
		if e.complexity.Permission.Update == nil {
			break
		}

		return e.complexity.Permission.Update(childComplexity), true

	case "Permission.updated":
		if e.complexity.Permission.Updated == nil {
			break
		}

		return e.complexity.Permission.Updated(childComplexity), true

	case "Person.actualContact":
		if e.complexity.Person.ActualContact == nil {
			break
		}

		return e.complexity.Person.ActualContact(childComplexity), true

	case "Person.birthDate":
		if e.complexity.Person.BirthDate == nil {
			break
		}

		return e.complexity.Person.BirthDate(childComplexity), true

	case "Person.contacts":
		if e.complexity.Person.Contacts == nil {
			break
		}

		return e.complexity.Person.Contacts(childComplexity), true

	case "Person.country":
		if e.complexity.Person.Country == nil {
			break
		}

		return e.complexity.Person.Country(childComplexity), true

	case "Person.created":
		if e.complexity.Person.Created == nil {
			break
		}

		return e.complexity.Person.Created(childComplexity), true

	case "Person.distanceResult":
		if e.complexity.Person.DistanceResult == nil {
			break
		}

		return e.complexity.Person.DistanceResult(childComplexity), true

	case "Person.gender":
		if e.complexity.Person.Gender == nil {
			break
		}

		return e.complexity.Person.Gender(childComplexity), true

	case "Person.inn":
		if e.complexity.Person.INN == nil {
			break
		}

		return e.complexity.Person.INN(childComplexity), true

	case "Person.incomeRegistration":
		if e.complexity.Person.IncomeRegistration == nil {
			break
		}

		return e.complexity.Person.IncomeRegistration(childComplexity), true

	case "Person.isContact":
		if e.complexity.Person.IsContact == nil {
			break
		}

		return e.complexity.Person.IsContact(childComplexity), true

	case "Person.isDeleted":
		if e.complexity.Person.IsDeleted == nil {
			break
		}

		return e.complexity.Person.IsDeleted(childComplexity), true

	case "Person.medicalBook":
		if e.complexity.Person.MedicalBook == nil {
			break
		}

		return e.complexity.Person.MedicalBook(childComplexity), true

	case "Person.name":
		if e.complexity.Person.Name == nil {
			break
		}

		return e.complexity.Person.Name(childComplexity), true

	case "Person.passport":
		if e.complexity.Person.Passport == nil {
			break
		}

		return e.complexity.Person.Passport(childComplexity), true

	case "Person.patronymic":
		if e.complexity.Person.Patronymic == nil {
			break
		}

		return e.complexity.Person.Patronymic(childComplexity), true

	case "Person.photo":
		if e.complexity.Person.Photo == nil {
			break
		}

		return e.complexity.Person.Photo(childComplexity), true

	case "Person.position":
		if e.complexity.Person.Position == nil {
			break
		}

		return e.complexity.Person.Position(childComplexity), true

	case "Person.rating":
		if e.complexity.Person.Rating == nil {
			break
		}

		return e.complexity.Person.Rating(childComplexity), true

	case "Person.recognizeResult":
		if e.complexity.Person.RecognizeResult == nil {
			break
		}

		return e.complexity.Person.RecognizeResult(childComplexity), true

	case "Person.recognizedFields":
		if e.complexity.Person.RecognizedFields == nil {
			break
		}

		return e.complexity.Person.RecognizedFields(childComplexity), true

	case "Person.surname":
		if e.complexity.Person.Surname == nil {
			break
		}

		return e.complexity.Person.Surname(childComplexity), true

	case "Person.taxPayment":
		if e.complexity.Person.TaxPayment == nil {
			break
		}

		return e.complexity.Person.TaxPayment(childComplexity), true

	case "Person.uuid":
		if e.complexity.Person.UUID == nil {
			break
		}

		return e.complexity.Person.UUID(childComplexity), true

	case "Person.updated":
		if e.complexity.Person.Updated == nil {
			break
		}

		return e.complexity.Person.Updated(childComplexity), true

	case "Person.user":
		if e.complexity.Person.User == nil {
			break
		}

		return e.complexity.Person.User(childComplexity), true

	case "Person.validated":
		if e.complexity.Person.Validated == nil {
			break
		}

		return e.complexity.Person.Validated(childComplexity), true

	case "PersonCourse.answers":
		if e.complexity.PersonCourse.Answers == nil {
			break
		}

		return e.complexity.PersonCourse.Answers(childComplexity), true

	case "PersonCourse.course":
		if e.complexity.PersonCourse.Course == nil {
			break
		}

		return e.complexity.PersonCourse.Course(childComplexity), true

	case "PersonCourse.created":
		if e.complexity.PersonCourse.Created == nil {
			break
		}

		return e.complexity.PersonCourse.Created(childComplexity), true

	case "PersonCourse.isDeleted":
		if e.complexity.PersonCourse.IsDeleted == nil {
			break
		}

		return e.complexity.PersonCourse.IsDeleted(childComplexity), true

	case "PersonCourse.person":
		if e.complexity.PersonCourse.Person == nil {
			break
		}

		return e.complexity.PersonCourse.Person(childComplexity), true

	case "PersonCourse.questions":
		if e.complexity.PersonCourse.Questions == nil {
			break
		}

		return e.complexity.PersonCourse.Questions(childComplexity), true

	case "PersonCourse.uuid":
		if e.complexity.PersonCourse.UUID == nil {
			break
		}

		return e.complexity.PersonCourse.UUID(childComplexity), true

	case "PersonCourse.updated":
		if e.complexity.PersonCourse.Updated == nil {
			break
		}

		return e.complexity.PersonCourse.Updated(childComplexity), true

	case "PersonRating.created":
		if e.complexity.PersonRating.Created == nil {
			break
		}

		return e.complexity.PersonRating.Created(childComplexity), true

	case "PersonRating.description":
		if e.complexity.PersonRating.Description == nil {
			break
		}

		return e.complexity.PersonRating.Description(childComplexity), true

	case "PersonRating.isDeleted":
		if e.complexity.PersonRating.IsDeleted == nil {
			break
		}

		return e.complexity.PersonRating.IsDeleted(childComplexity), true

	case "PersonRating.job":
		if e.complexity.PersonRating.Job == nil {
			break
		}

		return e.complexity.PersonRating.Job(childComplexity), true

	case "PersonRating.person":
		if e.complexity.PersonRating.Person == nil {
			break
		}

		return e.complexity.PersonRating.Person(childComplexity), true

	case "PersonRating.rating":
		if e.complexity.PersonRating.Rating == nil {
			break
		}

		return e.complexity.PersonRating.Rating(childComplexity), true

	case "PersonRating.uuid":
		if e.complexity.PersonRating.UUID == nil {
			break
		}

		return e.complexity.PersonRating.UUID(childComplexity), true

	case "PersonRating.updated":
		if e.complexity.PersonRating.Updated == nil {
			break
		}

		return e.complexity.PersonRating.Updated(childComplexity), true

	case "PersonValidateStatus.avatar":
		if e.complexity.PersonValidateStatus.Avatar == nil {
			break
		}

		return e.complexity.PersonValidateStatus.Avatar(childComplexity), true

	case "PersonValidateStatus.passport":
		if e.complexity.PersonValidateStatus.Passport == nil {
			break
		}

		return e.complexity.PersonValidateStatus.Passport(childComplexity), true

	case "Query.activeJobs":
		if e.complexity.Query.ActiveJobs == nil {
			break
		}

		args, err := ec.field_Query_activeJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActiveJobs(childComplexity, args["job"].(*models.Job), args["filter"].(*models.JobFilter), args["sort"].([]models.JobSort), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.address":
		if e.complexity.Query.Address == nil {
			break
		}

		args, err := ec.field_Query_address_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Address(childComplexity, args["address"].(*models.Address)), true

	case "Query.addresses":
		if e.complexity.Query.Addresses == nil {
			break
		}

		args, err := ec.field_Query_addresses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Addresses(childComplexity, args["address"].(*models.Address), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.area":
		if e.complexity.Query.Area == nil {
			break
		}

		args, err := ec.field_Query_area_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Area(childComplexity, args["area"].(*models.Area)), true

	case "Query.areas":
		if e.complexity.Query.Areas == nil {
			break
		}

		args, err := ec.field_Query_areas_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Areas(childComplexity, args["area"].(*models.Area), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.authUserByPhone":
		if e.complexity.Query.AuthUserByPhone == nil {
			break
		}

		args, err := ec.field_Query_authUserByPhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthUserByPhone(childComplexity, args["phone"].(string), args["client"].(*models.ClientType)), true

	case "Query.candidate":
		if e.complexity.Query.Candidate == nil {
			break
		}

		args, err := ec.field_Query_candidate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Candidate(childComplexity, args["candidate"].(*models.Candidate)), true

	case "Query.candidates":
		if e.complexity.Query.Candidates == nil {
			break
		}

		args, err := ec.field_Query_candidates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Candidates(childComplexity, args["candidate"].(*models.Candidate), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.cities":
		if e.complexity.Query.Cities == nil {
			break
		}

		args, err := ec.field_Query_cities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cities(childComplexity, args["city"].(*models.City), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.city":
		if e.complexity.Query.City == nil {
			break
		}

		args, err := ec.field_Query_city_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.City(childComplexity, args["city"].(*models.City)), true

	case "Query.cityDistrict":
		if e.complexity.Query.CityDistrict == nil {
			break
		}

		args, err := ec.field_Query_cityDistrict_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CityDistrict(childComplexity, args["cityDistrict"].(*models.CityDistrict)), true

	case "Query.cityDistricts":
		if e.complexity.Query.CityDistricts == nil {
			break
		}

		args, err := ec.field_Query_cityDistricts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CityDistricts(childComplexity, args["cityDistrict"].(*models.CityDistrict), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.contact":
		if e.complexity.Query.Contact == nil {
			break
		}

		args, err := ec.field_Query_contact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contact(childComplexity, args["contact"].(models.Contact)), true

	case "Query.contactType":
		if e.complexity.Query.ContactType == nil {
			break
		}

		args, err := ec.field_Query_contactType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactType(childComplexity, args["contactType"].(*models.ContactType)), true

	case "Query.contactTypes":
		if e.complexity.Query.ContactTypes == nil {
			break
		}

		args, err := ec.field_Query_contactTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactTypes(childComplexity, args["contactType"].(*models.ContactType), args["filter"].(*models.ContactTypeFilter), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.contacts":
		if e.complexity.Query.Contacts == nil {
			break
		}

		args, err := ec.field_Query_contacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contacts(childComplexity, args["contact"].(*models.Contact), args["filter"].(*models.ContactFilter), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.countries":
		if e.complexity.Query.Countries == nil {
			break
		}

		args, err := ec.field_Query_countries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Countries(childComplexity, args["country"].(*models.Country), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.country":
		if e.complexity.Query.Country == nil {
			break
		}

		args, err := ec.field_Query_country_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Country(childComplexity, args["country"].(*models.Country)), true

	case "Query.course":
		if e.complexity.Query.Course == nil {
			break
		}

		args, err := ec.field_Query_course_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Course(childComplexity, args["course"].(*models.Course)), true

	case "Query.courses":
		if e.complexity.Query.Courses == nil {
			break
		}

		args, err := ec.field_Query_courses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Courses(childComplexity, args["course"].(*models.Course), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.endJobRequest":
		if e.complexity.Query.EndJobRequest == nil {
			break
		}

		args, err := ec.field_Query_endJobRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EndJobRequest(childComplexity, args["job"].(*models.Job), args["lat"].(*float64), args["lon"].(*float64)), true

	case "Query.flowBalance":
		if e.complexity.Query.FlowBalance == nil {
			break
		}

		args, err := ec.field_Query_flowBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FlowBalance(childComplexity, args["organization"].(*models.Organization), args["from"].(*time.Time), args["to"].(*time.Time)), true

	case "Query.getBalance":
		if e.complexity.Query.GetBalance == nil {
			break
		}

		args, err := ec.field_Query_getBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBalance(childComplexity, args["organization"].(models.Organization), args["until"].(*time.Time)), true

	case "Query.getCurrentUser":
		if e.complexity.Query.GetCurrentUser == nil {
			break
		}

		return e.complexity.Query.GetCurrentUser(childComplexity), true

	case "Query.getMsgStats":
		if e.complexity.Query.GetMsgStats == nil {
			break
		}

		return e.complexity.Query.GetMsgStats(childComplexity), true

	case "Query.getMyRating":
		if e.complexity.Query.GetMyRating == nil {
			break
		}

		return e.complexity.Query.GetMyRating(childComplexity), true

	case "Query.getOrganizationRating":
		if e.complexity.Query.GetOrganizationRating == nil {
			break
		}

		args, err := ec.field_Query_getOrganizationRating_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOrganizationRating(childComplexity, args["organization"].(*models.Organization)), true

	case "Query.getPersonRating":
		if e.complexity.Query.GetPersonRating == nil {
			break
		}

		args, err := ec.field_Query_getPersonRating_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPersonRating(childComplexity, args["person"].(models.Person)), true

	case "Query.getSelfEmployerStatus":
		if e.complexity.Query.GetSelfEmployerStatus == nil {
			break
		}

		return e.complexity.Query.GetSelfEmployerStatus(childComplexity), true

	case "Query.getTypeJobIcons":
		if e.complexity.Query.GetTypeJobIcons == nil {
			break
		}

		return e.complexity.Query.GetTypeJobIcons(childComplexity), true

	case "Query.job":
		if e.complexity.Query.Job == nil {
			break
		}

		args, err := ec.field_Query_job_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Job(childComplexity, args["job"].(*models.Job)), true

	case "Query.JobFlow":
		if e.complexity.Query.JobFlow == nil {
			break
		}

		args, err := ec.field_Query_JobFlow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobFlow(childComplexity, args["jobFlow"].(*models.JobFlow)), true

	case "Query.jobTemplate":
		if e.complexity.Query.JobTemplate == nil {
			break
		}

		args, err := ec.field_Query_jobTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobTemplate(childComplexity, args["jobTemplate"].(*models.JobTemplate)), true

	case "Query.jobTemplates":
		if e.complexity.Query.JobTemplates == nil {
			break
		}

		args, err := ec.field_Query_jobTemplates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobTemplates(childComplexity, args["jobTemplate"].(*models.JobTemplate), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.jobType":
		if e.complexity.Query.JobType == nil {
			break
		}

		args, err := ec.field_Query_jobType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobType(childComplexity, args["jobType"].(*models.JobType)), true

	case "Query.jobTypes":
		if e.complexity.Query.JobTypes == nil {
			break
		}

		args, err := ec.field_Query_jobTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobTypes(childComplexity, args["jobType"].(*models.JobType), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.jobs":
		if e.complexity.Query.Jobs == nil {
			break
		}

		args, err := ec.field_Query_jobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Jobs(childComplexity, args["job"].(*models.Job), args["filter"].(*models.JobFilter), args["sort"].([]models.JobSort), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.localityJobCost":
		if e.complexity.Query.LocalityJobCost == nil {
			break
		}

		args, err := ec.field_Query_localityJobCost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LocalityJobCost(childComplexity, args["localityJobCost"].(*models.LocalityJobCost)), true

	case "Query.localityJobCosts":
		if e.complexity.Query.LocalityJobCosts == nil {
			break
		}

		args, err := ec.field_Query_localityJobCosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LocalityJobCosts(childComplexity, args["localityJobCost"].(*models.LocalityJobCost), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.medicalBook":
		if e.complexity.Query.MedicalBook == nil {
			break
		}

		args, err := ec.field_Query_medicalBook_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MedicalBook(childComplexity, args["medicalBook"].(models.MedicalBook)), true

	case "Query.medicalBooks":
		if e.complexity.Query.MedicalBooks == nil {
			break
		}

		args, err := ec.field_Query_medicalBooks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MedicalBooks(childComplexity, args["medicalBook"].(*models.MedicalBook), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.movement":
		if e.complexity.Query.Movement == nil {
			break
		}

		args, err := ec.field_Query_movement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Movement(childComplexity, args["movement"].(*models.Movement)), true

	case "Query.movements":
		if e.complexity.Query.Movements == nil {
			break
		}

		args, err := ec.field_Query_movements_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Movements(childComplexity, args["movement"].(*models.Movement), args["filter"].(*models.MovementFilter), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.nationalities":
		if e.complexity.Query.Nationalities == nil {
			break
		}

		args, err := ec.field_Query_nationalities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nationalities(childComplexity, args["nationality"].(*models.Nationality), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.nationality":
		if e.complexity.Query.Nationality == nil {
			break
		}

		args, err := ec.field_Query_nationality_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nationality(childComplexity, args["nationality"].(*models.Nationality)), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		args, err := ec.field_Query_organization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organization(childComplexity, args["organization"].(*models.Organization)), true

	case "Query.organizationContact":
		if e.complexity.Query.OrganizationContact == nil {
			break
		}

		args, err := ec.field_Query_organizationContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationContact(childComplexity, args["organizationContact"].(*models.OrganizationContact)), true

	case "Query.organizationContacts":
		if e.complexity.Query.OrganizationContacts == nil {
			break
		}

		args, err := ec.field_Query_organizationContacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationContacts(childComplexity, args["organizationContact"].(*models.OrganizationContact), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.organizationPosition":
		if e.complexity.Query.OrganizationPosition == nil {
			break
		}

		args, err := ec.field_Query_organizationPosition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationPosition(childComplexity, args["organizationPosition"].(*models.OrganizationPosition)), true

	case "Query.organizationPositions":
		if e.complexity.Query.OrganizationPositions == nil {
			break
		}

		args, err := ec.field_Query_organizationPositions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationPositions(childComplexity, args["organizationPosition"].(*models.OrganizationPosition), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		args, err := ec.field_Query_organizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organizations(childComplexity, args["organization"].(*models.Organization), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.parsePerson":
		if e.complexity.Query.ParsePerson == nil {
			break
		}

		args, err := ec.field_Query_parsePerson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ParsePerson(childComplexity, args["photo"].(*graphql.Upload), args["passport"].(*graphql.Upload)), true

	case "Query.passport":
		if e.complexity.Query.Passport == nil {
			break
		}

		args, err := ec.field_Query_passport_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Passport(childComplexity, args["passport"].(models.Passport)), true

	case "Query.passports":
		if e.complexity.Query.Passports == nil {
			break
		}

		args, err := ec.field_Query_passports_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Passports(childComplexity, args["passport"].(*models.Passport), args["filter"].(*models.PassportFilter), args["sort"].([]models.PassportSort), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.person":
		if e.complexity.Query.Person == nil {
			break
		}

		args, err := ec.field_Query_person_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Person(childComplexity, args["person"].(models.Person)), true

	case "Query.personCourses":
		if e.complexity.Query.PersonCourses == nil {
			break
		}

		args, err := ec.field_Query_personCourses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonCourses(childComplexity, args["course"].(*models.PersonCourse)), true

	case "Query.personRating":
		if e.complexity.Query.PersonRating == nil {
			break
		}

		args, err := ec.field_Query_personRating_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonRating(childComplexity, args["personRating"].(*models.PersonRating)), true

	case "Query.personRatings":
		if e.complexity.Query.PersonRatings == nil {
			break
		}

		args, err := ec.field_Query_personRatings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonRatings(childComplexity, args["personRating"].(*models.PersonRating), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.personTax":
		if e.complexity.Query.PersonTax == nil {
			break
		}

		return e.complexity.Query.PersonTax(childComplexity), true

	case "Query.persons":
		if e.complexity.Query.Persons == nil {
			break
		}

		args, err := ec.field_Query_persons_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Persons(childComplexity, args["person"].(*models.Person), args["filter"].(*models.PersonFilter), args["sort"].([]models.PersonSort), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.ping":
		if e.complexity.Query.Ping == nil {
			break
		}

		args, err := ec.field_Query_ping_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Ping(childComplexity, args["id"].(*string)), true

	case "Query.regUserByPhone":
		if e.complexity.Query.RegUserByPhone == nil {
			break
		}

		args, err := ec.field_Query_regUserByPhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegUserByPhone(childComplexity, args["phone"].(string)), true

	case "Query.region":
		if e.complexity.Query.Region == nil {
			break
		}

		args, err := ec.field_Query_region_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Region(childComplexity, args["region"].(*models.Region)), true

	case "Query.regions":
		if e.complexity.Query.Regions == nil {
			break
		}

		args, err := ec.field_Query_regions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Regions(childComplexity, args["region"].(*models.Region), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.role":
		if e.complexity.Query.Role == nil {
			break
		}

		args, err := ec.field_Query_role_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Role(childComplexity, args["role"].(*models.Role)), true

	case "Query.roles":
		if e.complexity.Query.Roles == nil {
			break
		}

		args, err := ec.field_Query_roles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Roles(childComplexity, args["role"].(*models.Role), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.runJobRequest":
		if e.complexity.Query.RunJobRequest == nil {
			break
		}

		args, err := ec.field_Query_runJobRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RunJobRequest(childComplexity, args["job"].(*models.Job), args["lat"].(*float64), args["lon"].(*float64)), true

	case "Query.settlement":
		if e.complexity.Query.Settlement == nil {
			break
		}

		args, err := ec.field_Query_settlement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Settlement(childComplexity, args["settlement"].(*models.Settlement)), true

	case "Query.settlements":
		if e.complexity.Query.Settlements == nil {
			break
		}

		args, err := ec.field_Query_settlements_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Settlements(childComplexity, args["settlement"].(*models.Settlement), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.signToHotJob":
		if e.complexity.Query.SignToHotJob == nil {
			break
		}

		return e.complexity.Query.SignToHotJob(childComplexity), true

	case "Query.statistics":
		if e.complexity.Query.Statistics == nil {
			break
		}

		args, err := ec.field_Query_statistics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Statistics(childComplexity, args["organization"].(*models.Organization)), true

	case "Query.status":
		if e.complexity.Query.Status == nil {
			break
		}

		args, err := ec.field_Query_status_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Status(childComplexity, args["status"].(*models.Status)), true

	case "Query.statuses":
		if e.complexity.Query.Statuses == nil {
			break
		}

		args, err := ec.field_Query_statuses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Statuses(childComplexity, args["status"].(*models.Status), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.street":
		if e.complexity.Query.Street == nil {
			break
		}

		args, err := ec.field_Query_street_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Street(childComplexity, args["street"].(*models.Street)), true

	case "Query.streets":
		if e.complexity.Query.Streets == nil {
			break
		}

		args, err := ec.field_Query_streets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Streets(childComplexity, args["street"].(*models.Street), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.tag":
		if e.complexity.Query.Tag == nil {
			break
		}

		args, err := ec.field_Query_tag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tag(childComplexity, args["tag"].(*models.Tag)), true

	case "Query.tags":
		if e.complexity.Query.Tags == nil {
			break
		}

		args, err := ec.field_Query_tags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tags(childComplexity, args["tag"].(*models.Tag), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["user"].(*models.User)), true

	case "Query.userLocation":
		if e.complexity.Query.UserLocation == nil {
			break
		}

		args, err := ec.field_Query_userLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserLocation(childComplexity, args["lat"].(*float64), args["lon"].(*float64)), true

	case "Query.userMsg":
		if e.complexity.Query.UserMsg == nil {
			break
		}

		args, err := ec.field_Query_userMsg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserMsg(childComplexity, args["status"].(*models.Status), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["user"].(*models.User), args["filter"].(*models.UserFilter), args["sort"].([]models.UserSort), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.usersByObject":
		if e.complexity.Query.UsersByObject == nil {
			break
		}

		args, err := ec.field_Query_usersByObject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UsersByObject(childComplexity, args["object"].(*models.Organization), args["user"].(*models.User), args["filter"].(*models.UserFilter), args["sort"].([]models.UserSort), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.validateINN":
		if e.complexity.Query.ValidateInn == nil {
			break
		}

		args, err := ec.field_Query_validateINN_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ValidateInn(childComplexity, args["inn"].(string)), true

	case "RecognizedField.confidence":
		if e.complexity.RecognizedField.Confidence == nil {
			break
		}

		return e.complexity.RecognizedField.Confidence(childComplexity), true

	case "RecognizedField.result":
		if e.complexity.RecognizedField.Result == nil {
			break
		}

		return e.complexity.RecognizedField.Result(childComplexity), true

	case "RecognizedField.valid":
		if e.complexity.RecognizedField.Valid == nil {
			break
		}

		return e.complexity.RecognizedField.Valid(childComplexity), true

	case "RecognizedFields.birthDate":
		if e.complexity.RecognizedFields.BirthDate == nil {
			break
		}

		return e.complexity.RecognizedFields.BirthDate(childComplexity), true

	case "RecognizedFields.dateIssue":
		if e.complexity.RecognizedFields.DateIssue == nil {
			break
		}

		return e.complexity.RecognizedFields.DateIssue(childComplexity), true

	case "RecognizedFields.department":
		if e.complexity.RecognizedFields.Department == nil {
			break
		}

		return e.complexity.RecognizedFields.Department(childComplexity), true

	case "RecognizedFields.departmentCode":
		if e.complexity.RecognizedFields.DepartmentCode == nil {
			break
		}

		return e.complexity.RecognizedFields.DepartmentCode(childComplexity), true

	case "RecognizedFields.error":
		if e.complexity.RecognizedFields.Error == nil {
			break
		}

		return e.complexity.RecognizedFields.Error(childComplexity), true

	case "RecognizedFields.gender":
		if e.complexity.RecognizedFields.Gender == nil {
			break
		}

		return e.complexity.RecognizedFields.Gender(childComplexity), true

	case "RecognizedFields.name":
		if e.complexity.RecognizedFields.Name == nil {
			break
		}

		return e.complexity.RecognizedFields.Name(childComplexity), true

	case "RecognizedFields.number":
		if e.complexity.RecognizedFields.Number == nil {
			break
		}

		return e.complexity.RecognizedFields.Number(childComplexity), true

	case "RecognizedFields.patronymic":
		if e.complexity.RecognizedFields.Patronymic == nil {
			break
		}

		return e.complexity.RecognizedFields.Patronymic(childComplexity), true

	case "RecognizedFields.serial":
		if e.complexity.RecognizedFields.Serial == nil {
			break
		}

		return e.complexity.RecognizedFields.Serial(childComplexity), true

	case "RecognizedFields.surname":
		if e.complexity.RecognizedFields.Surname == nil {
			break
		}

		return e.complexity.RecognizedFields.Surname(childComplexity), true

	case "Region.created":
		if e.complexity.Region.Created == nil {
			break
		}

		return e.complexity.Region.Created(childComplexity), true

	case "Region.isDeleted":
		if e.complexity.Region.IsDeleted == nil {
			break
		}

		return e.complexity.Region.IsDeleted(childComplexity), true

	case "Region.name":
		if e.complexity.Region.Name == nil {
			break
		}

		return e.complexity.Region.Name(childComplexity), true

	case "Region.uuid":
		if e.complexity.Region.UUID == nil {
			break
		}

		return e.complexity.Region.UUID(childComplexity), true

	case "Region.updated":
		if e.complexity.Region.Updated == nil {
			break
		}

		return e.complexity.Region.Updated(childComplexity), true

	case "RightToObject.delete":
		if e.complexity.RightToObject.Delete == nil {
			break
		}

		return e.complexity.RightToObject.Delete(childComplexity), true

	case "RightToObject.insert":
		if e.complexity.RightToObject.Insert == nil {
			break
		}

		return e.complexity.RightToObject.Insert(childComplexity), true

	case "RightToObject.object":
		if e.complexity.RightToObject.Object == nil {
			break
		}

		return e.complexity.RightToObject.Object(childComplexity), true

	case "RightToObject.select":
		if e.complexity.RightToObject.Select == nil {
			break
		}

		return e.complexity.RightToObject.Select(childComplexity), true

	case "RightToObject.update":
		if e.complexity.RightToObject.Update == nil {
			break
		}

		return e.complexity.RightToObject.Update(childComplexity), true

	case "Role.created":
		if e.complexity.Role.Created == nil {
			break
		}

		return e.complexity.Role.Created(childComplexity), true

	case "Role.isDeleted":
		if e.complexity.Role.IsDeleted == nil {
			break
		}

		return e.complexity.Role.IsDeleted(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.organization":
		if e.complexity.Role.Organization == nil {
			break
		}

		return e.complexity.Role.Organization(childComplexity), true

	case "Role.permissions":
		if e.complexity.Role.Permissions == nil {
			break
		}

		return e.complexity.Role.Permissions(childComplexity), true

	case "Role.roleType":
		if e.complexity.Role.RoleType == nil {
			break
		}

		return e.complexity.Role.RoleType(childComplexity), true

	case "Role.uuid":
		if e.complexity.Role.UUID == nil {
			break
		}

		return e.complexity.Role.UUID(childComplexity), true

	case "Role.updated":
		if e.complexity.Role.Updated == nil {
			break
		}

		return e.complexity.Role.Updated(childComplexity), true

	case "Settlement.area":
		if e.complexity.Settlement.Area == nil {
			break
		}

		return e.complexity.Settlement.Area(childComplexity), true

	case "Settlement.city":
		if e.complexity.Settlement.City == nil {
			break
		}

		return e.complexity.Settlement.City(childComplexity), true

	case "Settlement.cityDistrict":
		if e.complexity.Settlement.CityDistrict == nil {
			break
		}

		return e.complexity.Settlement.CityDistrict(childComplexity), true

	case "Settlement.created":
		if e.complexity.Settlement.Created == nil {
			break
		}

		return e.complexity.Settlement.Created(childComplexity), true

	case "Settlement.isDeleted":
		if e.complexity.Settlement.IsDeleted == nil {
			break
		}

		return e.complexity.Settlement.IsDeleted(childComplexity), true

	case "Settlement.name":
		if e.complexity.Settlement.Name == nil {
			break
		}

		return e.complexity.Settlement.Name(childComplexity), true

	case "Settlement.region":
		if e.complexity.Settlement.Region == nil {
			break
		}

		return e.complexity.Settlement.Region(childComplexity), true

	case "Settlement.uuid":
		if e.complexity.Settlement.UUID == nil {
			break
		}

		return e.complexity.Settlement.UUID(childComplexity), true

	case "Settlement.updated":
		if e.complexity.Settlement.Updated == nil {
			break
		}

		return e.complexity.Settlement.Updated(childComplexity), true

	case "Status.content":
		if e.complexity.Status.Content == nil {
			break
		}

		return e.complexity.Status.Content(childComplexity), true

	case "Status.created":
		if e.complexity.Status.Created == nil {
			break
		}

		return e.complexity.Status.Created(childComplexity), true

	case "Status.description":
		if e.complexity.Status.Description == nil {
			break
		}

		return e.complexity.Status.Description(childComplexity), true

	case "Status.isDeleted":
		if e.complexity.Status.IsDeleted == nil {
			break
		}

		return e.complexity.Status.IsDeleted(childComplexity), true

	case "Status.job":
		if e.complexity.Status.Job == nil {
			break
		}

		return e.complexity.Status.Job(childComplexity), true

	case "Status.lat":
		if e.complexity.Status.Lat == nil {
			break
		}

		return e.complexity.Status.Lat(childComplexity), true

	case "Status.lon":
		if e.complexity.Status.Lon == nil {
			break
		}

		return e.complexity.Status.Lon(childComplexity), true

	case "Status.person":
		if e.complexity.Status.Person == nil {
			break
		}

		return e.complexity.Status.Person(childComplexity), true

	case "Status.status":
		if e.complexity.Status.Status == nil {
			break
		}

		return e.complexity.Status.Status(childComplexity), true

	case "Status.tags":
		if e.complexity.Status.Tags == nil {
			break
		}

		return e.complexity.Status.Tags(childComplexity), true

	case "Status.uuid":
		if e.complexity.Status.UUID == nil {
			break
		}

		return e.complexity.Status.UUID(childComplexity), true

	case "Status.updated":
		if e.complexity.Status.Updated == nil {
			break
		}

		return e.complexity.Status.Updated(childComplexity), true

	case "Street.area":
		if e.complexity.Street.Area == nil {
			break
		}

		return e.complexity.Street.Area(childComplexity), true

	case "Street.city":
		if e.complexity.Street.City == nil {
			break
		}

		return e.complexity.Street.City(childComplexity), true

	case "Street.cityDistrict":
		if e.complexity.Street.CityDistrict == nil {
			break
		}

		return e.complexity.Street.CityDistrict(childComplexity), true

	case "Street.created":
		if e.complexity.Street.Created == nil {
			break
		}

		return e.complexity.Street.Created(childComplexity), true

	case "Street.isDeleted":
		if e.complexity.Street.IsDeleted == nil {
			break
		}

		return e.complexity.Street.IsDeleted(childComplexity), true

	case "Street.name":
		if e.complexity.Street.Name == nil {
			break
		}

		return e.complexity.Street.Name(childComplexity), true

	case "Street.region":
		if e.complexity.Street.Region == nil {
			break
		}

		return e.complexity.Street.Region(childComplexity), true

	case "Street.settlement":
		if e.complexity.Street.Settlement == nil {
			break
		}

		return e.complexity.Street.Settlement(childComplexity), true

	case "Street.uuid":
		if e.complexity.Street.UUID == nil {
			break
		}

		return e.complexity.Street.UUID(childComplexity), true

	case "Street.updated":
		if e.complexity.Street.Updated == nil {
			break
		}

		return e.complexity.Street.Updated(childComplexity), true

	case "Subscription.areaSub":
		if e.complexity.Subscription.AreaSub == nil {
			break
		}

		return e.complexity.Subscription.AreaSub(childComplexity), true

	case "Subscription.citySub":
		if e.complexity.Subscription.CitySub == nil {
			break
		}

		return e.complexity.Subscription.CitySub(childComplexity), true

	case "Subscription.jobSub":
		if e.complexity.Subscription.JobSub == nil {
			break
		}

		return e.complexity.Subscription.JobSub(childComplexity), true

	case "Subscription.msgStatSub":
		if e.complexity.Subscription.MsgStatSub == nil {
			break
		}

		return e.complexity.Subscription.MsgStatSub(childComplexity), true

	case "Subscription.organizationSub":
		if e.complexity.Subscription.OrganizationSub == nil {
			break
		}

		return e.complexity.Subscription.OrganizationSub(childComplexity), true

	case "Subscription.parsePersonSub":
		if e.complexity.Subscription.ParsePersonSub == nil {
			break
		}

		return e.complexity.Subscription.ParsePersonSub(childComplexity), true

	case "Subscription.personSub":
		if e.complexity.Subscription.PersonSub == nil {
			break
		}

		return e.complexity.Subscription.PersonSub(childComplexity), true

	case "Subscription.pingSub":
		if e.complexity.Subscription.PingSub == nil {
			break
		}

		args, err := ec.field_Subscription_pingSub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.PingSub(childComplexity, args["id"].(*string)), true

	case "Subscription.regionSub":
		if e.complexity.Subscription.RegionSub == nil {
			break
		}

		return e.complexity.Subscription.RegionSub(childComplexity), true

	case "Subscription.userSub":
		if e.complexity.Subscription.UserSub == nil {
			break
		}

		return e.complexity.Subscription.UserSub(childComplexity), true

	case "Tag.isDeleted":
		if e.complexity.Tag.IsDeleted == nil {
			break
		}

		return e.complexity.Tag.IsDeleted(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.uuid":
		if e.complexity.Tag.UUID == nil {
			break
		}

		return e.complexity.Tag.UUID(childComplexity), true

	case "Taxes.penalty":
		if e.complexity.Taxes.Penalty == nil {
			break
		}

		return e.complexity.Taxes.Penalty(childComplexity), true

	case "Taxes.preliminary":
		if e.complexity.Taxes.Preliminary == nil {
			break
		}

		return e.complexity.Taxes.Preliminary(childComplexity), true

	case "Taxes.proceeds":
		if e.complexity.Taxes.Proceeds == nil {
			break
		}

		return e.complexity.Taxes.Proceeds(childComplexity), true

	case "Taxes.tax":
		if e.complexity.Taxes.Tax == nil {
			break
		}

		return e.complexity.Taxes.Tax(childComplexity), true

	case "TemplateRights.created":
		if e.complexity.TemplateRights.Created == nil {
			break
		}

		return e.complexity.TemplateRights.Created(childComplexity), true

	case "TemplateRights.isDeleted":
		if e.complexity.TemplateRights.IsDeleted == nil {
			break
		}

		return e.complexity.TemplateRights.IsDeleted(childComplexity), true

	case "TemplateRights.name":
		if e.complexity.TemplateRights.Name == nil {
			break
		}

		return e.complexity.TemplateRights.Name(childComplexity), true

	case "TemplateRights.rightsToObject":
		if e.complexity.TemplateRights.RightsToObject == nil {
			break
		}

		return e.complexity.TemplateRights.RightsToObject(childComplexity), true

	case "TemplateRights.uuid":
		if e.complexity.TemplateRights.UUID == nil {
			break
		}

		return e.complexity.TemplateRights.UUID(childComplexity), true

	case "TemplateRights.updated":
		if e.complexity.TemplateRights.Updated == nil {
			break
		}

		return e.complexity.TemplateRights.Updated(childComplexity), true

	case "User.contact":
		if e.complexity.User.Contact == nil {
			break
		}

		return e.complexity.User.Contact(childComplexity), true

	case "User.created":
		if e.complexity.User.Created == nil {
			break
		}

		return e.complexity.User.Created(childComplexity), true

	case "User.groups":
		if e.complexity.User.Groups == nil {
			break
		}

		return e.complexity.User.Groups(childComplexity), true

	case "User.isBlocked":
		if e.complexity.User.IsBlocked == nil {
			break
		}

		return e.complexity.User.IsBlocked(childComplexity), true

	case "User.isDeleted":
		if e.complexity.User.IsDeleted == nil {
			break
		}

		return e.complexity.User.IsDeleted(childComplexity), true

	case "User.isDisabled":
		if e.complexity.User.IsDisabled == nil {
			break
		}

		return e.complexity.User.IsDisabled(childComplexity), true

	case "User.objects":
		if e.complexity.User.Objects == nil {
			break
		}

		return e.complexity.User.Objects(childComplexity), true

	case "User.organization":
		if e.complexity.User.Organization == nil {
			break
		}

		return e.complexity.User.Organization(childComplexity), true

	case "User.person":
		if e.complexity.User.Person == nil {
			break
		}

		return e.complexity.User.Person(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.uuid":
		if e.complexity.User.UUID == nil {
			break
		}

		return e.complexity.User.UUID(childComplexity), true

	case "User.updated":
		if e.complexity.User.Updated == nil {
			break
		}

		return e.complexity.User.Updated(childComplexity), true

	case "User.userType":
		if e.complexity.User.UserType == nil {
			break
		}

		return e.complexity.User.UserType(childComplexity), true

	case "stat.month":
		if e.complexity.Stat.Month == nil {
			break
		}

		return e.complexity.Stat.Month(childComplexity), true

	case "stat.previousMonth":
		if e.complexity.Stat.PreviousMonth == nil {
			break
		}

		return e.complexity.Stat.PreviousMonth(childComplexity), true

	case "stat.quarter":
		if e.complexity.Stat.Quarter == nil {
			break
		}

		return e.complexity.Stat.Quarter(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "internal/schema/accessRights.graphql", Input: `enum Object {
    Organization
}

input RightToObjectInput @goModel(model: "github.com/sphera-erp/sphera/internal/models.RightToObject") {
    object: String
    select: Boolean
    insert: Boolean
    update: Boolean
    delete: Boolean
}


type RightToObject @goModel(model: "github.com/sphera-erp/sphera/internal/models.RightToObject") {
    object: String
    select: Boolean
    insert: Boolean
    update: Boolean
    delete: Boolean
}


input TemplateRightsInput @goModel(model: "github.com/sphera-erp/sphera/internal/models.TemplateRights") {
    uuid: UUID
    isDeleted: Boolean
    name: String
    rightsToObject: [RightToObjectInput]
}

type TemplateRights @goModel(model: "github.com/sphera-erp/sphera/internal/models.TemplateRights") {
    uuid: UUID
    created: DateTime
    updated: DateTime
    isDeleted: Boolean
    name: String
    rightsToObject: [RightToObject]
}

`, BuiltIn: false},
	{Name: "internal/schema/accounting.graphql", Input: `enum Direct {
  plus
  minus
}

enum DestinationMovement {
  selfEmployer
  taxing
  commission
  reward
  rewardTax
}

input MovementInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Movement") {
  uuid: UUID
  isDeleted: Boolean
  organization: OrganizationInput
  direct: Direct
  destination: DestinationMovement
  person: PersonInput
  job: JobInput
  amount: Float
}

input MovementFilter
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.MovementFilter"
  ) {
  uuid: UUIDFilter
  isDeleted: Boolean
  organization: OrganizationFilter
  direct: Direct
  destination: DestinationMovement
  person: PersonFilter
  job: JobFilter
  amount: Float
  and: [MovementFilter]
  or: [MovementFilter]
  not: MovementFilter
}

type Balance
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Balance") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  organization: Organization
  amount: Float
  movement: Movement
}

type Movement
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Movement") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  organization: Organization
  direct: Direct
  destination: DestinationMovement
  person: Person
  job: Job
  amount: Float
  link: String
}

type stat {
  month: Float
  previousMonth: Float
  quarter: Float
}

extend type Query {
  movement(movement: MovementInput): Movement @Private
  movements(
    movement: MovementInput
    filter: MovementFilter
    offset: Int
    limit: Int
  ): [Movement] @Private
  flowBalance(organization: OrganizationInput, from: Date, to: Date): [Balance]
    @Private
  getBalance(organization: OrganizationInput!, until: Date): Float @Private
  statistics(organization: OrganizationInput): stat @Private
}

extend type Mutation {
  movementMutation(movement: MovementInput): Movement @Private
  addToBalance(organization: OrganizationInput!, amount: Float!): Boolean!
    @Private
}
`, BuiltIn: false},
	{Name: "internal/schema/addresses.graphql", Input: `input CountryFilter {
  uuid: UUIDFilter
  name: StringFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  isDeleted: Boolean
}

input CountryInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Country") {
  uuid: UUID
  name: String
  isDeleted: Boolean
}

type Country
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Country") {
  uuid: UUID
  name: String
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

input RegionFilter {
  uuid: UUID
  name: String
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

input RegionInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Region") {
  uuid: UUID
  name: String
  isDeleted: Boolean
}

type Region
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Region") {
  uuid: UUID
  name: String
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

input AreaFilter {
  uuid: UUIDFilter
  region: RegionFilter
  name: StringFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  isDeleted: Boolean
}

input AreaInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Area") {
  uuid: UUID
  region: RegionInput
  name: String
  isDeleted: Boolean
}

type Area @goModel(model: "github.com/sphera-erp/sphera/internal/models.Area") {
  uuid: UUID
  region: Region
  name: String
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

input CityFilter {
  uuid: UUIDFilter
  region: RegionFilter
  area: AreaFilter
  name: StringFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  isDeleted: Boolean
}

input CityInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.City") {
  uuid: UUID
  region: RegionInput
  area: AreaInput
  name: String
  isDeleted: Boolean
}

type City @goModel(model: "github.com/sphera-erp/sphera/internal/models.City") {
  uuid: UUID
  region: Region
  area: Area
  name: String
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

input CityDistrictFilter {
  uuid: UUIDFilter
  region: RegionFilter
  area: AreaFilter
  city: CityFilter
  name: StringFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  isDeleted: Boolean
}

input CityDistrictInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.CityDistrict") {
  uuid: UUID
  region: RegionInput
  area: AreaInput
  city: CityInput
  name: String
  isDeleted: Boolean
}

type CityDistrict
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.CityDistrict") {
  uuid: UUID
  region: Region
  area: Area
  city: City
  name: String
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

input SettlementFilter {
  uuid: UUIDFilter
  region: RegionFilter
  area: AreaFilter
  city: CityFilter
  cityDistrict: CityDistrictFilter
  name: StringFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  isDeleted: Boolean
}

input SettlementInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Settlement") {
  uuid: UUID
  region: RegionInput
  area: AreaInput
  city: CityInput
  cityDistrict: CityDistrictInput
  name: String
  isDeleted: Boolean
}

type Settlement
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Settlement") {
  uuid: UUID
  region: Region
  area: Area
  city: City
  cityDistrict: CityDistrict
  name: String
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

input StreetFilter {
  uuid: UUIDFilter
  region: RegionFilter
  area: AreaFilter
  city: CityFilter
  cityDistrict: CityDistrictFilter
  settlement: SettlementFilter
  name: StringFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  isDeleted: Boolean
}

input StreetInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Street") {
  uuid: UUID
  region: RegionInput
  area: AreaInput
  city: CityInput
  cityDistrict: CityDistrictInput
  settlement: SettlementInput
  name: String
  isDeleted: Boolean
}

type Street
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Street") {
  uuid: UUID
  region: Region
  area: Area
  city: City
  cityDistrict: CityDistrict
  settlement: Settlement
  name: String
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

input AddressFilter {
  uuid: UUIDFilter
  formattedAddress: StringFilter
  country: CountryInput
  region: RegionInput
  area: AreaInput
  city: CityInput
  cityDistrict: CityDistrictInput
  settlement: SettlementInput
  street: StreetInput
  house: StringFilter
  block: StringFilter
  flat: StringFilter
  lat: FloatFilter
  lon: FloatFilter
  person: PersonFilter
  organization: OrganizationFilter
  isDeleted: Boolean
  and: [AddressFilter]
  or: [AddressFilter]
  not: AddressFilter
}

input AddressInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Address") {
  uuid: UUID
  formattedAddress: String
  country: CountryInput
  region: RegionInput
  area: AreaInput
  city: CityInput
  cityDistrict: CityDistrictInput
  settlement: SettlementInput
  street: StreetInput
  house: String
  block: String
  flat: String
  lat: Float
  lon: Float
  person: PersonInput
  organization: OrganizationInput
  isDeleted: Boolean
}

type Address
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Address") {
  uuid: UUID
  formattedAddress: String
  country: Country
  region: Region
  area: Area
  city: City
  cityDistrict: CityDistrict
  settlement: Settlement
  street: Street
  house: String
  block: String
  flat: String
  lat: Float
  lon: Float
  person: Person
  organization: Organization
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
}

extend type Query {
  country(country: CountryInput): Country @Private
  countries(country: CountryInput, offset: Int, limit: Int): [Country] @Private
  region(region: RegionInput): Region @Private
  regions(region: RegionInput, offset: Int, limit: Int): [Region] @Private
  area(area: AreaInput): Area @Private
  areas(area: AreaInput, offset: Int, limit: Int): [Area] @Private
  city(city: CityInput): City @Private
  cities(city: CityInput, offset: Int, limit: Int): [City] @Private
  cityDistrict(cityDistrict: CityDistrictInput): CityDistrict @Private
  cityDistricts(
    cityDistrict: CityDistrictInput
    offset: Int
    limit: Int
  ): [CityDistrict] @Private
  settlement(settlement: SettlementInput): Settlement @Private
  settlements(
    settlement: SettlementInput
    offset: Int
    limit: Int
  ): [Settlement] @Private
  street(street: StreetInput): Street @Private
  streets(street: StreetInput, offset: Int, limit: Int): [Street] @Private
  address(address: AddressInput): Address @Private
  addresses(address: AddressInput, offset: Int, limit: Int): [Address] @Private
}

extend type Mutation {
  parseAddress(rawAddress: String): [String] @Private
  countryMutation(country: CountryInput): Country @Private
  regionMutation(region: RegionInput): Region @Private
  areaMutation(area: AreaInput): Area @Private
  cityMutation(city: CityInput): City @Private
  cityDistrictMutation(cityDistrict: CityDistrictInput): CityDistrict @Private
  settlementMutation(settlement: SettlementInput): Settlement @Private
  streetMutation(street: StreetInput): Street @Private
  addressMutation(address: AddressInput): Address @Private
}

extend type Subscription {
  regionSub: Region
  areaSub: Area
  citySub: City
}
`, BuiltIn: false},
	{Name: "internal/schema/contact.graphql", Input: `
input ContactFilter {
    uuid: UUIDFilter
    created: DateTimeFilter
    updated: DateTimeFilter
    person: PersonFilter
    contactType: ContactTypeInput
    presentation: StringFilter
    isDeleted: Boolean
    and: [ContactFilter]
    or: [ContactFilter]
    not: ContactFilter
}

input ContactInput @goModel(model: "github.com/sphera-erp/sphera/internal/models.Contact"){
    uuid: UUID
    person: PersonInput
    organization: OrganizationInput
    contactType: ContactTypeInput
    presentation: String
    isDeleted: Boolean
}

type Contact  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Contact"){
    uuid: UUID
    created: DateTime
    updated: DateTime
    person: Person
    organization: Organization
    contactType: ContactType
    presentation: String
    isDeleted: Boolean
}

input ContactTypeFilter @goModel(model: "github.com/sphera-erp/sphera/internal/models.ContactTypeFilter"){
    uuid: UUIDFilter
    created: DateTimeFilter
    updated: DateTimeFilter
    name: StringFilter
    isDeleted: Boolean
}

input ContactTypeInput @goModel(model: "github.com/sphera-erp/sphera/internal/models.ContactType") {
    uuid: UUID
    name: String
    isDeleted: Boolean
}

type ContactType @goModel(model: "github.com/sphera-erp/sphera/internal/models.ContactType"){
    uuid: UUID
    created: DateTime
    updated: DateTime
    name: String
    isDeleted: Boolean
}

extend type Query {
    contact(contact: ContactInput!): Contact @Private
    contacts(contact: ContactInput, filter: ContactFilter, offset: Int, limit: Int): [Contact] @Private
    contactType(contactType: ContactTypeInput): ContactType
    contactTypes(contactType: ContactTypeInput, filter: ContactTypeFilter, offset: Int, limit: Int): [ContactType] @Private
}

extend type Mutation {
    contactMutation(contact: ContactInput): Contact @Private
    contactTypeMutation(contactType: ContactTypeInput): ContactType @Private
}`, BuiltIn: false},
	{Name: "internal/schema/filters.graphql", Input: `

input UUIDFilter {
    eq: UUID
    notEq: UUID
    in: [UUID]
    noIn: [UUID]
}

input StringFilter {
    ilike: String
    like: String
}

input FloatFilter {
    gt: Float
    gte: Float
    lt: Float
    lte: Float
    eq: Float
    notEq: Float
    between: [Float]
}

input IntFilter {
    gt: Int
    gte: Int
    lt: Int
    lte: Int
    eq: Int
    notEq: Int
    between: [Int]
}

input DateTimeFilter {
    gt: DateTime
    gte: DateTime
    lt: DateTime
    lte: DateTime
    eq: DateTime
    notEq: DateTime
    between: [DateTime]
}

input DateFilter {
    gt: Date
    gte: Date
    lt: Date
    lte: Date
    eq: Date
    notEq: Date
    between: [Date]
}

input TimeFilter {
    gt: Time
    gte: Time
    lt: Time
    lte: Time
    eq: Time
    notEq: Time
    between: [Time]
}`, BuiltIn: false},
	{Name: "internal/schema/jobFlow.graphql", Input: `enum ScriptType {
  prepare
}

type MsgStat
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.MsgStat") {
  job: Job
  person: Person
  reading: Boolean!
}

input JobFlowInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.JobFlow") {
  uuid: UUID
  isDeleted: Boolean
  organization: OrganizationInput
  jobType: JobTypeInput
  scriptType: ScriptType
  diff: Int
  script: String
}

type JobFlow
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.JobFlow") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  organization: Organization
  jobType: JobType
  scriptType: ScriptType
  diff: Int
  script: String
}

enum WorkerOrder {
  Primary
  Secondary
}

type InfoAboutJob {
  workerOrder: WorkerOrder
  courses: [Course]
}

extend type Query {
  JobFlow(jobFlow: JobFlowInput): JobFlow @Private
  "запрос открытия смены"
  runJobRequest(job: JobInput, lat: Float, lon: Float): String @Private
  "запрос закрытия смены"
  endJobRequest(job: JobInput, lat: Float, lon: Float): String @Private
  "подписаться на рассылку о горячей смены"
  signToHotJob: Boolean @Private
  getMsgStats: [MsgStat] @Private
  userMsg(status: StatusInput, offset: Int, limit: Int): [Status] @Private
}

extend type Mutation {
  JobFlowMutation(jobFlow: JobFlowInput): JobFlow @Private
  "Публикация работы"
  publishJob(job: JobInput): Boolean! @Private
  "Согласен на смену"
  agreeToJob(job: JobInput, user: UserInput): InfoAboutJob @Private
  "Отказываюсь от смены"
  refuseJob(job: JobInput, reason: String!): Boolean! @Private
  "Проверка что сз движется"
  check(job: JobInput, lat: Float, lon: Float, user: UserInput): Boolean!
    @Private
  "Пришел на смену"
  onPlace(job: JobInput, lat: Float, lon: Float): Boolean! @Private
  "Возник конфликт на смене"
  conflictOnJob(job: JobInput, reason: String!): Boolean! @Private
  "Смена статуса смены"
  changeStatusJob(job: JobInput, status: StatusInput): Boolean! @Private
  "Отменить смену"
  cancelJob(job: JobInput, reason: String!): Boolean! @Private
  "Отказаться от исполнителя"
  rejectPerson(job: JobInput, person: PersonInput, reason: String!): Boolean!
    @Private
  "Проблема выполнения смены"
  brokenJob(job: JobInput, reason: String!): Boolean! @Private
  "Завершение смены по диспуту"
  closeJob(job: JobInput, percentagePayment: Int): Boolean! @Private
  "начать работу"
  runJob(code: String): Boolean! @Private
  "Закончить работу"
  endJob(code: String, rating: Float, ratingDescription: String): PersonRating!
    @Private
  addMsg(
    job: JobInput
    description: String!
    content: [ContentInput]
  ): Boolean! @Private
  readMsg(job: JobInput!): Boolean! @Private
}

extend type Subscription {
  msgStatSub: MsgStat
}
`, BuiltIn: false},
	{Name: "internal/schema/jobs.graphql", Input: `enum CandidateTags
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.CandidateTags"
  ) {
  primary
  secondary
  refused
  rejected
  notConfirm
  noTraining
}

enum JobTypeIcon
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.JobTypeIcon") {
  cleaner
  cashier
  loader
  merchandiser
}

enum CourseType
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.CourseType") {
  course
  briefing
}

enum JobStatus {
  created
  draft
  publish
  full
  ready
  onObject
  start
  end
  cancel
  reset
  dispute
  reject
}

input CourseInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Course") {
  uuid: UUID
  isDeleted: Boolean
  name: String
  courseType: CourseType
  content: String
  organization: OrganizationInput
  passingScore: Int
}

input CourseFilter {
  uuid: UUIDFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  isDeleted: Boolean
  name: StringFilter
  courseType: CourseType
  content: StringFilter
  organization: OrganizationFilter
  passingScore: IntFilter
}

type Course
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Course") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  name: String
  courseType: CourseType
  content: String
  organization: Organization
  passingScore: Int
}

input LocalityJobCostFilter {
  uuid: UUIDFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  organization: OrganizationFilter
  country: CountryFilter
  region: RegionFilter
  area: AreaFilter
  city: CityFilter
  cityDistrict: CityDistrictFilter
  settlement: SettlementFilter
  maxCost: FloatFilter
  isDeleted: Boolean
}

input LocalityJobCostInput
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.LocalityJobCost"
  ) {
  uuid: UUID
  organization: OrganizationInput
  country: CountryInput
  region: RegionInput
  area: AreaInput
  city: CityInput
  cityDistrict: CityDistrictInput
  settlement: SettlementInput
  maxCost: Float
  isDeleted: Boolean
}

type LocalityJobCost
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.LocalityJobCost"
  ) {
  uuid: UUID
  created(start: String!, stop: String!): DateTime
  updated: DateTime
  organization: Organization
  country: Country
  region: Region
  area: Area
  city: City
  cityDistrict: CityDistrict
  settlement: Settlement
  maxCost: Float
  isDeleted: Boolean
}

input JobTypeFilter {
  uuid: UUIDFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  icon: JobTypeIcon
  organization: OrganizationFilter
  name: StringFilter
  isDeleted: Boolean
}

input JobTypeInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.JobType") {
  uuid: UUID
  icon: JobTypeIcon
  organization: OrganizationInput
  name: String
  localityJobCost: [LocalityJobCostInput]
  courses: [CourseInput]
  isDeleted: Boolean
  needMedicalBook: Boolean
}

type JobType
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.JobType") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  icon: JobTypeIcon
  organization: Organization
  name: String
  localityJobCost: [LocalityJobCost]
  courses: [Course]
  isDeleted: Boolean
  needMedicalBook: Boolean
}

input JobTemplateFilter {
  uuid: UUIDFilter
  name: StringFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  organization: OrganizationFilter
  object: OrganizationFilter
  region: RegionFilter
  area: AreaFilter
  city: CityFilter
  jobType: JobTypeFilter
  cost: FloatFilter
  date: DateFilter
  startTime: TimeFilter
  endTime: TimeFilter
  duration: IntFilter
  description: StringFilter
  published: DateFilter
  isDeleted: Boolean
}

input JobTemplateInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.JobTemplate") {
  uuid: UUID
  name: String
  organization: OrganizationInput
  object: OrganizationInput
  region: RegionInput
  area: AreaInput
  city: CityInput
  jobType: JobTypeInput
  cost: Float
  date: Date
  startTime: Time
  endTime: Time
  duration: Int
  description: String
  published: Date
  isDeleted: Boolean
}

type JobTemplate
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.JobTemplate") {
  uuid: UUID
  name: String
  created: DateTime
  updated: DateTime
  organization: Organization
  object: Organization
  region: Region
  area: Area
  city: City
  jobType: JobType
  cost: Float
  date: Date
  startTime: Time
  endTime: Time
  duration: Int
  description: String
  published: Date
  isDeleted: Boolean
}

enum JobSortableField
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.JobSortableField"
  ) {
  uuid
  created
  updated
  date
  startTime
  endTime
  description
}

input JobSort
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.JobSort") {
  field: JobSortableField
  order: SortOrder = ASC
}

input JobFilter {
  uuid: UUIDFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  date: DateFilter
  startTime: TimeFilter
  endTime: TimeFilter
  duration: IntFilter
  cost: FloatFilter
  object: OrganizationFilter
  jobTemplate: JobTemplateFilter
  jobType: JobTypeFilter
  description: StringFilter
  isHot: Boolean
  executor: PersonFilter
  isDeleted: Boolean
  status: StringFilter
  rating: FloatFilter
  and: [JobFilter]
  or: [JobFilter]
  not: JobFilter
}

input JobInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Job") {
  uuid: UUID
  name: String
  date: Date
  startTime: Time
  endTime: Time
  duration: Int
  cost: Float
  object: OrganizationInput
  jobTemplate: JobTemplateInput
  jobType: JobTypeInput
  description: String
  isHot: Boolean
  published: Date
  status: JobStatus
  candidates: [CandidateInput]
  executor: PersonInput
  statuses: [StatusInput]
  isDeleted: Boolean
  rating: Float
  ratingDescription: String
}

type Job @goModel(model: "github.com/sphera-erp/sphera/internal/models.Job") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  name: String
  date: Date
  startTime: Time
  endTime: Time
  duration: Int
  cost: Float
  object: Organization
  jobTemplate: JobTemplate
  jobType: JobType
  description: String
  isHot: Boolean
  published: Date
  status: JobStatus
  candidates: [Candidate]
  executor: Person
  statuses: [Status]
  isDeleted: Boolean
  rating: Float
  ratingDescription: String
}

input CandidateInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Candidate") {
  uuid: UUID
  person: PersonInput
  job: JobInput
  candidateTag: CandidateTags
  isDeleted: Boolean
}

type Candidate
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Candidate") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  person: Person
  job: Job
  candidateTag: CandidateTags
  isDeleted: Boolean
}

input StatusInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Status") {
  uuid: UUID
  person: PersonInput
  job: JobInput
  description: String
  content: [ContentInput]
  tags: [TagInput]
  status: JobStatus
  isDeleted: Boolean
}

type Status
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Status") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  person: Person
  job: Job
  status: JobStatus
  description: String
  content: [Content]
  tags: [Tag]
  isDeleted: Boolean
  lat: Float
  lon: Float
}

input TagInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Tag") {
  uuid: UUID
  name: String
  isDeleted: Boolean
}

type Tag @goModel(model: "github.com/sphera-erp/sphera/internal/models.Tag") {
  uuid: UUID
  name: String
  isDeleted: Boolean
}

extend type Query {
  getTypeJobIcons: [String!] @Private
  course(course: CourseInput): Course @Private
  courses(course: CourseInput, offset: Int, limit: Int): [Course] @Private
  localityJobCost(localityJobCost: LocalityJobCostInput): LocalityJobCost
    @Private
  localityJobCosts(
    localityJobCost: LocalityJobCostInput
    offset: Int
    limit: Int
  ): [LocalityJobCost] @Private
  jobType(jobType: JobTypeInput): JobType @Private
  jobTypes(jobType: JobTypeInput, offset: Int, limit: Int): [JobType] @Private
  jobTemplate(jobTemplate: JobTemplateInput): JobTemplate @Private
  jobTemplates(
    jobTemplate: JobTemplateInput
    offset: Int
    limit: Int
  ): [JobTemplate] @Private
  job(job: JobInput): Job @Private
  jobs(
    job: JobInput
    filter: JobFilter
    sort: [JobSort!]
    offset: Int
    limit: Int
  ): [Job] @Private
  activeJobs(
    job: JobInput
    filter: JobFilter
    sort: [JobSort!]
    offset: Int
    limit: Int
  ): [Job] @Private
  candidate(candidate: CandidateInput): Candidate @Private
  candidates(candidate: CandidateInput, offset: Int, limit: Int): [Candidate]
    @Private
  status(status: StatusInput): Status @Private
  statuses(status: StatusInput, offset: Int, limit: Int): [Status] @Private
  tag(tag: TagInput): Tag @Private
  tags(tag: TagInput, offset: Int, limit: Int): [Tag] @Private
}

extend type Mutation {
  courseMutate(course: CourseInput): Course @Private
  localityJobCostMutate(localityJobCost: LocalityJobCostInput): LocalityJobCost
    @Private
  jobTypeMutate(jobType: JobTypeInput): JobType @Private
  jobTemplateMutate(jobTemplate: JobTemplateInput): JobTemplate @Private
  jobMutate(job: JobInput): Job @Private
  candidateMutate(candidate: CandidateInput): Candidate @Private
  statusMutate(status: StatusInput): Status @Private
  tagMutate(tag: TagInput): Tag @Private
  massCreationJobs(
    jobTemplate: JobTemplateInput!
    objects: [OrganizationInput!]
    Dates: [Date]
  ): Boolean! @Private
  setJobRating(job: UUID!, rating: Float!, description: String): Boolean!
    @Private
}

extend type Subscription {
  jobSub: Job
}
`, BuiltIn: false},
	{Name: "internal/schema/medicalBook.graphql", Input: `input MedicalBookInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.MedicalBook") {
  uuid: UUID
  number: String
  medicalExaminationDate: Date
  contents: [ContentInput]
  person: PersonInput
  isDeleted: Boolean
  haveHealthRestrictions: Boolean
  haveMedicalBook: Boolean
  descriptionHealthRestrictions: String
  checked: Boolean
  checkedDate: Date
  checkedPerson: PersonInput
}

type MedicalBook
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.MedicalBook") {
  uuid: UUID
  number: String
  medicalExaminationDate: Date
  contents: [Content]
  person: Person
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  haveHealthRestrictions: Boolean
  haveMedicalBook: Boolean
  descriptionHealthRestrictions: String
  checked: Boolean
  checkedDate: Date
  checkedPerson: Person
}

extend type Query {
  medicalBook(medicalBook: MedicalBookInput!): MedicalBook @Private
  medicalBooks(
    medicalBook: MedicalBookInput
    offset: Int
    limit: Int
  ): [MedicalBook] @Private
}

extend type Mutation {
  medicalBookMutation(medicalBook: MedicalBookInput): MedicalBook @Private
}
`, BuiltIn: false},
	{Name: "internal/schema/misc.graphql", Input: `

`, BuiltIn: false},
	{Name: "internal/schema/nationalities.graphql", Input: `input NationalityInput @goModel(model: "github.com/sphera-erp/sphera/internal/models.Nationality") {
    uuid: UUID
    name: String
    isDeleted: Boolean
}

type Nationality @goModel(model: "github.com/sphera-erp/sphera/internal/models.Nationality") {
    uuid: UUID
    created: DateTime
    updated: DateTime
    name: String
    isDeleted: Boolean
}

extend type Query {
    "гражданство"
    nationality(nationality: NationalityInput): Nationality @Private
    "гражданства"
    nationalities(nationality: NationalityInput, offset: Int, limit: Int): [Nationality] @Private
}

extend type Mutation {
    nationalityMutation(nationality: NationalityInput): Nationality @Private
}`, BuiltIn: false},
	{Name: "internal/schema/objectStorage.graphql", Input: `input ContentInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Content") {
  uuid: UUID!
  bucket: String!
  isDeleted: Boolean
}

type Content
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Content") {
  uuid: UUID!
  bucket: String!
  isDeleted: Boolean
}

extend type Mutation {
  singleUpload(file: Upload!, bucket: String!): UUID! @Private
  multipleUpload(files: [Upload!]!, bucket: String!): [UUID!]! @Private
}
`, BuiltIn: false},
	{Name: "internal/schema/organization.graphql", Input: `enum OrganizationType
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.OrganizationType"
  ) {
  Org
  Dep
}

input OrganizationPositionInput
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.OrganizationPosition"
  ) {
  uuid: UUID
  name: String
  isDeleted: Boolean
}

input OrganizationContactInput
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.OrganizationContact"
  ) {
  uuid: UUID
  created: DateTime
  updated: DateTime
  position: OrganizationPositionInput
  person: PersonInput
  isDeleted: Boolean
}

input OrganizationInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Organization") {
  uuid: UUID
  name: String
  inn: String
  kpp: String
  addressLegal: AddressInput
  addressFact: AddressInput
  parent: OrganizationInput
  parentOrganization: OrganizationInput
  departments: [OrganizationInput]
  isDeleted: Boolean
  logo: ContentInput
  prefix: String
  fullName: String
  shortName: String
  fee: Float
  persons: [PersonInput]
  isGroup: Boolean
  firstReserveReward: Float
  secondReserveReward: Float
  stDistance: Float
  stTime: Duration
}

type OrganizationPosition
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.OrganizationPosition"
  ) {
  uuid: UUID
  created: DateTime
  updated: DateTime
  name: String
  isDeleted: Boolean
}

input OrganizationFilter {
  uuid: UUIDFilter
  created: DateTimeFilter
  updated: DateTimeFilter
  name: StringFilter
  inn: StringFilter
  kpp: StringFilter
  addressLegal: AddressFilter
  addressFact: AddressFilter
  parent: OrganizationFilter
  parentOrganization: OrganizationFilter
  isDeleted: Boolean
  prefix: StringFilter
  fullName: StringFilter
  shortName: StringFilter
  fee: FloatFilter
}

type OrganizationContact
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.OrganizationContact"
  ) {
  uuid: UUID
  created: DateTime
  updated: DateTime
  position: OrganizationPosition
  person: Person
  isDeleted: Boolean
}

type Organization
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Organization") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isGroup: Boolean
  name: String
  inn: String
  kpp: String
  addressLegal: Address
  addressFact: Address
  parent: Organization
  parentOrganization: Organization
  departments: [Organization]
  isDeleted: Boolean
  logo: Content
  prefix: String
  fullName: String
  shortName: String
  fee: Float
  firstReserveReward: Float
  secondReserveReward: Float
  persons: [Person]
  stDistance: Float
  stTime: Duration
}

extend type Query {
  organizationPosition(
    organizationPosition: OrganizationPositionInput
  ): OrganizationPosition @Private
  organizationPositions(
    organizationPosition: OrganizationPositionInput
    offset: Int
    limit: Int
  ): [OrganizationPosition] @Private
  organizationContact(
    organizationContact: OrganizationContactInput
  ): OrganizationContact @Private
  organizationContacts(
    organizationContact: OrganizationContactInput
    offset: Int
    limit: Int
  ): [OrganizationContact] @Private
  organization(organization: OrganizationInput): Organization @Private
  organizations(
    organization: OrganizationInput
    offset: Int
    limit: Int
  ): [Organization] @Private
  getOrganizationRating(organization: OrganizationInput): Float @Private
}

extend type Mutation {
  organizationPositionMutation(
    organizationPosition: OrganizationPositionInput
  ): OrganizationPosition @Private
  organizationContactMutation(
    organizationContact: OrganizationContactInput
  ): OrganizationContact @Private
  organizationMutation(organization: OrganizationInput): Organization @Private
  excludePerson(organization: UUID!, person: UUID!): Boolean!
  excludePersonInObject(organization: UUID!, person: UUID!): Boolean! @Private
  dropOrganization(organization: OrganizationInput): Boolean! @Private
  removeParent(organization: OrganizationInput): Boolean! @Private
}

extend type Subscription {
  organizationSub: Organization
}
`, BuiltIn: false},
	{Name: "internal/schema/passports.graphql", Input: `enum PassportSortableField
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.PassportSortableField"
  ) {
  uuid
  created
  updated
  serial
  number
  dateIssue
  departmentCode
  department
}

input PassportSort
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.PassportSort") {
  field: UserSortableField
  order: SortOrder = ASC
}

input PassportFilter
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.PassportFilter"
  ) {
  created: DateTimeFilter
  updated: DateTimeFilter
  serial: StringFilter
  number: StringFilter
  departmentCode: StringFilter
  department: StringFilter
  dateIssue: DateFilter
  and: [UserFilter]
  or: [UserFilter]
  not: UserFilter
}

input PassportInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Passport") {
  uuid: UUID
  serial: String
  number: String
  dateIssue: Date
  departmentCode: String
  department: String
  person: PersonInput
  scan: ContentInput
  addressRegistration: AddressInput
  photoRegistration: ContentInput
  isDeleted: Boolean
}

type Passport
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Passport") {
  uuid: UUID
  serial: String
  number: String
  departmentCode: String
  department: String
  dateIssue: Date
  person: Person
  created: DateTime
  updated: DateTime
  scan: Content
  addressRegistration: Address
  photoRegistration: Content
  isDeleted: Boolean
}

extend type Query {
  passport(passport: PassportInput!): Passport @Private
  passports(
    passport: PassportInput
    filter: PassportFilter
    sort: [PassportSort!]
    offset: Int
    limit: Int
  ): [Passport] @Private
}

extend type Mutation {
  "работа с паспортами"
  passportMutation(passport: PassportInput): Passport @Private
}
`, BuiltIn: false},
	{Name: "internal/schema/persons.graphql", Input: `enum Gender
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Gender") {
  Male
  Female
}

enum PersonSortableField
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.PersonSortableField"
  ) {
  uuid
  created
  updated
  surname
  name
  patronymic
  birthDate
  inn
}

input PersonSort
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.PersonSort") {
  field: UserSortableField
  order: SortOrder = ASC
}

input PersonFilter
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.PersonFilter") {
  created: DateTimeFilter
  updated: DateTimeFilter
  surname: StringFilter
  name: StringFilter
  patronymic: StringFilter
  birthDate: DateFilter
  inn: StringFilter
  and: [PersonFilter]
  or: [PersonFilter]
  not: PersonFilter
}

type RecognizedField
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.RecognizedField"
  ) {
  result: String
  confidence: Float
  valid: Boolean
}

type RecognizedFields
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.RecognizedFields"
  ) {
  error: String
  surname: RecognizedField
  name: RecognizedField
  patronymic: RecognizedField
  birthDate: RecognizedField
  gender: RecognizedField
  serial: RecognizedField
  number: RecognizedField
  department: RecognizedField
  dateIssue: RecognizedField
  departmentCode: RecognizedField
}

input PersonInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Person") {
  uuid: UUID
  user: UserInput
  actualContact: ContactInput
  contacts: [ContactInput]
  passport: PassportInput
  surname: String
  name: String
  patronymic: String
  birthDate: Date
  gender: Gender
  country: CountryInput
  inn: String
  medicalBook: MedicalBookInput
  photo: ContentInput
  isDeleted: Boolean
  position: OrganizationPositionInput
  isContact: Boolean
  validated: Boolean
}

type Person
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Person") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  user: User
  actualContact: Contact
  contacts: [Contact]
  passport: Passport
  surname: String
  name: String
  patronymic: String
  birthDate: Date
  gender: Gender
  country: Country
  inn: String
  medicalBook: MedicalBook
  photo: Content
  isDeleted: Boolean
  position: OrganizationPosition
  isContact: Boolean
  recognizeResult: JSON
  distanceResult: JSON
  recognizedFields: RecognizedFields
  validated: Boolean
  rating: Float
  taxPayment: Boolean
  incomeRegistration: Boolean
}

input PersonCourseInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.PersonCourse") {
  uuid: UUID
  isDeleted: Boolean
  person: PersonInput
  course: CourseInput
  questions: Int
  answers: Int
}

type PersonCourse
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.PersonCourse") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  person: Person
  course: Course
  questions: Int
  answers: Int
}

type PersonValidateStatus {
  passport: Boolean!
  avatar: Boolean!
}

input PersonRatingInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.PersonRating") {
  uuid: UUID
  isDeleted: Boolean
  person: PersonInput
  job: JobInput
  rating: Float
  description: String
}

type PersonRating
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.PersonRating") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  person: Person
  job: Job
  rating: Float
  description: String
}

type Taxes {
  proceeds: Float
  preliminary: Float
  tax: Float
  penalty: Float
}

directive @BlockParsePerson on FIELD_DEFINITION

extend type Query {
  person(person: PersonInput!): Person @Private
  persons(
    person: PersonInput
    filter: PersonFilter
    sort: [PersonSort!]
    offset: Int
    limit: Int
  ): [Person] @Private
  parsePerson(photo: Upload, passport: Upload): PersonValidateStatus!
    @Private
    @BlockParsePerson
  validateINN(inn: String!): Boolean @Private
  personCourses(course: PersonCourseInput): [PersonCourse] @Private
  getPersonRating(person: PersonInput!): Float @Private
  getMyRating: Float @Private
  personRating(personRating: PersonRatingInput): PersonRating @Private
  personRatings(
    personRating: PersonRatingInput
    offset: Int
    limit: Int
  ): [PersonRating] @Private
  getSelfEmployerStatus: Boolean! @Private
  personTax: Taxes! @Private
}

extend type Mutation {
  personMutation(person: PersonInput): Person @Private
  personCourseMutation(course: PersonCourseInput): PersonCourse @Private
  personRatingMutation(personRating: PersonRatingInput): PersonRating @Private
  " соглашение на работу с налоговой"
  agreement(incomeRegistration: Boolean!, taxPayment: Boolean!): Boolean!
    @Private
  removeContact(person: PersonInput, contact: ContactInput): Boolean! @Private
  reqToPartner: Boolean!
}

extend type Subscription {
  parsePersonSub: RecognizedFields! @Private
  personSub: Person @Private
}
`, BuiltIn: false},
	{Name: "internal/schema/roles.graphql", Input: `enum TypeRole {
  system
  organizationManager
  groupManager
  objectManager
}

input PermissionInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Permission") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  object: String
  insert: Boolean
  read: Boolean
  update: Boolean
  delete: Boolean
}

type Permission
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Permission") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  object: String
  insert: Boolean
  read: Boolean
  update: Boolean
  delete: Boolean
}

input RoleInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Role") {
  uuid: UUID
  isDeleted: Boolean
  name: String
  organization: OrganizationInput
  roleType: TypeRole
  permissions: [PermissionInput]
}

type Role @goModel(model: "github.com/sphera-erp/sphera/internal/models.Role") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  name: String
  organization: Organization
  roleType: TypeRole
  permissions: [Permission]
}

extend type Query {
  role(role: RoleInput): Role @Private
  roles(role: RoleInput, offset: Int, limit: Int): [Role] @Private
}

extend type Mutation {
  roleMutation(role: RoleInput): Role @Private
}
`, BuiltIn: false},
	{Name: "internal/schema/schema.graphql", Input: `scalar UUID @goModel(model: "github.com/sphera-erp/sphera/internal/models.UUID")
scalar Upload
scalar DateTime
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.DateTime")
scalar Duration
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.Duration")

scalar Date @goModel(model: "github.com/sphera-erp/sphera/internal/models.Date")
scalar Time @goModel(model: "github.com/sphera-erp/sphera/internal/models.Time")
scalar JSON @goModel(model: "github.com/sphera-erp/sphera/internal/models.JSON")

enum SortOrder
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.SortOrder") {
  ASC
  DESC
}

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @HasAccess(attributes: ResourceAttributes!) on FIELD_DEFINITION
directive @Private on FIELD_DEFINITION

"Права"
input ResourceAttributes
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/directives.ResourceAttributes"
  ) {
  resource: String
  role: String
  mode: String
}

type Query {
  ping(id: String): String
}

type Mutation {
  ping: String
}

type Subscription {
  pingSub(id: String): String
}
`, BuiltIn: false},
	{Name: "internal/schema/users.graphql", Input: `enum UserType
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.UserType") {
  SelfEmployed
  SystemUser
}

enum UserSortableField
  @goModel(
    model: "github.com/sphera-erp/sphera/internal/models.UserSortableField"
  ) {
  uuid
  created
  updated
}

enum ClientType {
  mobile
  web
  director
}

input UserSort
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.UserSort") {
  field: UserSortableField
  order: SortOrder = ASC
}

input UserFilter
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.UserFilter") {
  created: DateTimeFilter
  updated: DateTimeFilter
  person: PersonFilter
  contact: ContactFilter
  isDeleted: Boolean
  isBlocked: Boolean
  isDisabled: Boolean
  and: [UserFilter]
  or: [UserFilter]
  not: UserFilter
}

input UserInput
  @goModel(model: "github.com/sphera-erp/sphera/internal/models.User") {
  uuid: UUID
  isDeleted: Boolean
  isBlocked: Boolean
  isDisabled: Boolean
  contact: ContactInput
  person: PersonInput
  userType: UserType
  organization: OrganizationInput
  groups: [OrganizationInput]
  objects: [OrganizationInput]
  role: RoleInput
}

type User @goModel(model: "github.com/sphera-erp/sphera/internal/models.User") {
  uuid: UUID
  created: DateTime
  updated: DateTime
  isDeleted: Boolean
  isBlocked: Boolean
  isDisabled: Boolean
  contact: Contact
  person: Person
  userType: UserType
  organization: Organization
  groups: [Organization]
  objects: [Organization]
  role: Role
}

extend type Query {
  "Запрос на аутентификацию пользователя"
  authUserByPhone(phone: String!, client: ClientType): String
  "Запрос на регистрацию пользователя"
  regUserByPhone(phone: String!): String
  "Получить текущего пользователя"
  getCurrentUser: User @Private
  user(user: UserInput): User @Private
  users(
    user: UserInput
    filter: UserFilter
    sort: [UserSort!]
    offset: Int
    limit: Int
  ): [User] @Private
  usersByObject(
    object: OrganizationInput
    user: UserInput
    filter: UserFilter
    sort: [UserSort!]
    offset: Int
    limit: Int
  ): [User] @Private
  userLocation(lat: Float, lon: Float): Boolean @Private
}

extend type Mutation {
  "Валидация пользователя в системе"
  validate(pincode: String!): String @Private
  "работа с пользователями"
  userMutation(user: UserInput): User @Private
  resetUser(phone: String): Boolean! @Private
  updateToken(token: String!): Boolean! @Private
}

extend type Subscription {
  userSub: User @Private
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_HasAccess_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 directives.ResourceAttributes
	if tmp, ok := rawArgs["attributes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attributes"))
		arg0, err = ec.unmarshalNResourceAttributes2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋdirectivesᚐResourceAttributes(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attributes"] = arg0
	return args, nil
}

func (ec *executionContext) field_LocalityJobCost_created_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["start"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["stop"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stop"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stop"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_JobFlowMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.JobFlow
	if tmp, ok := rawArgs["jobFlow"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobFlow"))
		arg0, err = ec.unmarshalOJobFlowInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFlow(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobFlow"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addMsg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg1
	var arg2 []*models.Content
	if tmp, ok := rawArgs["content"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
		arg2, err = ec.unmarshalOContentInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["content"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_addToBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalNOrganizationInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	var arg1 float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg1, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addressMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Address
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg0, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_agreeToJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *models.User
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg1, err = ec.unmarshalOUserInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_agreement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["incomeRegistration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incomeRegistration"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["incomeRegistration"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["taxPayment"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxPayment"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["taxPayment"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_areaMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Area
	if tmp, ok := rawArgs["area"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
		arg0, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["area"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_brokenJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["reason"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reason"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["reason"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reason"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_candidateMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Candidate
	if tmp, ok := rawArgs["candidate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate"))
		arg0, err = ec.unmarshalOCandidateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["candidate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changeStatusJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *models.Status
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalOStatusInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *float64
	if tmp, ok := rawArgs["lat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
		arg1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lat"] = arg1
	var arg2 *float64
	if tmp, ok := rawArgs["lon"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
		arg2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lon"] = arg2
	var arg3 *models.User
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg3, err = ec.unmarshalOUserInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_cityDistrictMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.CityDistrict
	if tmp, ok := rawArgs["cityDistrict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
		arg0, err = ec.unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cityDistrict"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cityMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.City
	if tmp, ok := rawArgs["city"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
		arg0, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["city"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_closeJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["percentagePayment"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentagePayment"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["percentagePayment"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_conflictOnJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["reason"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reason"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_contactMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
		arg0, err = ec.unmarshalOContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contactTypeMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ContactType
	if tmp, ok := rawArgs["contactType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactType"))
		arg0, err = ec.unmarshalOContactTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_countryMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Country
	if tmp, ok := rawArgs["country"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
		arg0, err = ec.unmarshalOCountryInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["country"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_courseMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Course
	if tmp, ok := rawArgs["course"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course"))
		arg0, err = ec.unmarshalOCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["course"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_dropOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_endJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	var arg1 *float64
	if tmp, ok := rawArgs["rating"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
		arg1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rating"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["ratingDescription"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ratingDescription"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ratingDescription"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_excludePersonInObject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	var arg1 uuid.UUID
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg1, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_excludePerson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	var arg1 uuid.UUID
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg1, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_jobMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_jobTemplateMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.JobTemplate
	if tmp, ok := rawArgs["jobTemplate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTemplate"))
		arg0, err = ec.unmarshalOJobTemplateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobTemplate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_jobTypeMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.JobType
	if tmp, ok := rawArgs["jobType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobType"))
		arg0, err = ec.unmarshalOJobTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_localityJobCostMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.LocalityJobCost
	if tmp, ok := rawArgs["localityJobCost"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localityJobCost"))
		arg0, err = ec.unmarshalOLocalityJobCostInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["localityJobCost"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_massCreationJobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.JobTemplate
	if tmp, ok := rawArgs["jobTemplate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTemplate"))
		arg0, err = ec.unmarshalNJobTemplateInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobTemplate"] = arg0
	var arg1 []models.Organization
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg1, err = ec.unmarshalOOrganizationInput2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg1
	var arg2 []*time.Time
	if tmp, ok := rawArgs["Dates"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Dates"))
		arg2, err = ec.unmarshalODate2ᚕᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Dates"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_medicalBookMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.MedicalBook
	if tmp, ok := rawArgs["medicalBook"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("medicalBook"))
		arg0, err = ec.unmarshalOMedicalBookInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["medicalBook"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_movementMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Movement
	if tmp, ok := rawArgs["movement"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movement"))
		arg0, err = ec.unmarshalOMovementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["movement"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_multipleUpload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []graphql.Upload
	if tmp, ok := rawArgs["files"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files"))
		arg0, err = ec.unmarshalNUpload2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUploadᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["files"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["bucket"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucket"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bucket"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_nationalityMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Nationality
	if tmp, ok := rawArgs["nationality"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nationality"))
		arg0, err = ec.unmarshalONationalityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nationality"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_onPlace_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *float64
	if tmp, ok := rawArgs["lat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
		arg1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lat"] = arg1
	var arg2 *float64
	if tmp, ok := rawArgs["lon"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
		arg2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lon"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationContactMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrganizationContact
	if tmp, ok := rawArgs["organizationContact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationContact"))
		arg0, err = ec.unmarshalOOrganizationContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationContact"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPositionMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrganizationPosition
	if tmp, ok := rawArgs["organizationPosition"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationPosition"))
		arg0, err = ec.unmarshalOOrganizationPositionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationPosition"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_parseAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["rawAddress"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rawAddress"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rawAddress"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_passportMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Passport
	if tmp, ok := rawArgs["passport"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passport"))
		arg0, err = ec.unmarshalOPassportInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passport"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_personCourseMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.PersonCourse
	if tmp, ok := rawArgs["course"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course"))
		arg0, err = ec.unmarshalOPersonCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonCourse(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["course"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_personMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Person
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg0, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_personRatingMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.PersonRating
	if tmp, ok := rawArgs["personRating"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("personRating"))
		arg0, err = ec.unmarshalOPersonRatingInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["personRating"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_publishJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_readMsg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalNJobInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refuseJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["reason"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reason"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_regionMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Region
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg0, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rejectPerson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *models.Person
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg1, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["reason"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reason"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_removeContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Person
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg0, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg0
	var arg1 *models.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
		arg1, err = ec.unmarshalOContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removeParent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_roleMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalORoleInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_runJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setJobRating_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 float64
	if tmp, ok := rawArgs["rating"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
		arg1, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rating"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_settlementMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Settlement
	if tmp, ok := rawArgs["settlement"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
		arg0, err = ec.unmarshalOSettlementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["settlement"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_singleUpload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["bucket"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucket"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bucket"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_statusMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Status
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg0, err = ec.unmarshalOStatusInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_streetMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Street
	if tmp, ok := rawArgs["street"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("street"))
		arg0, err = ec.unmarshalOStreetInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["street"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tagMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Tag
	if tmp, ok := rawArgs["tag"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
		arg0, err = ec.unmarshalOTagInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tag"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userMutation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.User
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg0, err = ec.unmarshalOUserInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_validate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pincode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pincode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pincode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_JobFlow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.JobFlow
	if tmp, ok := rawArgs["jobFlow"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobFlow"))
		arg0, err = ec.unmarshalOJobFlowInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFlow(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobFlow"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_activeJobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *models.JobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOJobFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []models.JobSort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOJobSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobSortᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_address_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Address
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg0, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_addresses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Address
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg0, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_area_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Area
	if tmp, ok := rawArgs["area"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
		arg0, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["area"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_areas_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Area
	if tmp, ok := rawArgs["area"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
		arg0, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["area"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_authUserByPhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	var arg1 *models.ClientType
	if tmp, ok := rawArgs["client"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("client"))
		arg1, err = ec.unmarshalOClientType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐClientType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["client"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_candidate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Candidate
	if tmp, ok := rawArgs["candidate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate"))
		arg0, err = ec.unmarshalOCandidateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["candidate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_candidates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Candidate
	if tmp, ok := rawArgs["candidate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate"))
		arg0, err = ec.unmarshalOCandidateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["candidate"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_cities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.City
	if tmp, ok := rawArgs["city"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
		arg0, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["city"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_cityDistrict_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.CityDistrict
	if tmp, ok := rawArgs["cityDistrict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
		arg0, err = ec.unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cityDistrict"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cityDistricts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.CityDistrict
	if tmp, ok := rawArgs["cityDistrict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
		arg0, err = ec.unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cityDistrict"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_city_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.City
	if tmp, ok := rawArgs["city"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
		arg0, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["city"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contactType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ContactType
	if tmp, ok := rawArgs["contactType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactType"))
		arg0, err = ec.unmarshalOContactTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contactTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ContactType
	if tmp, ok := rawArgs["contactType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactType"))
		arg0, err = ec.unmarshalOContactTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactType"] = arg0
	var arg1 *models.ContactTypeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOContactTypeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactTypeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_contact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
		arg0, err = ec.unmarshalNContactInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
		arg0, err = ec.unmarshalOContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg0
	var arg1 *models.ContactFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOContactFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_countries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Country
	if tmp, ok := rawArgs["country"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
		arg0, err = ec.unmarshalOCountryInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["country"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_country_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Country
	if tmp, ok := rawArgs["country"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
		arg0, err = ec.unmarshalOCountryInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["country"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_course_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Course
	if tmp, ok := rawArgs["course"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course"))
		arg0, err = ec.unmarshalOCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["course"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_courses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Course
	if tmp, ok := rawArgs["course"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course"))
		arg0, err = ec.unmarshalOCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["course"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_endJobRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *float64
	if tmp, ok := rawArgs["lat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
		arg1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lat"] = arg1
	var arg2 *float64
	if tmp, ok := rawArgs["lon"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
		arg2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lon"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_flowBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalNOrganizationInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["until"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("until"))
		arg1, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["until"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getOrganizationRating_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPersonRating_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.Person
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg0, err = ec.unmarshalNPersonInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_jobTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.JobTemplate
	if tmp, ok := rawArgs["jobTemplate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTemplate"))
		arg0, err = ec.unmarshalOJobTemplateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobTemplate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_jobTemplates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.JobTemplate
	if tmp, ok := rawArgs["jobTemplate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTemplate"))
		arg0, err = ec.unmarshalOJobTemplateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobTemplate"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_jobType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.JobType
	if tmp, ok := rawArgs["jobType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobType"))
		arg0, err = ec.unmarshalOJobTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_jobTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.JobType
	if tmp, ok := rawArgs["jobType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobType"))
		arg0, err = ec.unmarshalOJobTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobType"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_job_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_jobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *models.JobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOJobFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []models.JobSort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOJobSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobSortᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_localityJobCost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.LocalityJobCost
	if tmp, ok := rawArgs["localityJobCost"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localityJobCost"))
		arg0, err = ec.unmarshalOLocalityJobCostInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["localityJobCost"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_localityJobCosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.LocalityJobCost
	if tmp, ok := rawArgs["localityJobCost"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localityJobCost"))
		arg0, err = ec.unmarshalOLocalityJobCostInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["localityJobCost"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_medicalBook_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.MedicalBook
	if tmp, ok := rawArgs["medicalBook"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("medicalBook"))
		arg0, err = ec.unmarshalNMedicalBookInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["medicalBook"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_medicalBooks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.MedicalBook
	if tmp, ok := rawArgs["medicalBook"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("medicalBook"))
		arg0, err = ec.unmarshalOMedicalBookInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["medicalBook"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_movement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Movement
	if tmp, ok := rawArgs["movement"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movement"))
		arg0, err = ec.unmarshalOMovementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["movement"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_movements_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Movement
	if tmp, ok := rawArgs["movement"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movement"))
		arg0, err = ec.unmarshalOMovementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["movement"] = arg0
	var arg1 *models.MovementFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOMovementFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovementFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_nationalities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Nationality
	if tmp, ok := rawArgs["nationality"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nationality"))
		arg0, err = ec.unmarshalONationalityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nationality"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_nationality_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Nationality
	if tmp, ok := rawArgs["nationality"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nationality"))
		arg0, err = ec.unmarshalONationalityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nationality"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrganizationContact
	if tmp, ok := rawArgs["organizationContact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationContact"))
		arg0, err = ec.unmarshalOOrganizationContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationContact"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationContacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrganizationContact
	if tmp, ok := rawArgs["organizationContact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationContact"))
		arg0, err = ec.unmarshalOOrganizationContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationContact"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_organizationPosition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrganizationPosition
	if tmp, ok := rawArgs["organizationPosition"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationPosition"))
		arg0, err = ec.unmarshalOOrganizationPositionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationPosition"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationPositions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrganizationPosition
	if tmp, ok := rawArgs["organizationPosition"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationPosition"))
		arg0, err = ec.unmarshalOOrganizationPositionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationPosition"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_organization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_parsePerson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graphql.Upload
	if tmp, ok := rawArgs["photo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo"))
		arg0, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["photo"] = arg0
	var arg1 *graphql.Upload
	if tmp, ok := rawArgs["passport"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passport"))
		arg1, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passport"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_passport_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.Passport
	if tmp, ok := rawArgs["passport"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passport"))
		arg0, err = ec.unmarshalNPassportInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passport"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_passports_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Passport
	if tmp, ok := rawArgs["passport"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passport"))
		arg0, err = ec.unmarshalOPassportInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passport"] = arg0
	var arg1 *models.PassportFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOPassportFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassportFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []models.PassportSort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOPassportSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassportSortᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_personCourses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.PersonCourse
	if tmp, ok := rawArgs["course"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course"))
		arg0, err = ec.unmarshalOPersonCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonCourse(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["course"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_personRating_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.PersonRating
	if tmp, ok := rawArgs["personRating"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("personRating"))
		arg0, err = ec.unmarshalOPersonRatingInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["personRating"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_personRatings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.PersonRating
	if tmp, ok := rawArgs["personRating"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("personRating"))
		arg0, err = ec.unmarshalOPersonRatingInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["personRating"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_person_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.Person
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg0, err = ec.unmarshalNPersonInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_persons_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Person
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg0, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg0
	var arg1 *models.PersonFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []models.PersonSort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOPersonSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonSortᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ping_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_regUserByPhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_region_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Region
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg0, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_regions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Region
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg0, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_role_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalORoleInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalORoleInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_runJobRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Job
	if tmp, ok := rawArgs["job"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
		arg0, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job"] = arg0
	var arg1 *float64
	if tmp, ok := rawArgs["lat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
		arg1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lat"] = arg1
	var arg2 *float64
	if tmp, ok := rawArgs["lon"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
		arg2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lon"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_settlement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Settlement
	if tmp, ok := rawArgs["settlement"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
		arg0, err = ec.unmarshalOSettlementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["settlement"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_settlements_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Settlement
	if tmp, ok := rawArgs["settlement"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
		arg0, err = ec.unmarshalOSettlementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["settlement"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_statistics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["organization"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organization"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_status_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Status
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg0, err = ec.unmarshalOStatusInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_statuses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Status
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg0, err = ec.unmarshalOStatusInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_street_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Street
	if tmp, ok := rawArgs["street"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("street"))
		arg0, err = ec.unmarshalOStreetInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["street"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_streets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Street
	if tmp, ok := rawArgs["street"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("street"))
		arg0, err = ec.unmarshalOStreetInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["street"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_tag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Tag
	if tmp, ok := rawArgs["tag"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
		arg0, err = ec.unmarshalOTagInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tag"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Tag
	if tmp, ok := rawArgs["tag"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
		arg0, err = ec.unmarshalOTagInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tag"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_userLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *float64
	if tmp, ok := rawArgs["lat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
		arg0, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lat"] = arg0
	var arg1 *float64
	if tmp, ok := rawArgs["lon"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
		arg1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lon"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_userMsg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Status
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg0, err = ec.unmarshalOStatusInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.User
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg0, err = ec.unmarshalOUserInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_usersByObject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.Organization
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *models.User
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg1, err = ec.unmarshalOUserInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg1
	var arg2 *models.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []models.UserSort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOUserSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSortᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg5, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.User
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg0, err = ec.unmarshalOUserInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg0
	var arg1 *models.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []models.UserSort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOUserSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSortᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_validateINN_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["inn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inn"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inn"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_pingSub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Address_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_formattedAddress(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormattedAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_country(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_region(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_area(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_city(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_cityDistrict(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CityDistrict)
	fc.Result = res
	return ec.marshalOCityDistrict2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_settlement(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settlement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Settlement)
	fc.Result = res
	return ec.marshalOSettlement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_street(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Street)
	fc.Result = res
	return ec.marshalOStreet2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_house(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.House, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_block(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Block, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_flat(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_lat(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_lon(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_person(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_organization(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_created(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_updated(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Area_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Area) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Area_region(ctx context.Context, field graphql.CollectedField, obj *models.Area) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _Area_name(ctx context.Context, field graphql.CollectedField, obj *models.Area) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Area_created(ctx context.Context, field graphql.CollectedField, obj *models.Area) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Area_updated(ctx context.Context, field graphql.CollectedField, obj *models.Area) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Area_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Area) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_created(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_updated(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_organization(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_amount(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_movement(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Movement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Movement)
	fc.Result = res
	return ec.marshalOMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx, field.Selections, res)
}

func (ec *executionContext) _Candidate_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Candidate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Candidate_created(ctx context.Context, field graphql.CollectedField, obj *models.Candidate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Candidate_updated(ctx context.Context, field graphql.CollectedField, obj *models.Candidate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Candidate_person(ctx context.Context, field graphql.CollectedField, obj *models.Candidate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Candidate_job(ctx context.Context, field graphql.CollectedField, obj *models.Candidate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Candidate_candidateTag(ctx context.Context, field graphql.CollectedField, obj *models.Candidate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CandidateTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CandidateTags)
	fc.Result = res
	return ec.marshalOCandidateTags2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidateTags(ctx, field.Selections, res)
}

func (ec *executionContext) _Candidate_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Candidate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _City_uuid(ctx context.Context, field graphql.CollectedField, obj *models.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _City_region(ctx context.Context, field graphql.CollectedField, obj *models.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _City_area(ctx context.Context, field graphql.CollectedField, obj *models.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _City_name(ctx context.Context, field graphql.CollectedField, obj *models.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _City_created(ctx context.Context, field graphql.CollectedField, obj *models.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _City_updated(ctx context.Context, field graphql.CollectedField, obj *models.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _City_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CityDistrict_uuid(ctx context.Context, field graphql.CollectedField, obj *models.CityDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CityDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _CityDistrict_region(ctx context.Context, field graphql.CollectedField, obj *models.CityDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CityDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _CityDistrict_area(ctx context.Context, field graphql.CollectedField, obj *models.CityDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CityDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _CityDistrict_city(ctx context.Context, field graphql.CollectedField, obj *models.CityDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CityDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _CityDistrict_name(ctx context.Context, field graphql.CollectedField, obj *models.CityDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CityDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CityDistrict_created(ctx context.Context, field graphql.CollectedField, obj *models.CityDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CityDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CityDistrict_updated(ctx context.Context, field graphql.CollectedField, obj *models.CityDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CityDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CityDistrict_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.CityDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CityDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Contact_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Contact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Contact_created(ctx context.Context, field graphql.CollectedField, obj *models.Contact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Contact_updated(ctx context.Context, field graphql.CollectedField, obj *models.Contact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Contact_person(ctx context.Context, field graphql.CollectedField, obj *models.Contact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Contact_organization(ctx context.Context, field graphql.CollectedField, obj *models.Contact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Contact_contactType(ctx context.Context, field graphql.CollectedField, obj *models.Contact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ContactType)
	fc.Result = res
	return ec.marshalOContactType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, field.Selections, res)
}

func (ec *executionContext) _Contact_presentation(ctx context.Context, field graphql.CollectedField, obj *models.Contact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Presentation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Contact_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Contact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactType_uuid(ctx context.Context, field graphql.CollectedField, obj *models.ContactType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactType_created(ctx context.Context, field graphql.CollectedField, obj *models.ContactType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactType_updated(ctx context.Context, field graphql.CollectedField, obj *models.ContactType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactType_name(ctx context.Context, field graphql.CollectedField, obj *models.ContactType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactType_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.ContactType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_bucket(ctx context.Context, field graphql.CollectedField, obj *models.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_name(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_created(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_updated(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_created(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_updated(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_name(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_courseType(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.CourseType)
	fc.Result = res
	return ec.marshalOCourseType2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourseType(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_content(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_organization(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Course_passingScore(ctx context.Context, field graphql.CollectedField, obj *models.Course) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InfoAboutJob_workerOrder(ctx context.Context, field graphql.CollectedField, obj *models.InfoAboutJob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InfoAboutJob",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkerOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.WorkerOrder)
	fc.Result = res
	return ec.marshalOWorkerOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐWorkerOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _InfoAboutJob_courses(ctx context.Context, field graphql.CollectedField, obj *models.InfoAboutJob) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InfoAboutJob",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Courses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Course)
	fc.Result = res
	return ec.marshalOCourse2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_created(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_updated(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_name(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_date(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_startTime(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_endTime(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_duration(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_cost(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_object(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Object, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_jobTemplate(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobTemplate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobTemplate)
	fc.Result = res
	return ec.marshalOJobTemplate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_jobType(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobType)
	fc.Result = res
	return ec.marshalOJobType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_description(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_isHot(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_published(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_status(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobStatus)
	fc.Result = res
	return ec.marshalOJobStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_candidates(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Candidates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Candidate)
	fc.Result = res
	return ec.marshalOCandidate2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_executor(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Executor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_statuses(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statuses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_rating(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_ratingDescription(ctx context.Context, field graphql.CollectedField, obj *models.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_uuid(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_created(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_updated(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_organization(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_jobType(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobType)
	fc.Result = res
	return ec.marshalOJobType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_scriptType(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScriptType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ScriptType)
	fc.Result = res
	return ec.marshalOScriptType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐScriptType(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_diff(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Diff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _JobFlow_script(ctx context.Context, field graphql.CollectedField, obj *models.JobFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobFlow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Script, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_uuid(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_name(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_created(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_updated(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_organization(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_object(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Object, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_region(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_area(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_city(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_jobType(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobType)
	fc.Result = res
	return ec.marshalOJobType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_cost(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_date(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_startTime(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_endTime(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_duration(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_description(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_published(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobTemplate_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.JobTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_uuid(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_created(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_updated(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_icon(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobTypeIcon)
	fc.Result = res
	return ec.marshalOJobTypeIcon2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTypeIcon(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_organization(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_name(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_localityJobCost(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocalityJobCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LocalityJobCost)
	fc.Result = res
	return ec.marshalOLocalityJobCost2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_courses(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Courses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Course)
	fc.Result = res
	return ec.marshalOCourse2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _JobType_needMedicalBook(ctx context.Context, field graphql.CollectedField, obj *models.JobType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedMedicalBook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_uuid(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_created(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_LocalityJobCost_created_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_updated(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_organization(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_country(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_region(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_area(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_city(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_cityDistrict(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CityDistrict)
	fc.Result = res
	return ec.marshalOCityDistrict2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_settlement(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settlement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Settlement)
	fc.Result = res
	return ec.marshalOSettlement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_maxCost(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalityJobCost_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.LocalityJobCost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalityJobCost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_uuid(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_number(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_medicalExaminationDate(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MedicalExaminationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_contents(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Content)
	fc.Result = res
	return ec.marshalOContent2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_person(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_created(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_updated(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_haveHealthRestrictions(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HaveHealthRestrictions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_haveMedicalBook(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HaveMedicalBook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_descriptionHealthRestrictions(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionHealthRestrictions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_checked(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_checkedDate(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalBook_checkedPerson(ctx context.Context, field graphql.CollectedField, obj *models.MedicalBook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalBook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckedPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_created(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_updated(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_organization(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_direct(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Direct)
	fc.Result = res
	return ec.marshalODirect2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDirect(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_destination(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DestinationMovement)
	fc.Result = res
	return ec.marshalODestinationMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDestinationMovement(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_person(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_job(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_amount(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Movement_link(ctx context.Context, field graphql.CollectedField, obj *models.Movement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgStat_job(ctx context.Context, field graphql.CollectedField, obj *models.MsgStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgStat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgStat_person(ctx context.Context, field graphql.CollectedField, obj *models.MsgStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgStat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgStat_reading(ctx context.Context, field graphql.CollectedField, obj *models.MsgStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgStat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reading, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ping(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Ping(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_movementMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_movementMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MovementMutation(rctx, args["movement"].(*models.Movement))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Movement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Movement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Movement)
	fc.Result = res
	return ec.marshalOMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addToBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addToBalance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddToBalance(rctx, args["organization"].(models.Organization), args["amount"].(float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_parseAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_parseAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ParseAddress(rctx, args["rawAddress"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_countryMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_countryMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CountryMutation(rctx, args["country"].(*models.Country))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Country); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Country`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_regionMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_regionMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegionMutation(rctx, args["region"].(*models.Region))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Region); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Region`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_areaMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_areaMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AreaMutation(rctx, args["area"].(*models.Area))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Area); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Area`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cityMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cityMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CityMutation(rctx, args["city"].(*models.City))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.City); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.City`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cityDistrictMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cityDistrictMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CityDistrictMutation(rctx, args["cityDistrict"].(*models.CityDistrict))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.CityDistrict); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.CityDistrict`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CityDistrict)
	fc.Result = res
	return ec.marshalOCityDistrict2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_settlementMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_settlementMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SettlementMutation(rctx, args["settlement"].(*models.Settlement))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Settlement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Settlement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Settlement)
	fc.Result = res
	return ec.marshalOSettlement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_streetMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_streetMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().StreetMutation(rctx, args["street"].(*models.Street))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Street); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Street`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Street)
	fc.Result = res
	return ec.marshalOStreet2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addressMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addressMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddressMutation(rctx, args["address"].(*models.Address))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Address); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Address`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_contactMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_contactMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ContactMutation(rctx, args["contact"].(*models.Contact))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Contact); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Contact`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_contactTypeMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_contactTypeMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ContactTypeMutation(rctx, args["contactType"].(*models.ContactType))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ContactType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.ContactType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ContactType)
	fc.Result = res
	return ec.marshalOContactType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_JobFlowMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_JobFlowMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().JobFlowMutation(rctx, args["jobFlow"].(*models.JobFlow))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.JobFlow); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.JobFlow`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobFlow)
	fc.Result = res
	return ec.marshalOJobFlow2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFlow(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_publishJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_publishJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PublishJob(rctx, args["job"].(*models.Job))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_agreeToJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_agreeToJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AgreeToJob(rctx, args["job"].(*models.Job), args["user"].(*models.User))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.InfoAboutJob); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.InfoAboutJob`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.InfoAboutJob)
	fc.Result = res
	return ec.marshalOInfoAboutJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐInfoAboutJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_refuseJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_refuseJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RefuseJob(rctx, args["job"].(*models.Job), args["reason"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().Check(rctx, args["job"].(*models.Job), args["lat"].(*float64), args["lon"].(*float64), args["user"].(*models.User))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_onPlace(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_onPlace_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OnPlace(rctx, args["job"].(*models.Job), args["lat"].(*float64), args["lon"].(*float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_conflictOnJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_conflictOnJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ConflictOnJob(rctx, args["job"].(*models.Job), args["reason"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_changeStatusJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_changeStatusJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangeStatusJob(rctx, args["job"].(*models.Job), args["status"].(*models.Status))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cancelJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cancelJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CancelJob(rctx, args["job"].(*models.Job), args["reason"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_rejectPerson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_rejectPerson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RejectPerson(rctx, args["job"].(*models.Job), args["person"].(*models.Person), args["reason"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_brokenJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_brokenJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BrokenJob(rctx, args["job"].(*models.Job), args["reason"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_closeJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_closeJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CloseJob(rctx, args["job"].(*models.Job), args["percentagePayment"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_runJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_runJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RunJob(rctx, args["code"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_endJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_endJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EndJob(rctx, args["code"].(*string), args["rating"].(*float64), args["ratingDescription"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PersonRating); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.PersonRating`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PersonRating)
	fc.Result = res
	return ec.marshalNPersonRating2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addMsg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addMsg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddMsg(rctx, args["job"].(*models.Job), args["description"].(string), args["content"].([]*models.Content))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_readMsg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_readMsg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReadMsg(rctx, args["job"].(models.Job))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_courseMutate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_courseMutate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CourseMutate(rctx, args["course"].(*models.Course))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Course); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Course`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Course)
	fc.Result = res
	return ec.marshalOCourse2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_localityJobCostMutate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_localityJobCostMutate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LocalityJobCostMutate(rctx, args["localityJobCost"].(*models.LocalityJobCost))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.LocalityJobCost); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.LocalityJobCost`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.LocalityJobCost)
	fc.Result = res
	return ec.marshalOLocalityJobCost2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_jobTypeMutate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_jobTypeMutate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().JobTypeMutate(rctx, args["jobType"].(*models.JobType))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.JobType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.JobType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobType)
	fc.Result = res
	return ec.marshalOJobType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_jobTemplateMutate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_jobTemplateMutate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().JobTemplateMutate(rctx, args["jobTemplate"].(*models.JobTemplate))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.JobTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.JobTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobTemplate)
	fc.Result = res
	return ec.marshalOJobTemplate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_jobMutate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_jobMutate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().JobMutate(rctx, args["job"].(*models.Job))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Job); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Job`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_candidateMutate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_candidateMutate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CandidateMutate(rctx, args["candidate"].(*models.Candidate))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Candidate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Candidate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Candidate)
	fc.Result = res
	return ec.marshalOCandidate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_statusMutate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_statusMutate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().StatusMutate(rctx, args["status"].(*models.Status))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Status); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Status`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_tagMutate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_tagMutate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TagMutate(rctx, args["tag"].(*models.Tag))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Tag); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Tag`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_massCreationJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_massCreationJobs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MassCreationJobs(rctx, args["jobTemplate"].(models.JobTemplate), args["objects"].([]models.Organization), args["Dates"].([]*time.Time))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setJobRating(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setJobRating_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetJobRating(rctx, args["job"].(uuid.UUID), args["rating"].(float64), args["description"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_medicalBookMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_medicalBookMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MedicalBookMutation(rctx, args["medicalBook"].(*models.MedicalBook))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.MedicalBook); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.MedicalBook`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MedicalBook)
	fc.Result = res
	return ec.marshalOMedicalBook2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_nationalityMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_nationalityMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().NationalityMutation(rctx, args["nationality"].(*models.Nationality))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Nationality); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Nationality`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Nationality)
	fc.Result = res
	return ec.marshalONationality2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_singleUpload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_singleUpload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SingleUpload(rctx, args["file"].(graphql.Upload), args["bucket"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/google/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_multipleUpload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_multipleUpload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MultipleUpload(rctx, args["files"].([]graphql.Upload), args["bucket"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/google/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_organizationPositionMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_organizationPositionMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPositionMutation(rctx, args["organizationPosition"].(*models.OrganizationPosition))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OrganizationPosition); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.OrganizationPosition`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationPosition)
	fc.Result = res
	return ec.marshalOOrganizationPosition2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_organizationContactMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_organizationContactMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationContactMutation(rctx, args["organizationContact"].(*models.OrganizationContact))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OrganizationContact); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.OrganizationContact`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationContact)
	fc.Result = res
	return ec.marshalOOrganizationContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_organizationMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_organizationMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationMutation(rctx, args["organization"].(*models.Organization))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_excludePerson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_excludePerson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ExcludePerson(rctx, args["organization"].(uuid.UUID), args["person"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_excludePersonInObject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_excludePersonInObject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ExcludePersonInObject(rctx, args["organization"].(uuid.UUID), args["person"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_dropOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_dropOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DropOrganization(rctx, args["organization"].(*models.Organization))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeParent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeParent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveParent(rctx, args["organization"].(*models.Organization))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_passportMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_passportMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PassportMutation(rctx, args["passport"].(*models.Passport))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Passport); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Passport`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Passport)
	fc.Result = res
	return ec.marshalOPassport2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_personMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_personMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PersonMutation(rctx, args["person"].(*models.Person))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Person); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Person`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_personCourseMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_personCourseMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PersonCourseMutation(rctx, args["course"].(*models.PersonCourse))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PersonCourse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.PersonCourse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PersonCourse)
	fc.Result = res
	return ec.marshalOPersonCourse2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonCourse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_personRatingMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_personRatingMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PersonRatingMutation(rctx, args["personRating"].(*models.PersonRating))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PersonRating); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.PersonRating`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PersonRating)
	fc.Result = res
	return ec.marshalOPersonRating2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_agreement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_agreement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().Agreement(rctx, args["incomeRegistration"].(bool), args["taxPayment"].(bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeContact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveContact(rctx, args["person"].(*models.Person), args["contact"].(*models.Contact))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_reqToPartner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReqToPartner(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_roleMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_roleMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RoleMutation(rctx, args["role"].(*models.Role))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Role); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Role`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Role)
	fc.Result = res
	return ec.marshalORole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_validate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_validate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().Validate(rctx, args["pincode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_userMutation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserMutation(rctx, args["user"].(*models.User))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ResetUser(rctx, args["phone"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateToken(rctx, args["token"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Nationality_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Nationality) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nationality",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Nationality_created(ctx context.Context, field graphql.CollectedField, obj *models.Nationality) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nationality",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Nationality_updated(ctx context.Context, field graphql.CollectedField, obj *models.Nationality) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nationality",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Nationality_name(ctx context.Context, field graphql.CollectedField, obj *models.Nationality) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nationality",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Nationality_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Nationality) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nationality",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_created(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_updated(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_isGroup(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_name(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_inn(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.INN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_kpp(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KPP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_addressLegal(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLegal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_addressFact(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressFact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_parent(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_parentOrganization(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentOrganization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_departments(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Departments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_logo(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Content)
	fc.Result = res
	return ec.marshalOContent2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_prefix(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_fullName(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_shortName(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_fee(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_firstReserveReward(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstReserveReward, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_secondReserveReward(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondReserveReward, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_persons(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Persons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_stDistance(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_stTime(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖtimeᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_uuid(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_created(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_updated(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_position(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationPosition)
	fc.Result = res
	return ec.marshalOOrganizationPosition2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_person(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPosition_uuid(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationPosition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPosition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPosition_created(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationPosition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPosition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPosition_updated(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationPosition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPosition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPosition_name(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationPosition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPosition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPosition_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationPosition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPosition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_serial(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Serial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_number(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_departmentCode(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_department(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_dateIssue(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateIssue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_person(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_created(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_updated(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_scan(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Content)
	fc.Result = res
	return ec.marshalOContent2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_addressRegistration(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressRegistration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_photoRegistration(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoRegistration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Content)
	fc.Result = res
	return ec.marshalOContent2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Passport_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Passport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_created(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_updated(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_object(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Object, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_insert(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Insert, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_read(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Read, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_update(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Update, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_delete(ctx context.Context, field graphql.CollectedField, obj *models.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_created(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_updated(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_user(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_actualContact(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_contacts(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_passport(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Passport)
	fc.Result = res
	return ec.marshalOPassport2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_surname(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_name(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_patronymic(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patronymic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_birthDate(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BirthDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_gender(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Gender)
	fc.Result = res
	return ec.marshalOGender2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_country(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_inn(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.INN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_medicalBook(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MedicalBook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MedicalBook)
	fc.Result = res
	return ec.marshalOMedicalBook2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_photo(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Photo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Content)
	fc.Result = res
	return ec.marshalOContent2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_position(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationPosition)
	fc.Result = res
	return ec.marshalOOrganizationPosition2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_isContact(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_recognizeResult(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecognizeResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOJSON2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_distanceResult(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistanceResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOJSON2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_recognizedFields(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecognizedFields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedFields)
	fc.Result = res
	return ec.marshalORecognizedFields2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedFields(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_validated(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_rating(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_taxPayment(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_incomeRegistration(ctx context.Context, field graphql.CollectedField, obj *models.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncomeRegistration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonCourse_uuid(ctx context.Context, field graphql.CollectedField, obj *models.PersonCourse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonCourse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonCourse_created(ctx context.Context, field graphql.CollectedField, obj *models.PersonCourse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonCourse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonCourse_updated(ctx context.Context, field graphql.CollectedField, obj *models.PersonCourse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonCourse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonCourse_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.PersonCourse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonCourse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonCourse_person(ctx context.Context, field graphql.CollectedField, obj *models.PersonCourse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonCourse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonCourse_course(ctx context.Context, field graphql.CollectedField, obj *models.PersonCourse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonCourse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Course, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Course)
	fc.Result = res
	return ec.marshalOCourse2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonCourse_questions(ctx context.Context, field graphql.CollectedField, obj *models.PersonCourse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonCourse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Questions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonCourse_answers(ctx context.Context, field graphql.CollectedField, obj *models.PersonCourse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonCourse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonRating_uuid(ctx context.Context, field graphql.CollectedField, obj *models.PersonRating) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonRating",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonRating_created(ctx context.Context, field graphql.CollectedField, obj *models.PersonRating) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonRating",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonRating_updated(ctx context.Context, field graphql.CollectedField, obj *models.PersonRating) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonRating",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonRating_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.PersonRating) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonRating",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonRating_person(ctx context.Context, field graphql.CollectedField, obj *models.PersonRating) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonRating",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonRating_job(ctx context.Context, field graphql.CollectedField, obj *models.PersonRating) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonRating",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonRating_rating(ctx context.Context, field graphql.CollectedField, obj *models.PersonRating) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonRating",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonRating_description(ctx context.Context, field graphql.CollectedField, obj *models.PersonRating) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonRating",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonValidateStatus_passport(ctx context.Context, field graphql.CollectedField, obj *models.PersonValidateStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonValidateStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonValidateStatus_avatar(ctx context.Context, field graphql.CollectedField, obj *models.PersonValidateStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonValidateStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ping(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ping_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Ping(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_movement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_movement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Movement(rctx, args["movement"].(*models.Movement))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Movement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Movement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Movement)
	fc.Result = res
	return ec.marshalOMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_movements(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_movements_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Movements(rctx, args["movement"].(*models.Movement), args["filter"].(*models.MovementFilter), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Movement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Movement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Movement)
	fc.Result = res
	return ec.marshalOMovement2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_flowBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_flowBalance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().FlowBalance(rctx, args["organization"].(*models.Organization), args["from"].(*time.Time), args["to"].(*time.Time))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Balance); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Balance`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Balance)
	fc.Result = res
	return ec.marshalOBalance2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐBalance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBalance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetBalance(rctx, args["organization"].(models.Organization), args["until"].(*time.Time))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_statistics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_statistics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Statistics(rctx, args["organization"].(*models.Organization))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Stat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Stat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stat)
	fc.Result = res
	return ec.marshalOstat2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStat(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_country(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_country_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Country(rctx, args["country"].(*models.Country))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Country); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Country`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_countries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_countries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Countries(rctx, args["country"].(*models.Country), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Country); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Country`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_region(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_region_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Region(rctx, args["region"].(*models.Region))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Region); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Region`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_regions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_regions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Regions(rctx, args["region"].(*models.Region), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Region); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Region`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_area(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_area_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Area(rctx, args["area"].(*models.Area))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Area); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Area`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_areas(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_areas_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Areas(rctx, args["area"].(*models.Area), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Area); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Area`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_city(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_city_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().City(rctx, args["city"].(*models.City))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.City); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.City`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Cities(rctx, args["city"].(*models.City), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.City); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.City`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cityDistrict(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cityDistrict_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CityDistrict(rctx, args["cityDistrict"].(*models.CityDistrict))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.CityDistrict); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.CityDistrict`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CityDistrict)
	fc.Result = res
	return ec.marshalOCityDistrict2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cityDistricts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cityDistricts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CityDistricts(rctx, args["cityDistrict"].(*models.CityDistrict), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.CityDistrict); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.CityDistrict`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.CityDistrict)
	fc.Result = res
	return ec.marshalOCityDistrict2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_settlement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_settlement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Settlement(rctx, args["settlement"].(*models.Settlement))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Settlement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Settlement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Settlement)
	fc.Result = res
	return ec.marshalOSettlement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_settlements(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_settlements_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Settlements(rctx, args["settlement"].(*models.Settlement), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Settlement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Settlement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Settlement)
	fc.Result = res
	return ec.marshalOSettlement2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_street(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_street_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Street(rctx, args["street"].(*models.Street))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Street); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Street`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Street)
	fc.Result = res
	return ec.marshalOStreet2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_streets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_streets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Streets(rctx, args["street"].(*models.Street), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Street); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Street`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Street)
	fc.Result = res
	return ec.marshalOStreet2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_address(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_address_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Address(rctx, args["address"].(*models.Address))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Address); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Address`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_addresses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_addresses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Addresses(rctx, args["address"].(*models.Address), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Address); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Address`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_contact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_contact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Contact(rctx, args["contact"].(models.Contact))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Contact); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Contact`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_contacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_contacts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Contacts(rctx, args["contact"].(*models.Contact), args["filter"].(*models.ContactFilter), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Contact); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Contact`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_contactType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_contactType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContactType(rctx, args["contactType"].(*models.ContactType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ContactType)
	fc.Result = res
	return ec.marshalOContactType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_contactTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_contactTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ContactTypes(rctx, args["contactType"].(*models.ContactType), args["filter"].(*models.ContactTypeFilter), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ContactType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.ContactType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ContactType)
	fc.Result = res
	return ec.marshalOContactType2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_JobFlow(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_JobFlow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().JobFlow(rctx, args["jobFlow"].(*models.JobFlow))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.JobFlow); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.JobFlow`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobFlow)
	fc.Result = res
	return ec.marshalOJobFlow2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFlow(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_runJobRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_runJobRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RunJobRequest(rctx, args["job"].(*models.Job), args["lat"].(*float64), args["lon"].(*float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_endJobRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_endJobRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().EndJobRequest(rctx, args["job"].(*models.Job), args["lat"].(*float64), args["lon"].(*float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_signToHotJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SignToHotJob(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMsgStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMsgStats(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.MsgStat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.MsgStat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.MsgStat)
	fc.Result = res
	return ec.marshalOMsgStat2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMsgStat(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userMsg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userMsg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().UserMsg(rctx, args["status"].(*models.Status), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Status); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Status`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getTypeJobIcons(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetTypeJobIcons(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_course(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_course_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Course(rctx, args["course"].(*models.Course))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Course); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Course`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Course)
	fc.Result = res
	return ec.marshalOCourse2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_courses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_courses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Courses(rctx, args["course"].(*models.Course), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Course); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Course`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Course)
	fc.Result = res
	return ec.marshalOCourse2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_localityJobCost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_localityJobCost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LocalityJobCost(rctx, args["localityJobCost"].(*models.LocalityJobCost))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.LocalityJobCost); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.LocalityJobCost`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.LocalityJobCost)
	fc.Result = res
	return ec.marshalOLocalityJobCost2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_localityJobCosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_localityJobCosts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LocalityJobCosts(rctx, args["localityJobCost"].(*models.LocalityJobCost), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.LocalityJobCost); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.LocalityJobCost`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LocalityJobCost)
	fc.Result = res
	return ec.marshalOLocalityJobCost2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_jobType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_jobType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().JobType(rctx, args["jobType"].(*models.JobType))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.JobType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.JobType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobType)
	fc.Result = res
	return ec.marshalOJobType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_jobTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_jobTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().JobTypes(rctx, args["jobType"].(*models.JobType), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.JobType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.JobType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.JobType)
	fc.Result = res
	return ec.marshalOJobType2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_jobTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_jobTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().JobTemplate(rctx, args["jobTemplate"].(*models.JobTemplate))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.JobTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.JobTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobTemplate)
	fc.Result = res
	return ec.marshalOJobTemplate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_jobTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_jobTemplates_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().JobTemplates(rctx, args["jobTemplate"].(*models.JobTemplate), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.JobTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.JobTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.JobTemplate)
	fc.Result = res
	return ec.marshalOJobTemplate2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_job(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_job_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Job(rctx, args["job"].(*models.Job))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Job); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Job`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_jobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_jobs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Jobs(rctx, args["job"].(*models.Job), args["filter"].(*models.JobFilter), args["sort"].([]models.JobSort), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Job); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Job`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_activeJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_activeJobs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ActiveJobs(rctx, args["job"].(*models.Job), args["filter"].(*models.JobFilter), args["sort"].([]models.JobSort), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Job); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Job`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_candidate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_candidate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Candidate(rctx, args["candidate"].(*models.Candidate))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Candidate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Candidate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Candidate)
	fc.Result = res
	return ec.marshalOCandidate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_candidates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_candidates_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Candidates(rctx, args["candidate"].(*models.Candidate), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Candidate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Candidate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Candidate)
	fc.Result = res
	return ec.marshalOCandidate2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_status(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_status_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Status(rctx, args["status"].(*models.Status))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Status); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Status`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_statuses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_statuses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Statuses(rctx, args["status"].(*models.Status), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Status); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Status`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Tag(rctx, args["tag"].(*models.Tag))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Tag); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Tag`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Tags(rctx, args["tag"].(*models.Tag), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Tag); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Tag`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_medicalBook(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_medicalBook_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MedicalBook(rctx, args["medicalBook"].(models.MedicalBook))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.MedicalBook); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.MedicalBook`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MedicalBook)
	fc.Result = res
	return ec.marshalOMedicalBook2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_medicalBooks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_medicalBooks_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MedicalBooks(rctx, args["medicalBook"].(*models.MedicalBook), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.MedicalBook); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.MedicalBook`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.MedicalBook)
	fc.Result = res
	return ec.marshalOMedicalBook2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_nationality(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_nationality_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Nationality(rctx, args["nationality"].(*models.Nationality))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Nationality); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Nationality`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Nationality)
	fc.Result = res
	return ec.marshalONationality2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_nationalities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_nationalities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Nationalities(rctx, args["nationality"].(*models.Nationality), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Nationality); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Nationality`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Nationality)
	fc.Result = res
	return ec.marshalONationality2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationPosition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationPosition_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationPosition(rctx, args["organizationPosition"].(*models.OrganizationPosition))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OrganizationPosition); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.OrganizationPosition`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationPosition)
	fc.Result = res
	return ec.marshalOOrganizationPosition2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationPositions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationPositions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationPositions(rctx, args["organizationPosition"].(*models.OrganizationPosition), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.OrganizationPosition); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.OrganizationPosition`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.OrganizationPosition)
	fc.Result = res
	return ec.marshalOOrganizationPosition2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationContact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationContact(rctx, args["organizationContact"].(*models.OrganizationContact))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OrganizationContact); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.OrganizationContact`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationContact)
	fc.Result = res
	return ec.marshalOOrganizationContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationContacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationContacts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationContacts(rctx, args["organizationContact"].(*models.OrganizationContact), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.OrganizationContact); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.OrganizationContact`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.OrganizationContact)
	fc.Result = res
	return ec.marshalOOrganizationContact2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Organization(rctx, args["organization"].(*models.Organization))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Organizations(rctx, args["organization"].(*models.Organization), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOrganizationRating(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOrganizationRating_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetOrganizationRating(rctx, args["organization"].(*models.Organization))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_passport(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_passport_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Passport(rctx, args["passport"].(models.Passport))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Passport); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Passport`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Passport)
	fc.Result = res
	return ec.marshalOPassport2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_passports(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_passports_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Passports(rctx, args["passport"].(*models.Passport), args["filter"].(*models.PassportFilter), args["sort"].([]models.PassportSort), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Passport); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Passport`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Passport)
	fc.Result = res
	return ec.marshalOPassport2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_person(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_person_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Person(rctx, args["person"].(models.Person))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Person); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Person`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_persons(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_persons_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Persons(rctx, args["person"].(*models.Person), args["filter"].(*models.PersonFilter), args["sort"].([]models.PersonSort), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Person); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Person`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_parsePerson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_parsePerson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ParsePerson(rctx, args["photo"].(*graphql.Upload), args["passport"].(*graphql.Upload))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.BlockParsePerson == nil {
				return nil, errors.New("directive BlockParsePerson is not implemented")
			}
			return ec.directives.BlockParsePerson(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PersonValidateStatus); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.PersonValidateStatus`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PersonValidateStatus)
	fc.Result = res
	return ec.marshalNPersonValidateStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonValidateStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_validateINN(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_validateINN_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ValidateInn(rctx, args["inn"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_personCourses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_personCourses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PersonCourses(rctx, args["course"].(*models.PersonCourse))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.PersonCourse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.PersonCourse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PersonCourse)
	fc.Result = res
	return ec.marshalOPersonCourse2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonCourse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPersonRating(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPersonRating_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetPersonRating(rctx, args["person"].(models.Person))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMyRating(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMyRating(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_personRating(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_personRating_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PersonRating(rctx, args["personRating"].(*models.PersonRating))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PersonRating); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.PersonRating`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PersonRating)
	fc.Result = res
	return ec.marshalOPersonRating2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_personRatings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_personRatings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PersonRatings(rctx, args["personRating"].(*models.PersonRating), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.PersonRating); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.PersonRating`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PersonRating)
	fc.Result = res
	return ec.marshalOPersonRating2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSelfEmployerStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetSelfEmployerStatus(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_personTax(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PersonTax(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Taxes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Taxes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Taxes)
	fc.Result = res
	return ec.marshalNTaxes2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTaxes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_role(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_role_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Role(rctx, args["role"].(*models.Role))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Role); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.Role`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Role)
	fc.Result = res
	return ec.marshalORole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_roles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_roles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Roles(rctx, args["role"].(*models.Role), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Role); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.Role`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Role)
	fc.Result = res
	return ec.marshalORole2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authUserByPhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authUserByPhone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthUserByPhone(rctx, args["phone"].(string), args["client"].(*models.ClientType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_regUserByPhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_regUserByPhone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegUserByPhone(rctx, args["phone"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCurrentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetCurrentUser(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().User(rctx, args["user"].(*models.User))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sphera-erp/sphera/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Users(rctx, args["user"].(*models.User), args["filter"].(*models.UserFilter), args["sort"].([]models.UserSort), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_usersByObject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_usersByObject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().UsersByObject(rctx, args["object"].(*models.Organization), args["user"].(*models.User), args["filter"].(*models.UserFilter), args["sort"].([]models.UserSort), args["offset"].(*int), args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sphera-erp/sphera/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().UserLocation(rctx, args["lat"].(*float64), args["lon"].(*float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedField_result(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedField",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedField_confidence(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedField",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedField_valid(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedField",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Valid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_error(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_surname(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_name(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_patronymic(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patronymic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_birthDate(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BirthDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_gender(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_serial(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Serial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_number(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_department(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_dateIssue(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateIssue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _RecognizedFields_departmentCode(ctx context.Context, field graphql.CollectedField, obj *models.RecognizedFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecognizedFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecognizedField)
	fc.Result = res
	return ec.marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_name(ctx context.Context, field graphql.CollectedField, obj *models.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_created(ctx context.Context, field graphql.CollectedField, obj *models.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_updated(ctx context.Context, field graphql.CollectedField, obj *models.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RightToObject_object(ctx context.Context, field graphql.CollectedField, obj *models.RightToObject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RightToObject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Object, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RightToObject_select(ctx context.Context, field graphql.CollectedField, obj *models.RightToObject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RightToObject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Select, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RightToObject_insert(ctx context.Context, field graphql.CollectedField, obj *models.RightToObject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RightToObject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Insert, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RightToObject_update(ctx context.Context, field graphql.CollectedField, obj *models.RightToObject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RightToObject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Update, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RightToObject_delete(ctx context.Context, field graphql.CollectedField, obj *models.RightToObject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RightToObject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_created(ctx context.Context, field graphql.CollectedField, obj *models.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_updated(ctx context.Context, field graphql.CollectedField, obj *models.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_name(ctx context.Context, field graphql.CollectedField, obj *models.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_organization(ctx context.Context, field graphql.CollectedField, obj *models.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_roleType(ctx context.Context, field graphql.CollectedField, obj *models.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TypeRole)
	fc.Result = res
	return ec.marshalOTypeRole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTypeRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_permissions(ctx context.Context, field graphql.CollectedField, obj *models.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Permission)
	fc.Result = res
	return ec.marshalOPermission2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_region(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_area(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_city(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_cityDistrict(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CityDistrict)
	fc.Result = res
	return ec.marshalOCityDistrict2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_name(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_created(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_updated(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Settlement_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Settlement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Settlement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_created(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_updated(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_person(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_job(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Job)
	fc.Result = res
	return ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_status(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JobStatus)
	fc.Result = res
	return ec.marshalOJobStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_description(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_content(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Content)
	fc.Result = res
	return ec.marshalOContent2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_tags(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_lat(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_lon(ctx context.Context, field graphql.CollectedField, obj *models.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_region(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Region)
	fc.Result = res
	return ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_area(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_city(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.City)
	fc.Result = res
	return ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_cityDistrict(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CityDistrict)
	fc.Result = res
	return ec.marshalOCityDistrict2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_settlement(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settlement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Settlement)
	fc.Result = res
	return ec.marshalOSettlement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_name(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_created(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_updated(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Street_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Street) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Street",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_pingSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_pingSub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().PingSub(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *string)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOString2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_regionSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().RegionSub(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.Region)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_areaSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AreaSub(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.Area)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_citySub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().CitySub(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.City)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_msgStatSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MsgStatSub(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.MsgStat)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOMsgStat2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMsgStat(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_jobSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().JobSub(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.Job)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_organizationSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().OrganizationSub(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.Organization)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_parsePersonSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().ParsePersonSub(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *models.RecognizedFields); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/sphera-erp/sphera/internal/models.RecognizedFields`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.RecognizedFields)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNRecognizedFields2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedFields(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_personSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().PersonSub(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *models.Person); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/sphera-erp/sphera/internal/models.Person`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.Person)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_userSub(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().UserSub(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive Private is not implemented")
			}
			return ec.directives.Private(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/sphera-erp/sphera/internal/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *models.User)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOUser2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Tag_uuid(ctx context.Context, field graphql.CollectedField, obj *models.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *models.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Taxes_proceeds(ctx context.Context, field graphql.CollectedField, obj *models.Taxes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Taxes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Proceeds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Taxes_preliminary(ctx context.Context, field graphql.CollectedField, obj *models.Taxes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Taxes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preliminary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Taxes_tax(ctx context.Context, field graphql.CollectedField, obj *models.Taxes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Taxes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Taxes_penalty(ctx context.Context, field graphql.CollectedField, obj *models.Taxes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Taxes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Penalty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateRights_uuid(ctx context.Context, field graphql.CollectedField, obj *models.TemplateRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateRights",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateRights_created(ctx context.Context, field graphql.CollectedField, obj *models.TemplateRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateRights",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateRights_updated(ctx context.Context, field graphql.CollectedField, obj *models.TemplateRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateRights",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateRights_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.TemplateRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateRights",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateRights_name(ctx context.Context, field graphql.CollectedField, obj *models.TemplateRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateRights",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateRights_rightsToObject(ctx context.Context, field graphql.CollectedField, obj *models.TemplateRights) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateRights",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RightsToObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.RightToObject)
	fc.Result = res
	return ec.marshalORightToObject2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRightToObject(ctx, field.Selections, res)
}

func (ec *executionContext) _User_uuid(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _User_created(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_updated(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_isDeleted(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_isBlocked(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlocked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_isDisabled(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_contact(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) _User_person(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _User_userType(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UserType)
	fc.Result = res
	return ec.marshalOUserType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserType(ctx, field.Selections, res)
}

func (ec *executionContext) _User_organization(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _User_groups(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _User_objects(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Objects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Role)
	fc.Result = res
	return ec.marshalORole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _stat_month(ctx context.Context, field graphql.CollectedField, obj *models.Stat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _stat_previousMonth(ctx context.Context, field graphql.CollectedField, obj *models.Stat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviousMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _stat_quarter(ctx context.Context, field graphql.CollectedField, obj *models.Stat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddressFilter(ctx context.Context, obj interface{}) (models.AddressFilter, error) {
	var it models.AddressFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "formattedAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddress"))
			it.FormattedAddress, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOCountryInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
			it.CityDistrict, err = ec.unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, v)
			if err != nil {
				return it, err
			}
		case "settlement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
			it.Settlement, err = ec.unmarshalOSettlementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, v)
			if err != nil {
				return it, err
			}
		case "street":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("street"))
			it.Street, err = ec.unmarshalOStreetInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, v)
			if err != nil {
				return it, err
			}
		case "house":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("house"))
			it.House, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "block":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("block"))
			it.Block, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "flat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flat"))
			it.Flat, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			it.Lat, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
			it.Lon, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAddressFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddressFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAddressFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddressFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOAddressFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddressFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddressInput(ctx context.Context, obj interface{}) (models.Address, error) {
	var it models.Address
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "formattedAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddress"))
			it.FormattedAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOCountryInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
			it.CityDistrict, err = ec.unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, v)
			if err != nil {
				return it, err
			}
		case "settlement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
			it.Settlement, err = ec.unmarshalOSettlementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, v)
			if err != nil {
				return it, err
			}
		case "street":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("street"))
			it.Street, err = ec.unmarshalOStreetInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, v)
			if err != nil {
				return it, err
			}
		case "house":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("house"))
			it.House, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "block":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("block"))
			it.Block, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "flat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flat"))
			it.Flat, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			it.Lat, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
			it.Lon, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAreaFilter(ctx context.Context, obj interface{}) (models.AreaFilter, error) {
	var it models.AreaFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAreaInput(ctx context.Context, obj interface{}) (models.Area, error) {
	var it models.Area
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateInput(ctx context.Context, obj interface{}) (models.Candidate, error) {
	var it models.Candidate
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "job":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
			it.Job, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidateTag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidateTag"))
			it.CandidateTags, err = ec.unmarshalOCandidateTags2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidateTags(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCityDistrictFilter(ctx context.Context, obj interface{}) (models.CityDistrictFilter, error) {
	var it models.CityDistrictFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAreaFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCityDistrictInput(ctx context.Context, obj interface{}) (models.CityDistrict, error) {
	var it models.CityDistrict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCityFilter(ctx context.Context, obj interface{}) (models.CityFilter, error) {
	var it models.CityFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAreaFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCityInput(ctx context.Context, obj interface{}) (models.City, error) {
	var it models.City
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactFilter(ctx context.Context, obj interface{}) (models.ContactFilter, error) {
	var it models.ContactFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contactType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactType"))
			it.ContactType, err = ec.unmarshalOContactTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, v)
			if err != nil {
				return it, err
			}
		case "presentation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("presentation"))
			it.Presentation, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContactFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContactFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContactFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactInput(ctx context.Context, obj interface{}) (models.Contact, error) {
	var it models.Contact
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "contactType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactType"))
			it.ContactType, err = ec.unmarshalOContactTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, v)
			if err != nil {
				return it, err
			}
		case "presentation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("presentation"))
			it.Presentation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactTypeFilter(ctx context.Context, obj interface{}) (models.ContactTypeFilter, error) {
	var it models.ContactTypeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactTypeInput(ctx context.Context, obj interface{}) (models.ContactType, error) {
	var it models.ContactType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContentInput(ctx context.Context, obj interface{}) (models.Content, error) {
	var it models.Content
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalNUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "bucket":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucket"))
			it.Bucket, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCountryFilter(ctx context.Context, obj interface{}) (models.CountryFilter, error) {
	var it models.CountryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCountryInput(ctx context.Context, obj interface{}) (models.Country, error) {
	var it models.Country
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCourseFilter(ctx context.Context, obj interface{}) (models.CourseFilter, error) {
	var it models.CourseFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseType"))
			it.CourseType, err = ec.unmarshalOCourseType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourseType(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "passingScore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passingScore"))
			it.PassingScore, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCourseInput(ctx context.Context, obj interface{}) (models.Course, error) {
	var it models.Course
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseType"))
			it.CourseType, err = ec.unmarshalOCourseType2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourseType(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "passingScore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passingScore"))
			it.PassingScore, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateFilter(ctx context.Context, obj interface{}) (models.DateFilter, error) {
	var it models.DateFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gte"))
			it.Gte, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lte"))
			it.Lte, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			it.NotEq, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalODate2ᚕᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateTimeFilter(ctx context.Context, obj interface{}) (models.DateTimeFilter, error) {
	var it models.DateTimeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gte"))
			it.Gte, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lte"))
			it.Lte, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			it.NotEq, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalODateTime2ᚕᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatFilter(ctx context.Context, obj interface{}) (models.FloatFilter, error) {
	var it models.FloatFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			it.NotEq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj interface{}) (models.IntFilter, error) {
	var it models.IntFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			it.NotEq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobFilter(ctx context.Context, obj interface{}) (models.JobFilter, error) {
	var it models.JobFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalODateFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			it.StartTime, err = ec.unmarshalOTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			it.EndTime, err = ec.unmarshalOTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "object":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
			it.Object, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "jobTemplate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTemplate"))
			it.JobTemplate, err = ec.unmarshalOJobTemplateFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "jobType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobType"))
			it.JobType, err = ec.unmarshalOJobTypeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTypeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isHot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHot"))
			it.IsHot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "executor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executor"))
			it.Executor, err = ec.unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOJobFilter2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOJobFilter2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOJobFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobFlowInput(ctx context.Context, obj interface{}) (models.JobFlow, error) {
	var it models.JobFlow
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "jobType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobType"))
			it.JobType, err = ec.unmarshalOJobTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, v)
			if err != nil {
				return it, err
			}
		case "scriptType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scriptType"))
			it.ScriptType, err = ec.unmarshalOScriptType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐScriptType(ctx, v)
			if err != nil {
				return it, err
			}
		case "diff":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diff"))
			it.Diff, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "script":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("script"))
			it.Script, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobInput(ctx context.Context, obj interface{}) (models.Job, error) {
	var it models.Job
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			it.StartTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			it.EndTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "object":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
			it.Object, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "jobTemplate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTemplate"))
			it.JobTemplate, err = ec.unmarshalOJobTemplateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, v)
			if err != nil {
				return it, err
			}
		case "jobType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobType"))
			it.JobType, err = ec.unmarshalOJobTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isHot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHot"))
			it.IsHot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOJobStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidates"))
			it.Candidates, err = ec.unmarshalOCandidateInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, v)
			if err != nil {
				return it, err
			}
		case "executor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executor"))
			it.Executor, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "statuses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statuses"))
			it.Statuses, err = ec.unmarshalOStatusInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ratingDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ratingDescription"))
			it.RatingDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobSort(ctx context.Context, obj interface{}) (models.JobSort, error) {
	var it models.JobSort
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["order"]; !present {
		asMap["order"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOJobSortableField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobSortableField(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalOSortOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobTemplateFilter(ctx context.Context, obj interface{}) (models.JobTemplateFilter, error) {
	var it models.JobTemplateFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "object":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
			it.Object, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAreaFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "jobType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobType"))
			it.JobType, err = ec.unmarshalOJobTypeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTypeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalODateFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			it.StartTime, err = ec.unmarshalOTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			it.EndTime, err = ec.unmarshalOTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalODateFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobTemplateInput(ctx context.Context, obj interface{}) (models.JobTemplate, error) {
	var it models.JobTemplate
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "object":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
			it.Object, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, v)
			if err != nil {
				return it, err
			}
		case "jobType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobType"))
			it.JobType, err = ec.unmarshalOJobTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			it.StartTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			it.EndTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobTypeFilter(ctx context.Context, obj interface{}) (models.JobTypeFilter, error) {
	var it models.JobTypeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "icon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			it.Icon, err = ec.unmarshalOJobTypeIcon2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTypeIcon(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobTypeInput(ctx context.Context, obj interface{}) (models.JobType, error) {
	var it models.JobType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "icon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			it.Icon, err = ec.unmarshalOJobTypeIcon2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTypeIcon(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "localityJobCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localityJobCost"))
			it.LocalityJobCost, err = ec.unmarshalOLocalityJobCostInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, v)
			if err != nil {
				return it, err
			}
		case "courses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courses"))
			it.Courses, err = ec.unmarshalOCourseInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "needMedicalBook":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("needMedicalBook"))
			it.NeedMedicalBook, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocalityJobCostFilter(ctx context.Context, obj interface{}) (models.LocalityJobCostFilter, error) {
	var it models.LocalityJobCostFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOCountryFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAreaFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
			it.CityDistrict, err = ec.unmarshalOCityDistrictFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrictFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "settlement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
			it.Settlement, err = ec.unmarshalOSettlementFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlementFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxCost"))
			it.MaxCost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocalityJobCostInput(ctx context.Context, obj interface{}) (models.LocalityJobCost, error) {
	var it models.LocalityJobCost
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOCountryInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
			it.CityDistrict, err = ec.unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, v)
			if err != nil {
				return it, err
			}
		case "settlement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
			it.Settlement, err = ec.unmarshalOSettlementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxCost"))
			it.MaxCost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMedicalBookInput(ctx context.Context, obj interface{}) (models.MedicalBook, error) {
	var it models.MedicalBook
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			it.Number, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "medicalExaminationDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("medicalExaminationDate"))
			it.MedicalExaminationDate, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "contents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contents"))
			it.Contents, err = ec.unmarshalOContentInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "haveHealthRestrictions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("haveHealthRestrictions"))
			it.HaveHealthRestrictions, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "haveMedicalBook":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("haveMedicalBook"))
			it.HaveMedicalBook, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionHealthRestrictions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHealthRestrictions"))
			it.DescriptionHealthRestrictions, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "checked":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checked"))
			it.Checked, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkedDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checkedDate"))
			it.CheckedDate, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkedPerson":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checkedPerson"))
			it.CheckedPerson, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMovementFilter(ctx context.Context, obj interface{}) (models.MovementFilter, error) {
	var it models.MovementFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "direct":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direct"))
			it.Direct, err = ec.unmarshalODirect2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDirect(ctx, v)
			if err != nil {
				return it, err
			}
		case "destination":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destination"))
			it.Destination, err = ec.unmarshalODestinationMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDestinationMovement(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "job":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
			it.Job, err = ec.unmarshalOJobFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOMovementFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovementFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOMovementFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovementFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOMovementFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovementFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMovementInput(ctx context.Context, obj interface{}) (models.Movement, error) {
	var it models.Movement
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "direct":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direct"))
			it.Direct, err = ec.unmarshalODirect2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDirect(ctx, v)
			if err != nil {
				return it, err
			}
		case "destination":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destination"))
			it.Destination, err = ec.unmarshalODestinationMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDestinationMovement(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "job":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
			it.Job, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNationalityInput(ctx context.Context, obj interface{}) (models.Nationality, error) {
	var it models.Nationality
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationContactInput(ctx context.Context, obj interface{}) (models.OrganizationContact, error) {
	var it models.OrganizationContact
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalOOrganizationPositionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationFilter(ctx context.Context, obj interface{}) (models.OrganizationFilter, error) {
	var it models.OrganizationFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "inn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inn"))
			it.Inn, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "kpp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kpp"))
			it.Kpp, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressLegal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLegal"))
			it.AddressLegal, err = ec.unmarshalOAddressFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddressFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressFact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressFact"))
			it.AddressFact, err = ec.unmarshalOAddressFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddressFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
			it.Parent, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentOrganization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentOrganization"))
			it.ParentOrganization, err = ec.unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefix"))
			it.Prefix, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			it.FullName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "shortName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortName"))
			it.ShortName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "fee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fee"))
			it.Fee, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationInput(ctx context.Context, obj interface{}) (models.Organization, error) {
	var it models.Organization
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inn"))
			it.INN, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "kpp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kpp"))
			it.KPP, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressLegal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLegal"))
			it.AddressLegal, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressFact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressFact"))
			it.AddressFact, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
			it.Parent, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentOrganization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentOrganization"))
			it.ParentOrganization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "departments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departments"))
			it.Departments, err = ec.unmarshalOOrganizationInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			it.Logo, err = ec.unmarshalOContentInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, v)
			if err != nil {
				return it, err
			}
		case "prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefix"))
			it.Prefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			it.FullName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "shortName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortName"))
			it.ShortName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fee"))
			it.Fee, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("persons"))
			it.Persons, err = ec.unmarshalOPersonInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "isGroup":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isGroup"))
			it.IsGroup, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstReserveReward":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstReserveReward"))
			it.FirstReserveReward, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondReserveReward":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondReserveReward"))
			it.SecondReserveReward, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "stDistance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stDistance"))
			it.StDistance, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "stTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stTime"))
			it.StTime, err = ec.unmarshalODuration2ᚖtimeᚐDuration(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPositionInput(ctx context.Context, obj interface{}) (models.OrganizationPosition, error) {
	var it models.OrganizationPosition
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPassportFilter(ctx context.Context, obj interface{}) (models.PassportFilter, error) {
	var it models.PassportFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "serial":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial"))
			it.Serial, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			it.Number, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "departmentCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentCode"))
			it.DepartmentCode, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department"))
			it.Department, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateIssue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIssue"))
			it.DateIssue, err = ec.unmarshalODateFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOUserFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOUserFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPassportInput(ctx context.Context, obj interface{}) (models.Passport, error) {
	var it models.Passport
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "serial":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial"))
			it.Serial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			it.Number, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateIssue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIssue"))
			it.DateIssue, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "departmentCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentCode"))
			it.DepartmentCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department"))
			it.Department, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "scan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scan"))
			it.Scan, err = ec.unmarshalOContentInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressRegistration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressRegistration"))
			it.AddressRegistration, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "photoRegistration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photoRegistration"))
			it.PhotoRegistration, err = ec.unmarshalOContentInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPassportSort(ctx context.Context, obj interface{}) (models.PassportSort, error) {
	var it models.PassportSort
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["order"]; !present {
		asMap["order"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOUserSortableField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSortableField(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalOSortOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPermissionInput(ctx context.Context, obj interface{}) (models.Permission, error) {
	var it models.Permission
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "object":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
			it.Object, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "insert":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insert"))
			it.Insert, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "read":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("read"))
			it.Read, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "update":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
			it.Update, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
			it.Delete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonCourseInput(ctx context.Context, obj interface{}) (models.PersonCourse, error) {
	var it models.PersonCourse
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "course":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course"))
			it.Course, err = ec.unmarshalOCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, v)
			if err != nil {
				return it, err
			}
		case "questions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questions"))
			it.Questions, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "answers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answers"))
			it.Answers, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonFilter(ctx context.Context, obj interface{}) (models.PersonFilter, error) {
	var it models.PersonFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "surname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surname"))
			it.Surname, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "patronymic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patronymic"))
			it.Patronymic, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			it.BirthDate, err = ec.unmarshalODateFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "inn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inn"))
			it.INN, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOPersonFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOPersonFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonInput(ctx context.Context, obj interface{}) (models.Person, error) {
	var it models.Person
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			it.User, err = ec.unmarshalOUserInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, v)
			if err != nil {
				return it, err
			}
		case "actualContact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actualContact"))
			it.ActualContact, err = ec.unmarshalOContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			it.Contacts, err = ec.unmarshalOContactInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, v)
			if err != nil {
				return it, err
			}
		case "passport":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passport"))
			it.Passport, err = ec.unmarshalOPassportInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, v)
			if err != nil {
				return it, err
			}
		case "surname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surname"))
			it.Surname, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "patronymic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patronymic"))
			it.Patronymic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			it.BirthDate, err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOGender2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOCountryInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, v)
			if err != nil {
				return it, err
			}
		case "inn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inn"))
			it.INN, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "medicalBook":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("medicalBook"))
			it.MedicalBook, err = ec.unmarshalOMedicalBookInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo"))
			it.Photo, err = ec.unmarshalOContentInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalOOrganizationPositionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, v)
			if err != nil {
				return it, err
			}
		case "isContact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isContact"))
			it.IsContact, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "validated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("validated"))
			it.Validated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonRatingInput(ctx context.Context, obj interface{}) (models.PersonRating, error) {
	var it models.PersonRating
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "job":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
			it.Job, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonSort(ctx context.Context, obj interface{}) (models.PersonSort, error) {
	var it models.PersonSort
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["order"]; !present {
		asMap["order"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOUserSortableField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSortableField(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalOSortOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionFilter(ctx context.Context, obj interface{}) (models.RegionFilter, error) {
	var it models.RegionFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionInput(ctx context.Context, obj interface{}) (models.Region, error) {
	var it models.Region
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResourceAttributes(ctx context.Context, obj interface{}) (directives.ResourceAttributes, error) {
	var it directives.ResourceAttributes
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resource":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resource"))
			it.Resource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRightToObjectInput(ctx context.Context, obj interface{}) (models.RightToObject, error) {
	var it models.RightToObject
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "object":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
			it.Object, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "select":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("select"))
			it.Select, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "insert":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insert"))
			it.Insert, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "update":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
			it.Update, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
			it.Delete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleInput(ctx context.Context, obj interface{}) (models.Role, error) {
	var it models.Role
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "roleType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleType"))
			it.RoleType, err = ec.unmarshalOTypeRole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTypeRole(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			it.Permissions, err = ec.unmarshalOPermissionInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPermission(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSettlementFilter(ctx context.Context, obj interface{}) (models.SettlementFilter, error) {
	var it models.SettlementFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAreaFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
			it.CityDistrict, err = ec.unmarshalOCityDistrictFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrictFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSettlementInput(ctx context.Context, obj interface{}) (models.Settlement, error) {
	var it models.Settlement
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
			it.CityDistrict, err = ec.unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStatusInput(ctx context.Context, obj interface{}) (models.Status, error) {
	var it models.Status
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "job":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
			it.Job, err = ec.unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOContentInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOTagInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOJobStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStreetFilter(ctx context.Context, obj interface{}) (models.StreetFilter, error) {
	var it models.StreetFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAreaFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
			it.CityDistrict, err = ec.unmarshalOCityDistrictFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrictFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "settlement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
			it.Settlement, err = ec.unmarshalOSettlementFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlementFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStreetInput(ctx context.Context, obj interface{}) (models.Street, error) {
	var it models.Street
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistrict"))
			it.CityDistrict, err = ec.unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, v)
			if err != nil {
				return it, err
			}
		case "settlement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settlement"))
			it.Settlement, err = ec.unmarshalOSettlementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFilter(ctx context.Context, obj interface{}) (models.StringFilter, error) {
	var it models.StringFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagInput(ctx context.Context, obj interface{}) (models.Tag, error) {
	var it models.Tag
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTemplateRightsInput(ctx context.Context, obj interface{}) (models.TemplateRights, error) {
	var it models.TemplateRights
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rightsToObject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rightsToObject"))
			it.RightsToObject, err = ec.unmarshalORightToObjectInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRightToObject(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimeFilter(ctx context.Context, obj interface{}) (models.TimeFilter, error) {
	var it models.TimeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gte"))
			it.Gte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lte"))
			it.Lte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			it.NotEq, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalOTime2ᚕᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUUIDFilter(ctx context.Context, obj interface{}) (models.UUIDFilter, error) {
	var it models.UUIDFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			it.NotEq, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOUUID2ᚕᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "noIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noIn"))
			it.NoIn, err = ec.unmarshalOUUID2ᚕᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilter(ctx context.Context, obj interface{}) (models.UserFilter, error) {
	var it models.UserFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			it.Contact, err = ec.unmarshalOContactFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isBlocked":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isBlocked"))
			it.IsBlocked, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDisabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDisabled"))
			it.IsDisabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOUserFilter2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOUserFilter2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (models.User, error) {
	var it models.User
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			it.UUID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isBlocked":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isBlocked"))
			it.IsBlocked, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDisabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDisabled"))
			it.IsDisabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			it.Contact, err = ec.unmarshalOContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, v)
			if err != nil {
				return it, err
			}
		case "userType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userType"))
			it.UserType, err = ec.unmarshalOUserType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserType(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "groups":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groups"))
			it.Groups, err = ec.unmarshalOOrganizationInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "objects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
			it.Objects, err = ec.unmarshalOOrganizationInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalORoleInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserSort(ctx context.Context, obj interface{}) (models.UserSort, error) {
	var it models.UserSort
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["order"]; !present {
		asMap["order"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOUserSortableField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSortableField(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalOSortOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var addressImplementors = []string{"Address"}

func (ec *executionContext) _Address(ctx context.Context, sel ast.SelectionSet, obj *models.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Address")
		case "uuid":
			out.Values[i] = ec._Address_uuid(ctx, field, obj)
		case "formattedAddress":
			out.Values[i] = ec._Address_formattedAddress(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Address_country(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Address_region(ctx, field, obj)
		case "area":
			out.Values[i] = ec._Address_area(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Address_city(ctx, field, obj)
		case "cityDistrict":
			out.Values[i] = ec._Address_cityDistrict(ctx, field, obj)
		case "settlement":
			out.Values[i] = ec._Address_settlement(ctx, field, obj)
		case "street":
			out.Values[i] = ec._Address_street(ctx, field, obj)
		case "house":
			out.Values[i] = ec._Address_house(ctx, field, obj)
		case "block":
			out.Values[i] = ec._Address_block(ctx, field, obj)
		case "flat":
			out.Values[i] = ec._Address_flat(ctx, field, obj)
		case "lat":
			out.Values[i] = ec._Address_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._Address_lon(ctx, field, obj)
		case "person":
			out.Values[i] = ec._Address_person(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._Address_organization(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Address_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Address_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Address_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var areaImplementors = []string{"Area"}

func (ec *executionContext) _Area(ctx context.Context, sel ast.SelectionSet, obj *models.Area) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, areaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Area")
		case "uuid":
			out.Values[i] = ec._Area_uuid(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Area_region(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Area_name(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Area_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Area_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Area_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var balanceImplementors = []string{"Balance"}

func (ec *executionContext) _Balance(ctx context.Context, sel ast.SelectionSet, obj *models.Balance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, balanceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Balance")
		case "uuid":
			out.Values[i] = ec._Balance_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Balance_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Balance_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Balance_isDeleted(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._Balance_organization(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Balance_amount(ctx, field, obj)
		case "movement":
			out.Values[i] = ec._Balance_movement(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateImplementors = []string{"Candidate"}

func (ec *executionContext) _Candidate(ctx context.Context, sel ast.SelectionSet, obj *models.Candidate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Candidate")
		case "uuid":
			out.Values[i] = ec._Candidate_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Candidate_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Candidate_updated(ctx, field, obj)
		case "person":
			out.Values[i] = ec._Candidate_person(ctx, field, obj)
		case "job":
			out.Values[i] = ec._Candidate_job(ctx, field, obj)
		case "candidateTag":
			out.Values[i] = ec._Candidate_candidateTag(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Candidate_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cityImplementors = []string{"City"}

func (ec *executionContext) _City(ctx context.Context, sel ast.SelectionSet, obj *models.City) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("City")
		case "uuid":
			out.Values[i] = ec._City_uuid(ctx, field, obj)
		case "region":
			out.Values[i] = ec._City_region(ctx, field, obj)
		case "area":
			out.Values[i] = ec._City_area(ctx, field, obj)
		case "name":
			out.Values[i] = ec._City_name(ctx, field, obj)
		case "created":
			out.Values[i] = ec._City_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._City_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._City_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cityDistrictImplementors = []string{"CityDistrict"}

func (ec *executionContext) _CityDistrict(ctx context.Context, sel ast.SelectionSet, obj *models.CityDistrict) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cityDistrictImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CityDistrict")
		case "uuid":
			out.Values[i] = ec._CityDistrict_uuid(ctx, field, obj)
		case "region":
			out.Values[i] = ec._CityDistrict_region(ctx, field, obj)
		case "area":
			out.Values[i] = ec._CityDistrict_area(ctx, field, obj)
		case "city":
			out.Values[i] = ec._CityDistrict_city(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CityDistrict_name(ctx, field, obj)
		case "created":
			out.Values[i] = ec._CityDistrict_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._CityDistrict_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._CityDistrict_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contactImplementors = []string{"Contact"}

func (ec *executionContext) _Contact(ctx context.Context, sel ast.SelectionSet, obj *models.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contact")
		case "uuid":
			out.Values[i] = ec._Contact_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Contact_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Contact_updated(ctx, field, obj)
		case "person":
			out.Values[i] = ec._Contact_person(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._Contact_organization(ctx, field, obj)
		case "contactType":
			out.Values[i] = ec._Contact_contactType(ctx, field, obj)
		case "presentation":
			out.Values[i] = ec._Contact_presentation(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Contact_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contactTypeImplementors = []string{"ContactType"}

func (ec *executionContext) _ContactType(ctx context.Context, sel ast.SelectionSet, obj *models.ContactType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactType")
		case "uuid":
			out.Values[i] = ec._ContactType_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._ContactType_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._ContactType_updated(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ContactType_name(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._ContactType_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contentImplementors = []string{"Content"}

func (ec *executionContext) _Content(ctx context.Context, sel ast.SelectionSet, obj *models.Content) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Content")
		case "uuid":
			out.Values[i] = ec._Content_uuid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bucket":
			out.Values[i] = ec._Content_bucket(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeleted":
			out.Values[i] = ec._Content_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var countryImplementors = []string{"Country"}

func (ec *executionContext) _Country(ctx context.Context, sel ast.SelectionSet, obj *models.Country) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Country")
		case "uuid":
			out.Values[i] = ec._Country_uuid(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Country_name(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Country_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Country_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Country_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var courseImplementors = []string{"Course"}

func (ec *executionContext) _Course(ctx context.Context, sel ast.SelectionSet, obj *models.Course) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, courseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Course")
		case "uuid":
			out.Values[i] = ec._Course_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Course_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Course_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Course_isDeleted(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Course_name(ctx, field, obj)
		case "courseType":
			out.Values[i] = ec._Course_courseType(ctx, field, obj)
		case "content":
			out.Values[i] = ec._Course_content(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._Course_organization(ctx, field, obj)
		case "passingScore":
			out.Values[i] = ec._Course_passingScore(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var infoAboutJobImplementors = []string{"InfoAboutJob"}

func (ec *executionContext) _InfoAboutJob(ctx context.Context, sel ast.SelectionSet, obj *models.InfoAboutJob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, infoAboutJobImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InfoAboutJob")
		case "workerOrder":
			out.Values[i] = ec._InfoAboutJob_workerOrder(ctx, field, obj)
		case "courses":
			out.Values[i] = ec._InfoAboutJob_courses(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobImplementors = []string{"Job"}

func (ec *executionContext) _Job(ctx context.Context, sel ast.SelectionSet, obj *models.Job) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Job")
		case "uuid":
			out.Values[i] = ec._Job_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Job_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Job_updated(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Job_name(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Job_date(ctx, field, obj)
		case "startTime":
			out.Values[i] = ec._Job_startTime(ctx, field, obj)
		case "endTime":
			out.Values[i] = ec._Job_endTime(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._Job_duration(ctx, field, obj)
		case "cost":
			out.Values[i] = ec._Job_cost(ctx, field, obj)
		case "object":
			out.Values[i] = ec._Job_object(ctx, field, obj)
		case "jobTemplate":
			out.Values[i] = ec._Job_jobTemplate(ctx, field, obj)
		case "jobType":
			out.Values[i] = ec._Job_jobType(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Job_description(ctx, field, obj)
		case "isHot":
			out.Values[i] = ec._Job_isHot(ctx, field, obj)
		case "published":
			out.Values[i] = ec._Job_published(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Job_status(ctx, field, obj)
		case "candidates":
			out.Values[i] = ec._Job_candidates(ctx, field, obj)
		case "executor":
			out.Values[i] = ec._Job_executor(ctx, field, obj)
		case "statuses":
			out.Values[i] = ec._Job_statuses(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Job_isDeleted(ctx, field, obj)
		case "rating":
			out.Values[i] = ec._Job_rating(ctx, field, obj)
		case "ratingDescription":
			out.Values[i] = ec._Job_ratingDescription(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobFlowImplementors = []string{"JobFlow"}

func (ec *executionContext) _JobFlow(ctx context.Context, sel ast.SelectionSet, obj *models.JobFlow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobFlowImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobFlow")
		case "uuid":
			out.Values[i] = ec._JobFlow_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._JobFlow_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._JobFlow_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._JobFlow_isDeleted(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._JobFlow_organization(ctx, field, obj)
		case "jobType":
			out.Values[i] = ec._JobFlow_jobType(ctx, field, obj)
		case "scriptType":
			out.Values[i] = ec._JobFlow_scriptType(ctx, field, obj)
		case "diff":
			out.Values[i] = ec._JobFlow_diff(ctx, field, obj)
		case "script":
			out.Values[i] = ec._JobFlow_script(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobTemplateImplementors = []string{"JobTemplate"}

func (ec *executionContext) _JobTemplate(ctx context.Context, sel ast.SelectionSet, obj *models.JobTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobTemplate")
		case "uuid":
			out.Values[i] = ec._JobTemplate_uuid(ctx, field, obj)
		case "name":
			out.Values[i] = ec._JobTemplate_name(ctx, field, obj)
		case "created":
			out.Values[i] = ec._JobTemplate_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._JobTemplate_updated(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._JobTemplate_organization(ctx, field, obj)
		case "object":
			out.Values[i] = ec._JobTemplate_object(ctx, field, obj)
		case "region":
			out.Values[i] = ec._JobTemplate_region(ctx, field, obj)
		case "area":
			out.Values[i] = ec._JobTemplate_area(ctx, field, obj)
		case "city":
			out.Values[i] = ec._JobTemplate_city(ctx, field, obj)
		case "jobType":
			out.Values[i] = ec._JobTemplate_jobType(ctx, field, obj)
		case "cost":
			out.Values[i] = ec._JobTemplate_cost(ctx, field, obj)
		case "date":
			out.Values[i] = ec._JobTemplate_date(ctx, field, obj)
		case "startTime":
			out.Values[i] = ec._JobTemplate_startTime(ctx, field, obj)
		case "endTime":
			out.Values[i] = ec._JobTemplate_endTime(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._JobTemplate_duration(ctx, field, obj)
		case "description":
			out.Values[i] = ec._JobTemplate_description(ctx, field, obj)
		case "published":
			out.Values[i] = ec._JobTemplate_published(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._JobTemplate_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobTypeImplementors = []string{"JobType"}

func (ec *executionContext) _JobType(ctx context.Context, sel ast.SelectionSet, obj *models.JobType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobType")
		case "uuid":
			out.Values[i] = ec._JobType_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._JobType_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._JobType_updated(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._JobType_icon(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._JobType_organization(ctx, field, obj)
		case "name":
			out.Values[i] = ec._JobType_name(ctx, field, obj)
		case "localityJobCost":
			out.Values[i] = ec._JobType_localityJobCost(ctx, field, obj)
		case "courses":
			out.Values[i] = ec._JobType_courses(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._JobType_isDeleted(ctx, field, obj)
		case "needMedicalBook":
			out.Values[i] = ec._JobType_needMedicalBook(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var localityJobCostImplementors = []string{"LocalityJobCost"}

func (ec *executionContext) _LocalityJobCost(ctx context.Context, sel ast.SelectionSet, obj *models.LocalityJobCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, localityJobCostImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocalityJobCost")
		case "uuid":
			out.Values[i] = ec._LocalityJobCost_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._LocalityJobCost_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._LocalityJobCost_updated(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._LocalityJobCost_organization(ctx, field, obj)
		case "country":
			out.Values[i] = ec._LocalityJobCost_country(ctx, field, obj)
		case "region":
			out.Values[i] = ec._LocalityJobCost_region(ctx, field, obj)
		case "area":
			out.Values[i] = ec._LocalityJobCost_area(ctx, field, obj)
		case "city":
			out.Values[i] = ec._LocalityJobCost_city(ctx, field, obj)
		case "cityDistrict":
			out.Values[i] = ec._LocalityJobCost_cityDistrict(ctx, field, obj)
		case "settlement":
			out.Values[i] = ec._LocalityJobCost_settlement(ctx, field, obj)
		case "maxCost":
			out.Values[i] = ec._LocalityJobCost_maxCost(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._LocalityJobCost_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var medicalBookImplementors = []string{"MedicalBook"}

func (ec *executionContext) _MedicalBook(ctx context.Context, sel ast.SelectionSet, obj *models.MedicalBook) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicalBookImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MedicalBook")
		case "uuid":
			out.Values[i] = ec._MedicalBook_uuid(ctx, field, obj)
		case "number":
			out.Values[i] = ec._MedicalBook_number(ctx, field, obj)
		case "medicalExaminationDate":
			out.Values[i] = ec._MedicalBook_medicalExaminationDate(ctx, field, obj)
		case "contents":
			out.Values[i] = ec._MedicalBook_contents(ctx, field, obj)
		case "person":
			out.Values[i] = ec._MedicalBook_person(ctx, field, obj)
		case "created":
			out.Values[i] = ec._MedicalBook_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._MedicalBook_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._MedicalBook_isDeleted(ctx, field, obj)
		case "haveHealthRestrictions":
			out.Values[i] = ec._MedicalBook_haveHealthRestrictions(ctx, field, obj)
		case "haveMedicalBook":
			out.Values[i] = ec._MedicalBook_haveMedicalBook(ctx, field, obj)
		case "descriptionHealthRestrictions":
			out.Values[i] = ec._MedicalBook_descriptionHealthRestrictions(ctx, field, obj)
		case "checked":
			out.Values[i] = ec._MedicalBook_checked(ctx, field, obj)
		case "checkedDate":
			out.Values[i] = ec._MedicalBook_checkedDate(ctx, field, obj)
		case "checkedPerson":
			out.Values[i] = ec._MedicalBook_checkedPerson(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var movementImplementors = []string{"Movement"}

func (ec *executionContext) _Movement(ctx context.Context, sel ast.SelectionSet, obj *models.Movement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, movementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Movement")
		case "uuid":
			out.Values[i] = ec._Movement_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Movement_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Movement_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Movement_isDeleted(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._Movement_organization(ctx, field, obj)
		case "direct":
			out.Values[i] = ec._Movement_direct(ctx, field, obj)
		case "destination":
			out.Values[i] = ec._Movement_destination(ctx, field, obj)
		case "person":
			out.Values[i] = ec._Movement_person(ctx, field, obj)
		case "job":
			out.Values[i] = ec._Movement_job(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Movement_amount(ctx, field, obj)
		case "link":
			out.Values[i] = ec._Movement_link(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var msgStatImplementors = []string{"MsgStat"}

func (ec *executionContext) _MsgStat(ctx context.Context, sel ast.SelectionSet, obj *models.MsgStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, msgStatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MsgStat")
		case "job":
			out.Values[i] = ec._MsgStat_job(ctx, field, obj)
		case "person":
			out.Values[i] = ec._MsgStat_person(ctx, field, obj)
		case "reading":
			out.Values[i] = ec._MsgStat_reading(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "ping":
			out.Values[i] = ec._Mutation_ping(ctx, field)
		case "movementMutation":
			out.Values[i] = ec._Mutation_movementMutation(ctx, field)
		case "addToBalance":
			out.Values[i] = ec._Mutation_addToBalance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parseAddress":
			out.Values[i] = ec._Mutation_parseAddress(ctx, field)
		case "countryMutation":
			out.Values[i] = ec._Mutation_countryMutation(ctx, field)
		case "regionMutation":
			out.Values[i] = ec._Mutation_regionMutation(ctx, field)
		case "areaMutation":
			out.Values[i] = ec._Mutation_areaMutation(ctx, field)
		case "cityMutation":
			out.Values[i] = ec._Mutation_cityMutation(ctx, field)
		case "cityDistrictMutation":
			out.Values[i] = ec._Mutation_cityDistrictMutation(ctx, field)
		case "settlementMutation":
			out.Values[i] = ec._Mutation_settlementMutation(ctx, field)
		case "streetMutation":
			out.Values[i] = ec._Mutation_streetMutation(ctx, field)
		case "addressMutation":
			out.Values[i] = ec._Mutation_addressMutation(ctx, field)
		case "contactMutation":
			out.Values[i] = ec._Mutation_contactMutation(ctx, field)
		case "contactTypeMutation":
			out.Values[i] = ec._Mutation_contactTypeMutation(ctx, field)
		case "JobFlowMutation":
			out.Values[i] = ec._Mutation_JobFlowMutation(ctx, field)
		case "publishJob":
			out.Values[i] = ec._Mutation_publishJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "agreeToJob":
			out.Values[i] = ec._Mutation_agreeToJob(ctx, field)
		case "refuseJob":
			out.Values[i] = ec._Mutation_refuseJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "check":
			out.Values[i] = ec._Mutation_check(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "onPlace":
			out.Values[i] = ec._Mutation_onPlace(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "conflictOnJob":
			out.Values[i] = ec._Mutation_conflictOnJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "changeStatusJob":
			out.Values[i] = ec._Mutation_changeStatusJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelJob":
			out.Values[i] = ec._Mutation_cancelJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rejectPerson":
			out.Values[i] = ec._Mutation_rejectPerson(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brokenJob":
			out.Values[i] = ec._Mutation_brokenJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closeJob":
			out.Values[i] = ec._Mutation_closeJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "runJob":
			out.Values[i] = ec._Mutation_runJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endJob":
			out.Values[i] = ec._Mutation_endJob(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addMsg":
			out.Values[i] = ec._Mutation_addMsg(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "readMsg":
			out.Values[i] = ec._Mutation_readMsg(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseMutate":
			out.Values[i] = ec._Mutation_courseMutate(ctx, field)
		case "localityJobCostMutate":
			out.Values[i] = ec._Mutation_localityJobCostMutate(ctx, field)
		case "jobTypeMutate":
			out.Values[i] = ec._Mutation_jobTypeMutate(ctx, field)
		case "jobTemplateMutate":
			out.Values[i] = ec._Mutation_jobTemplateMutate(ctx, field)
		case "jobMutate":
			out.Values[i] = ec._Mutation_jobMutate(ctx, field)
		case "candidateMutate":
			out.Values[i] = ec._Mutation_candidateMutate(ctx, field)
		case "statusMutate":
			out.Values[i] = ec._Mutation_statusMutate(ctx, field)
		case "tagMutate":
			out.Values[i] = ec._Mutation_tagMutate(ctx, field)
		case "massCreationJobs":
			out.Values[i] = ec._Mutation_massCreationJobs(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setJobRating":
			out.Values[i] = ec._Mutation_setJobRating(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "medicalBookMutation":
			out.Values[i] = ec._Mutation_medicalBookMutation(ctx, field)
		case "nationalityMutation":
			out.Values[i] = ec._Mutation_nationalityMutation(ctx, field)
		case "singleUpload":
			out.Values[i] = ec._Mutation_singleUpload(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "multipleUpload":
			out.Values[i] = ec._Mutation_multipleUpload(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organizationPositionMutation":
			out.Values[i] = ec._Mutation_organizationPositionMutation(ctx, field)
		case "organizationContactMutation":
			out.Values[i] = ec._Mutation_organizationContactMutation(ctx, field)
		case "organizationMutation":
			out.Values[i] = ec._Mutation_organizationMutation(ctx, field)
		case "excludePerson":
			out.Values[i] = ec._Mutation_excludePerson(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "excludePersonInObject":
			out.Values[i] = ec._Mutation_excludePersonInObject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dropOrganization":
			out.Values[i] = ec._Mutation_dropOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeParent":
			out.Values[i] = ec._Mutation_removeParent(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passportMutation":
			out.Values[i] = ec._Mutation_passportMutation(ctx, field)
		case "personMutation":
			out.Values[i] = ec._Mutation_personMutation(ctx, field)
		case "personCourseMutation":
			out.Values[i] = ec._Mutation_personCourseMutation(ctx, field)
		case "personRatingMutation":
			out.Values[i] = ec._Mutation_personRatingMutation(ctx, field)
		case "agreement":
			out.Values[i] = ec._Mutation_agreement(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeContact":
			out.Values[i] = ec._Mutation_removeContact(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reqToPartner":
			out.Values[i] = ec._Mutation_reqToPartner(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roleMutation":
			out.Values[i] = ec._Mutation_roleMutation(ctx, field)
		case "validate":
			out.Values[i] = ec._Mutation_validate(ctx, field)
		case "userMutation":
			out.Values[i] = ec._Mutation_userMutation(ctx, field)
		case "resetUser":
			out.Values[i] = ec._Mutation_resetUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateToken":
			out.Values[i] = ec._Mutation_updateToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nationalityImplementors = []string{"Nationality"}

func (ec *executionContext) _Nationality(ctx context.Context, sel ast.SelectionSet, obj *models.Nationality) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nationalityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Nationality")
		case "uuid":
			out.Values[i] = ec._Nationality_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Nationality_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Nationality_updated(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Nationality_name(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Nationality_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationImplementors = []string{"Organization"}

func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *models.Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "uuid":
			out.Values[i] = ec._Organization_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Organization_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Organization_updated(ctx, field, obj)
		case "isGroup":
			out.Values[i] = ec._Organization_isGroup(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Organization_name(ctx, field, obj)
		case "inn":
			out.Values[i] = ec._Organization_inn(ctx, field, obj)
		case "kpp":
			out.Values[i] = ec._Organization_kpp(ctx, field, obj)
		case "addressLegal":
			out.Values[i] = ec._Organization_addressLegal(ctx, field, obj)
		case "addressFact":
			out.Values[i] = ec._Organization_addressFact(ctx, field, obj)
		case "parent":
			out.Values[i] = ec._Organization_parent(ctx, field, obj)
		case "parentOrganization":
			out.Values[i] = ec._Organization_parentOrganization(ctx, field, obj)
		case "departments":
			out.Values[i] = ec._Organization_departments(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Organization_isDeleted(ctx, field, obj)
		case "logo":
			out.Values[i] = ec._Organization_logo(ctx, field, obj)
		case "prefix":
			out.Values[i] = ec._Organization_prefix(ctx, field, obj)
		case "fullName":
			out.Values[i] = ec._Organization_fullName(ctx, field, obj)
		case "shortName":
			out.Values[i] = ec._Organization_shortName(ctx, field, obj)
		case "fee":
			out.Values[i] = ec._Organization_fee(ctx, field, obj)
		case "firstReserveReward":
			out.Values[i] = ec._Organization_firstReserveReward(ctx, field, obj)
		case "secondReserveReward":
			out.Values[i] = ec._Organization_secondReserveReward(ctx, field, obj)
		case "persons":
			out.Values[i] = ec._Organization_persons(ctx, field, obj)
		case "stDistance":
			out.Values[i] = ec._Organization_stDistance(ctx, field, obj)
		case "stTime":
			out.Values[i] = ec._Organization_stTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationContactImplementors = []string{"OrganizationContact"}

func (ec *executionContext) _OrganizationContact(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationContactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationContact")
		case "uuid":
			out.Values[i] = ec._OrganizationContact_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._OrganizationContact_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._OrganizationContact_updated(ctx, field, obj)
		case "position":
			out.Values[i] = ec._OrganizationContact_position(ctx, field, obj)
		case "person":
			out.Values[i] = ec._OrganizationContact_person(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._OrganizationContact_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationPositionImplementors = []string{"OrganizationPosition"}

func (ec *executionContext) _OrganizationPosition(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationPosition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPositionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPosition")
		case "uuid":
			out.Values[i] = ec._OrganizationPosition_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._OrganizationPosition_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._OrganizationPosition_updated(ctx, field, obj)
		case "name":
			out.Values[i] = ec._OrganizationPosition_name(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._OrganizationPosition_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var passportImplementors = []string{"Passport"}

func (ec *executionContext) _Passport(ctx context.Context, sel ast.SelectionSet, obj *models.Passport) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, passportImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Passport")
		case "uuid":
			out.Values[i] = ec._Passport_uuid(ctx, field, obj)
		case "serial":
			out.Values[i] = ec._Passport_serial(ctx, field, obj)
		case "number":
			out.Values[i] = ec._Passport_number(ctx, field, obj)
		case "departmentCode":
			out.Values[i] = ec._Passport_departmentCode(ctx, field, obj)
		case "department":
			out.Values[i] = ec._Passport_department(ctx, field, obj)
		case "dateIssue":
			out.Values[i] = ec._Passport_dateIssue(ctx, field, obj)
		case "person":
			out.Values[i] = ec._Passport_person(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Passport_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Passport_updated(ctx, field, obj)
		case "scan":
			out.Values[i] = ec._Passport_scan(ctx, field, obj)
		case "addressRegistration":
			out.Values[i] = ec._Passport_addressRegistration(ctx, field, obj)
		case "photoRegistration":
			out.Values[i] = ec._Passport_photoRegistration(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Passport_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionImplementors = []string{"Permission"}

func (ec *executionContext) _Permission(ctx context.Context, sel ast.SelectionSet, obj *models.Permission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Permission")
		case "uuid":
			out.Values[i] = ec._Permission_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Permission_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Permission_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Permission_isDeleted(ctx, field, obj)
		case "object":
			out.Values[i] = ec._Permission_object(ctx, field, obj)
		case "insert":
			out.Values[i] = ec._Permission_insert(ctx, field, obj)
		case "read":
			out.Values[i] = ec._Permission_read(ctx, field, obj)
		case "update":
			out.Values[i] = ec._Permission_update(ctx, field, obj)
		case "delete":
			out.Values[i] = ec._Permission_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personImplementors = []string{"Person"}

func (ec *executionContext) _Person(ctx context.Context, sel ast.SelectionSet, obj *models.Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Person")
		case "uuid":
			out.Values[i] = ec._Person_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Person_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Person_updated(ctx, field, obj)
		case "user":
			out.Values[i] = ec._Person_user(ctx, field, obj)
		case "actualContact":
			out.Values[i] = ec._Person_actualContact(ctx, field, obj)
		case "contacts":
			out.Values[i] = ec._Person_contacts(ctx, field, obj)
		case "passport":
			out.Values[i] = ec._Person_passport(ctx, field, obj)
		case "surname":
			out.Values[i] = ec._Person_surname(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Person_name(ctx, field, obj)
		case "patronymic":
			out.Values[i] = ec._Person_patronymic(ctx, field, obj)
		case "birthDate":
			out.Values[i] = ec._Person_birthDate(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Person_gender(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Person_country(ctx, field, obj)
		case "inn":
			out.Values[i] = ec._Person_inn(ctx, field, obj)
		case "medicalBook":
			out.Values[i] = ec._Person_medicalBook(ctx, field, obj)
		case "photo":
			out.Values[i] = ec._Person_photo(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Person_isDeleted(ctx, field, obj)
		case "position":
			out.Values[i] = ec._Person_position(ctx, field, obj)
		case "isContact":
			out.Values[i] = ec._Person_isContact(ctx, field, obj)
		case "recognizeResult":
			out.Values[i] = ec._Person_recognizeResult(ctx, field, obj)
		case "distanceResult":
			out.Values[i] = ec._Person_distanceResult(ctx, field, obj)
		case "recognizedFields":
			out.Values[i] = ec._Person_recognizedFields(ctx, field, obj)
		case "validated":
			out.Values[i] = ec._Person_validated(ctx, field, obj)
		case "rating":
			out.Values[i] = ec._Person_rating(ctx, field, obj)
		case "taxPayment":
			out.Values[i] = ec._Person_taxPayment(ctx, field, obj)
		case "incomeRegistration":
			out.Values[i] = ec._Person_incomeRegistration(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personCourseImplementors = []string{"PersonCourse"}

func (ec *executionContext) _PersonCourse(ctx context.Context, sel ast.SelectionSet, obj *models.PersonCourse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personCourseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonCourse")
		case "uuid":
			out.Values[i] = ec._PersonCourse_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._PersonCourse_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._PersonCourse_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._PersonCourse_isDeleted(ctx, field, obj)
		case "person":
			out.Values[i] = ec._PersonCourse_person(ctx, field, obj)
		case "course":
			out.Values[i] = ec._PersonCourse_course(ctx, field, obj)
		case "questions":
			out.Values[i] = ec._PersonCourse_questions(ctx, field, obj)
		case "answers":
			out.Values[i] = ec._PersonCourse_answers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personRatingImplementors = []string{"PersonRating"}

func (ec *executionContext) _PersonRating(ctx context.Context, sel ast.SelectionSet, obj *models.PersonRating) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personRatingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonRating")
		case "uuid":
			out.Values[i] = ec._PersonRating_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._PersonRating_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._PersonRating_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._PersonRating_isDeleted(ctx, field, obj)
		case "person":
			out.Values[i] = ec._PersonRating_person(ctx, field, obj)
		case "job":
			out.Values[i] = ec._PersonRating_job(ctx, field, obj)
		case "rating":
			out.Values[i] = ec._PersonRating_rating(ctx, field, obj)
		case "description":
			out.Values[i] = ec._PersonRating_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personValidateStatusImplementors = []string{"PersonValidateStatus"}

func (ec *executionContext) _PersonValidateStatus(ctx context.Context, sel ast.SelectionSet, obj *models.PersonValidateStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personValidateStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonValidateStatus")
		case "passport":
			out.Values[i] = ec._PersonValidateStatus_passport(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._PersonValidateStatus_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "ping":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ping(ctx, field)
				return res
			})
		case "movement":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_movement(ctx, field)
				return res
			})
		case "movements":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_movements(ctx, field)
				return res
			})
		case "flowBalance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_flowBalance(ctx, field)
				return res
			})
		case "getBalance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBalance(ctx, field)
				return res
			})
		case "statistics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_statistics(ctx, field)
				return res
			})
		case "country":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_country(ctx, field)
				return res
			})
		case "countries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_countries(ctx, field)
				return res
			})
		case "region":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_region(ctx, field)
				return res
			})
		case "regions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_regions(ctx, field)
				return res
			})
		case "area":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_area(ctx, field)
				return res
			})
		case "areas":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_areas(ctx, field)
				return res
			})
		case "city":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_city(ctx, field)
				return res
			})
		case "cities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cities(ctx, field)
				return res
			})
		case "cityDistrict":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cityDistrict(ctx, field)
				return res
			})
		case "cityDistricts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cityDistricts(ctx, field)
				return res
			})
		case "settlement":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_settlement(ctx, field)
				return res
			})
		case "settlements":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_settlements(ctx, field)
				return res
			})
		case "street":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_street(ctx, field)
				return res
			})
		case "streets":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_streets(ctx, field)
				return res
			})
		case "address":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_address(ctx, field)
				return res
			})
		case "addresses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addresses(ctx, field)
				return res
			})
		case "contact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contact(ctx, field)
				return res
			})
		case "contacts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contacts(ctx, field)
				return res
			})
		case "contactType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contactType(ctx, field)
				return res
			})
		case "contactTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contactTypes(ctx, field)
				return res
			})
		case "JobFlow":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_JobFlow(ctx, field)
				return res
			})
		case "runJobRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_runJobRequest(ctx, field)
				return res
			})
		case "endJobRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_endJobRequest(ctx, field)
				return res
			})
		case "signToHotJob":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_signToHotJob(ctx, field)
				return res
			})
		case "getMsgStats":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMsgStats(ctx, field)
				return res
			})
		case "userMsg":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userMsg(ctx, field)
				return res
			})
		case "getTypeJobIcons":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTypeJobIcons(ctx, field)
				return res
			})
		case "course":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_course(ctx, field)
				return res
			})
		case "courses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_courses(ctx, field)
				return res
			})
		case "localityJobCost":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_localityJobCost(ctx, field)
				return res
			})
		case "localityJobCosts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_localityJobCosts(ctx, field)
				return res
			})
		case "jobType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_jobType(ctx, field)
				return res
			})
		case "jobTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_jobTypes(ctx, field)
				return res
			})
		case "jobTemplate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_jobTemplate(ctx, field)
				return res
			})
		case "jobTemplates":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_jobTemplates(ctx, field)
				return res
			})
		case "job":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_job(ctx, field)
				return res
			})
		case "jobs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_jobs(ctx, field)
				return res
			})
		case "activeJobs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activeJobs(ctx, field)
				return res
			})
		case "candidate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_candidate(ctx, field)
				return res
			})
		case "candidates":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_candidates(ctx, field)
				return res
			})
		case "status":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_status(ctx, field)
				return res
			})
		case "statuses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_statuses(ctx, field)
				return res
			})
		case "tag":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tag(ctx, field)
				return res
			})
		case "tags":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tags(ctx, field)
				return res
			})
		case "medicalBook":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_medicalBook(ctx, field)
				return res
			})
		case "medicalBooks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_medicalBooks(ctx, field)
				return res
			})
		case "nationality":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nationality(ctx, field)
				return res
			})
		case "nationalities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nationalities(ctx, field)
				return res
			})
		case "organizationPosition":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationPosition(ctx, field)
				return res
			})
		case "organizationPositions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationPositions(ctx, field)
				return res
			})
		case "organizationContact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationContact(ctx, field)
				return res
			})
		case "organizationContacts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationContacts(ctx, field)
				return res
			})
		case "organization":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organization(ctx, field)
				return res
			})
		case "organizations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizations(ctx, field)
				return res
			})
		case "getOrganizationRating":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrganizationRating(ctx, field)
				return res
			})
		case "passport":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_passport(ctx, field)
				return res
			})
		case "passports":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_passports(ctx, field)
				return res
			})
		case "person":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_person(ctx, field)
				return res
			})
		case "persons":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_persons(ctx, field)
				return res
			})
		case "parsePerson":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_parsePerson(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "validateINN":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_validateINN(ctx, field)
				return res
			})
		case "personCourses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_personCourses(ctx, field)
				return res
			})
		case "getPersonRating":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPersonRating(ctx, field)
				return res
			})
		case "getMyRating":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMyRating(ctx, field)
				return res
			})
		case "personRating":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_personRating(ctx, field)
				return res
			})
		case "personRatings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_personRatings(ctx, field)
				return res
			})
		case "getSelfEmployerStatus":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSelfEmployerStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "personTax":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_personTax(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "role":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_role(ctx, field)
				return res
			})
		case "roles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_roles(ctx, field)
				return res
			})
		case "authUserByPhone":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authUserByPhone(ctx, field)
				return res
			})
		case "regUserByPhone":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_regUserByPhone(ctx, field)
				return res
			})
		case "getCurrentUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCurrentUser(ctx, field)
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				return res
			})
		case "usersByObject":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_usersByObject(ctx, field)
				return res
			})
		case "userLocation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userLocation(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recognizedFieldImplementors = []string{"RecognizedField"}

func (ec *executionContext) _RecognizedField(ctx context.Context, sel ast.SelectionSet, obj *models.RecognizedField) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recognizedFieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecognizedField")
		case "result":
			out.Values[i] = ec._RecognizedField_result(ctx, field, obj)
		case "confidence":
			out.Values[i] = ec._RecognizedField_confidence(ctx, field, obj)
		case "valid":
			out.Values[i] = ec._RecognizedField_valid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recognizedFieldsImplementors = []string{"RecognizedFields"}

func (ec *executionContext) _RecognizedFields(ctx context.Context, sel ast.SelectionSet, obj *models.RecognizedFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recognizedFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecognizedFields")
		case "error":
			out.Values[i] = ec._RecognizedFields_error(ctx, field, obj)
		case "surname":
			out.Values[i] = ec._RecognizedFields_surname(ctx, field, obj)
		case "name":
			out.Values[i] = ec._RecognizedFields_name(ctx, field, obj)
		case "patronymic":
			out.Values[i] = ec._RecognizedFields_patronymic(ctx, field, obj)
		case "birthDate":
			out.Values[i] = ec._RecognizedFields_birthDate(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._RecognizedFields_gender(ctx, field, obj)
		case "serial":
			out.Values[i] = ec._RecognizedFields_serial(ctx, field, obj)
		case "number":
			out.Values[i] = ec._RecognizedFields_number(ctx, field, obj)
		case "department":
			out.Values[i] = ec._RecognizedFields_department(ctx, field, obj)
		case "dateIssue":
			out.Values[i] = ec._RecognizedFields_dateIssue(ctx, field, obj)
		case "departmentCode":
			out.Values[i] = ec._RecognizedFields_departmentCode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionImplementors = []string{"Region"}

func (ec *executionContext) _Region(ctx context.Context, sel ast.SelectionSet, obj *models.Region) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Region")
		case "uuid":
			out.Values[i] = ec._Region_uuid(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Region_name(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Region_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Region_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Region_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rightToObjectImplementors = []string{"RightToObject"}

func (ec *executionContext) _RightToObject(ctx context.Context, sel ast.SelectionSet, obj *models.RightToObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rightToObjectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RightToObject")
		case "object":
			out.Values[i] = ec._RightToObject_object(ctx, field, obj)
		case "select":
			out.Values[i] = ec._RightToObject_select(ctx, field, obj)
		case "insert":
			out.Values[i] = ec._RightToObject_insert(ctx, field, obj)
		case "update":
			out.Values[i] = ec._RightToObject_update(ctx, field, obj)
		case "delete":
			out.Values[i] = ec._RightToObject_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *models.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "uuid":
			out.Values[i] = ec._Role_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Role_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Role_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Role_isDeleted(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Role_name(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._Role_organization(ctx, field, obj)
		case "roleType":
			out.Values[i] = ec._Role_roleType(ctx, field, obj)
		case "permissions":
			out.Values[i] = ec._Role_permissions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var settlementImplementors = []string{"Settlement"}

func (ec *executionContext) _Settlement(ctx context.Context, sel ast.SelectionSet, obj *models.Settlement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, settlementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Settlement")
		case "uuid":
			out.Values[i] = ec._Settlement_uuid(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Settlement_region(ctx, field, obj)
		case "area":
			out.Values[i] = ec._Settlement_area(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Settlement_city(ctx, field, obj)
		case "cityDistrict":
			out.Values[i] = ec._Settlement_cityDistrict(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Settlement_name(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Settlement_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Settlement_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Settlement_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statusImplementors = []string{"Status"}

func (ec *executionContext) _Status(ctx context.Context, sel ast.SelectionSet, obj *models.Status) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Status")
		case "uuid":
			out.Values[i] = ec._Status_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Status_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Status_updated(ctx, field, obj)
		case "person":
			out.Values[i] = ec._Status_person(ctx, field, obj)
		case "job":
			out.Values[i] = ec._Status_job(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Status_status(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Status_description(ctx, field, obj)
		case "content":
			out.Values[i] = ec._Status_content(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Status_tags(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Status_isDeleted(ctx, field, obj)
		case "lat":
			out.Values[i] = ec._Status_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._Status_lon(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var streetImplementors = []string{"Street"}

func (ec *executionContext) _Street(ctx context.Context, sel ast.SelectionSet, obj *models.Street) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, streetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Street")
		case "uuid":
			out.Values[i] = ec._Street_uuid(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Street_region(ctx, field, obj)
		case "area":
			out.Values[i] = ec._Street_area(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Street_city(ctx, field, obj)
		case "cityDistrict":
			out.Values[i] = ec._Street_cityDistrict(ctx, field, obj)
		case "settlement":
			out.Values[i] = ec._Street_settlement(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Street_name(ctx, field, obj)
		case "created":
			out.Values[i] = ec._Street_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._Street_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Street_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "pingSub":
		return ec._Subscription_pingSub(ctx, fields[0])
	case "regionSub":
		return ec._Subscription_regionSub(ctx, fields[0])
	case "areaSub":
		return ec._Subscription_areaSub(ctx, fields[0])
	case "citySub":
		return ec._Subscription_citySub(ctx, fields[0])
	case "msgStatSub":
		return ec._Subscription_msgStatSub(ctx, fields[0])
	case "jobSub":
		return ec._Subscription_jobSub(ctx, fields[0])
	case "organizationSub":
		return ec._Subscription_organizationSub(ctx, fields[0])
	case "parsePersonSub":
		return ec._Subscription_parsePersonSub(ctx, fields[0])
	case "personSub":
		return ec._Subscription_personSub(ctx, fields[0])
	case "userSub":
		return ec._Subscription_userSub(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *models.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "uuid":
			out.Values[i] = ec._Tag_uuid(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Tag_isDeleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taxesImplementors = []string{"Taxes"}

func (ec *executionContext) _Taxes(ctx context.Context, sel ast.SelectionSet, obj *models.Taxes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taxesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Taxes")
		case "proceeds":
			out.Values[i] = ec._Taxes_proceeds(ctx, field, obj)
		case "preliminary":
			out.Values[i] = ec._Taxes_preliminary(ctx, field, obj)
		case "tax":
			out.Values[i] = ec._Taxes_tax(ctx, field, obj)
		case "penalty":
			out.Values[i] = ec._Taxes_penalty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var templateRightsImplementors = []string{"TemplateRights"}

func (ec *executionContext) _TemplateRights(ctx context.Context, sel ast.SelectionSet, obj *models.TemplateRights) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateRightsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateRights")
		case "uuid":
			out.Values[i] = ec._TemplateRights_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._TemplateRights_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._TemplateRights_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._TemplateRights_isDeleted(ctx, field, obj)
		case "name":
			out.Values[i] = ec._TemplateRights_name(ctx, field, obj)
		case "rightsToObject":
			out.Values[i] = ec._TemplateRights_rightsToObject(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "uuid":
			out.Values[i] = ec._User_uuid(ctx, field, obj)
		case "created":
			out.Values[i] = ec._User_created(ctx, field, obj)
		case "updated":
			out.Values[i] = ec._User_updated(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._User_isDeleted(ctx, field, obj)
		case "isBlocked":
			out.Values[i] = ec._User_isBlocked(ctx, field, obj)
		case "isDisabled":
			out.Values[i] = ec._User_isDisabled(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._User_contact(ctx, field, obj)
		case "person":
			out.Values[i] = ec._User_person(ctx, field, obj)
		case "userType":
			out.Values[i] = ec._User_userType(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._User_organization(ctx, field, obj)
		case "groups":
			out.Values[i] = ec._User_groups(ctx, field, obj)
		case "objects":
			out.Values[i] = ec._User_objects(ctx, field, obj)
		case "role":
			out.Values[i] = ec._User_role(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statImplementors = []string{"stat"}

func (ec *executionContext) _stat(ctx context.Context, sel ast.SelectionSet, obj *models.Stat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("stat")
		case "month":
			out.Values[i] = ec._stat_month(ctx, field, obj)
		case "previousMonth":
			out.Values[i] = ec._stat_previousMonth(ctx, field, obj)
		case "quarter":
			out.Values[i] = ec._stat_quarter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNContactInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx context.Context, v interface{}) (models.Contact, error) {
	res, err := ec.unmarshalInputContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJobInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx context.Context, v interface{}) (models.Job, error) {
	res, err := ec.unmarshalInputJobInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobSort2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobSort(ctx context.Context, v interface{}) (models.JobSort, error) {
	res, err := ec.unmarshalInputJobSort(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobTemplateInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx context.Context, v interface{}) (models.JobTemplate, error) {
	res, err := ec.unmarshalInputJobTemplateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMedicalBookInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx context.Context, v interface{}) (models.MedicalBook, error) {
	res, err := ec.unmarshalInputMedicalBookInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrganizationInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx context.Context, v interface{}) (models.Organization, error) {
	res, err := ec.unmarshalInputOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPassportInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx context.Context, v interface{}) (models.Passport, error) {
	res, err := ec.unmarshalInputPassportInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPassportSort2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassportSort(ctx context.Context, v interface{}) (models.PassportSort, error) {
	res, err := ec.unmarshalInputPassportSort(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPersonInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx context.Context, v interface{}) (models.Person, error) {
	res, err := ec.unmarshalInputPersonInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPersonRating2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx context.Context, sel ast.SelectionSet, v models.PersonRating) graphql.Marshaler {
	return ec._PersonRating(ctx, sel, &v)
}

func (ec *executionContext) marshalNPersonRating2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx context.Context, sel ast.SelectionSet, v *models.PersonRating) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PersonRating(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPersonSort2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonSort(ctx context.Context, v interface{}) (models.PersonSort, error) {
	res, err := ec.unmarshalInputPersonSort(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPersonValidateStatus2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonValidateStatus(ctx context.Context, sel ast.SelectionSet, v models.PersonValidateStatus) graphql.Marshaler {
	return ec._PersonValidateStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNPersonValidateStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonValidateStatus(ctx context.Context, sel ast.SelectionSet, v *models.PersonValidateStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PersonValidateStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNRecognizedFields2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedFields(ctx context.Context, sel ast.SelectionSet, v models.RecognizedFields) graphql.Marshaler {
	return ec._RecognizedFields(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecognizedFields2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedFields(ctx context.Context, sel ast.SelectionSet, v *models.RecognizedFields) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecognizedFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResourceAttributes2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋdirectivesᚐResourceAttributes(ctx context.Context, v interface{}) (directives.ResourceAttributes, error) {
	res, err := ec.unmarshalInputResourceAttributes(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTaxes2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTaxes(ctx context.Context, sel ast.SelectionSet, v models.Taxes) graphql.Marshaler {
	return ec._Taxes(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaxes2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTaxes(ctx context.Context, sel ast.SelectionSet, v *models.Taxes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Taxes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (uuid.UUID, error) {
	res, err := models.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := models.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v interface{}) ([]uuid.UUID, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (*uuid.UUID, error) {
	res, err := models.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := models.MarshalUUID(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpload2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUploadᚄ(ctx context.Context, v interface{}) ([]graphql.Upload, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]graphql.Upload, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNUpload2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUploadᚄ(ctx context.Context, sel ast.SelectionSet, v []graphql.Upload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNUserSort2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSort(ctx context.Context, v interface{}) (models.UserSort, error) {
	res, err := ec.unmarshalInputUserSort(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAddress2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx context.Context, sel ast.SelectionSet, v []*models.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAddress2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAddress2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx context.Context, sel ast.SelectionSet, v *models.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Address(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAddressFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddressFilter(ctx context.Context, v interface{}) ([]*models.AddressFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.AddressFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAddressFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddressFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAddressFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddressFilter(ctx context.Context, v interface{}) (*models.AddressFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddressFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAddressInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAddress(ctx context.Context, v interface{}) (*models.Address, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArea2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx context.Context, sel ast.SelectionSet, v []*models.Area) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOArea2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx context.Context, sel ast.SelectionSet, v *models.Area) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Area(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAreaFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐAreaFilter(ctx context.Context, v interface{}) (*models.AreaFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAreaFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAreaInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐArea(ctx context.Context, v interface{}) (*models.Area, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAreaInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBalance2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐBalance(ctx context.Context, sel ast.SelectionSet, v []*models.Balance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBalance2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐBalance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBalance2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐBalance(ctx context.Context, sel ast.SelectionSet, v *models.Balance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Balance(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCandidate2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx context.Context, sel ast.SelectionSet, v []*models.Candidate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCandidate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCandidate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx context.Context, sel ast.SelectionSet, v *models.Candidate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Candidate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCandidateInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx context.Context, v interface{}) ([]*models.Candidate, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Candidate, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCandidateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCandidateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidate(ctx context.Context, v interface{}) (*models.Candidate, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateTags2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidateTags(ctx context.Context, v interface{}) (*models.CandidateTags, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.CandidateTags)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCandidateTags2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCandidateTags(ctx context.Context, sel ast.SelectionSet, v *models.CandidateTags) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCity2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx context.Context, sel ast.SelectionSet, v []*models.City) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCity2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx context.Context, sel ast.SelectionSet, v *models.City) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._City(ctx, sel, v)
}

func (ec *executionContext) marshalOCityDistrict2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx context.Context, sel ast.SelectionSet, v []*models.CityDistrict) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCityDistrict2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCityDistrict2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx context.Context, sel ast.SelectionSet, v *models.CityDistrict) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CityDistrict(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCityDistrictFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrictFilter(ctx context.Context, v interface{}) (*models.CityDistrictFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCityDistrictFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCityDistrictInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityDistrict(ctx context.Context, v interface{}) (*models.CityDistrict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCityDistrictInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCityFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCityFilter(ctx context.Context, v interface{}) (*models.CityFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCityFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCity(ctx context.Context, v interface{}) (*models.City, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOClientType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐClientType(ctx context.Context, v interface{}) (*models.ClientType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.ClientType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOClientType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐClientType(ctx context.Context, sel ast.SelectionSet, v *models.ClientType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOContact2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx context.Context, sel ast.SelectionSet, v []*models.Contact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx context.Context, sel ast.SelectionSet, v *models.Contact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Contact(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContactFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactFilter(ctx context.Context, v interface{}) ([]*models.ContactFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.ContactFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContactFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContactFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactFilter(ctx context.Context, v interface{}) (*models.ContactFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContactInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx context.Context, v interface{}) ([]*models.Contact, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Contact, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContact(ctx context.Context, v interface{}) (*models.Contact, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContactType2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx context.Context, sel ast.SelectionSet, v []*models.ContactType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContactType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOContactType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx context.Context, sel ast.SelectionSet, v *models.ContactType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContactType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContactTypeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactTypeFilter(ctx context.Context, v interface{}) (*models.ContactTypeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactTypeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContactTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContactType(ctx context.Context, v interface{}) (*models.ContactType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactTypeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContent2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx context.Context, sel ast.SelectionSet, v []*models.Content) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContent2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOContent2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx context.Context, sel ast.SelectionSet, v *models.Content) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Content(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContentInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx context.Context, v interface{}) ([]*models.Content, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Content, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContentInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContentInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐContent(ctx context.Context, v interface{}) (*models.Content, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCountry2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx context.Context, sel ast.SelectionSet, v []*models.Country) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCountry2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCountry2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx context.Context, sel ast.SelectionSet, v *models.Country) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCountryFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountryFilter(ctx context.Context, v interface{}) (*models.CountryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCountryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCountryInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCountry(ctx context.Context, v interface{}) (*models.Country, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCountryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCourse2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx context.Context, sel ast.SelectionSet, v []*models.Course) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCourse2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCourse2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx context.Context, sel ast.SelectionSet, v *models.Course) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Course(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCourseInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx context.Context, v interface{}) ([]*models.Course, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Course, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourse(ctx context.Context, v interface{}) (*models.Course, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCourseInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCourseType2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourseType(ctx context.Context, v interface{}) (models.CourseType, error) {
	var res models.CourseType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCourseType2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourseType(ctx context.Context, sel ast.SelectionSet, v models.CourseType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCourseType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourseType(ctx context.Context, v interface{}) (*models.CourseType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.CourseType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCourseType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐCourseType(ctx context.Context, sel ast.SelectionSet, v *models.CourseType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODate2ᚕᚖtimeᚐTime(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODate2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODate2ᚕᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalODate2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalODate2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalDate(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return models.MarshalDate(*v)
}

func (ec *executionContext) unmarshalODateFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateFilter(ctx context.Context, v interface{}) (*models.DateFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDateFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateTime2ᚕᚖtimeᚐTime(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODateTime2ᚕᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalODateTime2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalODateTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalDateTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return models.MarshalDateTime(*v)
}

func (ec *executionContext) unmarshalODateTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDateTimeFilter(ctx context.Context, v interface{}) (*models.DateTimeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDateTimeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODestinationMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDestinationMovement(ctx context.Context, v interface{}) (*models.DestinationMovement, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.DestinationMovement)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODestinationMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDestinationMovement(ctx context.Context, sel ast.SelectionSet, v *models.DestinationMovement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODirect2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDirect(ctx context.Context, v interface{}) (*models.Direct, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.Direct)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODirect2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐDirect(ctx context.Context, sel ast.SelectionSet, v *models.Direct) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODuration2ᚖtimeᚐDuration(ctx context.Context, v interface{}) (*time.Duration, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalDuration(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODuration2ᚖtimeᚐDuration(ctx context.Context, sel ast.SelectionSet, v *time.Duration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return models.MarshalDuration(*v)
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚕᚖfloat64(ctx context.Context, v interface{}) ([]*float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFloat2ᚖfloat64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕᚖfloat64(ctx context.Context, sel ast.SelectionSet, v []*float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOFloat2ᚖfloat64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOFloatFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐFloatFilter(ctx context.Context, v interface{}) (*models.FloatFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFloatFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGender2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐGender(ctx context.Context, v interface{}) (*models.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.Gender)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGender2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐGender(ctx context.Context, sel ast.SelectionSet, v *models.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOInfoAboutJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐInfoAboutJob(ctx context.Context, sel ast.SelectionSet, v *models.InfoAboutJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InfoAboutJob(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOIntFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐIntFilter(ctx context.Context, v interface{}) (*models.IntFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJSON2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalJSON(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSON2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return models.MarshalJSON(v)
}

func (ec *executionContext) marshalOJob2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx context.Context, sel ast.SelectionSet, v []*models.Job) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOJob2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx context.Context, sel ast.SelectionSet, v *models.Job) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Job(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobFilter2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx context.Context, v interface{}) (models.JobFilter, error) {
	res, err := ec.unmarshalInputJobFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobFilter2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx context.Context, v interface{}) ([]models.JobFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models.JobFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOJobFilter2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJobFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFilter(ctx context.Context, v interface{}) (*models.JobFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobFlow2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFlow(ctx context.Context, sel ast.SelectionSet, v *models.JobFlow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobFlow(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobFlowInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobFlow(ctx context.Context, v interface{}) (*models.JobFlow, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobFlowInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJob(ctx context.Context, v interface{}) (*models.Job, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobSortᚄ(ctx context.Context, v interface{}) ([]models.JobSort, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models.JobSort, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJobSort2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobSort(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJobSortableField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobSortableField(ctx context.Context, v interface{}) (*models.JobSortableField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.JobSortableField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobSortableField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobSortableField(ctx context.Context, sel ast.SelectionSet, v *models.JobSortableField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOJobStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobStatus(ctx context.Context, v interface{}) (*models.JobStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.JobStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobStatus(ctx context.Context, sel ast.SelectionSet, v *models.JobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOJobTemplate2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx context.Context, sel ast.SelectionSet, v []*models.JobTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobTemplate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOJobTemplate2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx context.Context, sel ast.SelectionSet, v *models.JobTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobTemplateFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplateFilter(ctx context.Context, v interface{}) (*models.JobTemplateFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobTemplateFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobTemplateInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTemplate(ctx context.Context, v interface{}) (*models.JobTemplate, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobTemplateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobType2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx context.Context, sel ast.SelectionSet, v []*models.JobType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOJobType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx context.Context, sel ast.SelectionSet, v *models.JobType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobTypeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTypeFilter(ctx context.Context, v interface{}) (*models.JobTypeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobTypeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobTypeIcon2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTypeIcon(ctx context.Context, v interface{}) (*models.JobTypeIcon, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.JobTypeIcon)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobTypeIcon2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobTypeIcon(ctx context.Context, sel ast.SelectionSet, v *models.JobTypeIcon) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOJobTypeInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐJobType(ctx context.Context, v interface{}) (*models.JobType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobTypeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLocalityJobCost2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx context.Context, sel ast.SelectionSet, v []*models.LocalityJobCost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLocalityJobCost2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLocalityJobCost2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx context.Context, sel ast.SelectionSet, v *models.LocalityJobCost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LocalityJobCost(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLocalityJobCostInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx context.Context, v interface{}) ([]*models.LocalityJobCost, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.LocalityJobCost, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLocalityJobCostInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLocalityJobCostInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐLocalityJobCost(ctx context.Context, v interface{}) (*models.LocalityJobCost, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLocalityJobCostInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMedicalBook2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx context.Context, sel ast.SelectionSet, v []*models.MedicalBook) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMedicalBook2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMedicalBook2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx context.Context, sel ast.SelectionSet, v *models.MedicalBook) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MedicalBook(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMedicalBookInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMedicalBook(ctx context.Context, v interface{}) (*models.MedicalBook, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMedicalBookInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMovement2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx context.Context, sel ast.SelectionSet, v []*models.Movement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMovement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx context.Context, sel ast.SelectionSet, v *models.Movement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Movement(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMovementFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovementFilter(ctx context.Context, v interface{}) ([]*models.MovementFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.MovementFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMovementFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovementFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMovementFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovementFilter(ctx context.Context, v interface{}) (*models.MovementFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMovementFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMovementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMovement(ctx context.Context, v interface{}) (*models.Movement, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMovementInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMsgStat2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMsgStat(ctx context.Context, sel ast.SelectionSet, v []*models.MsgStat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMsgStat2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMsgStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMsgStat2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐMsgStat(ctx context.Context, sel ast.SelectionSet, v *models.MsgStat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MsgStat(ctx, sel, v)
}

func (ec *executionContext) marshalONationality2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx context.Context, sel ast.SelectionSet, v []*models.Nationality) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONationality2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONationality2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx context.Context, sel ast.SelectionSet, v *models.Nationality) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Nationality(ctx, sel, v)
}

func (ec *executionContext) unmarshalONationalityInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐNationality(ctx context.Context, v interface{}) (*models.Nationality, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNationalityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrganization2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx context.Context, sel ast.SelectionSet, v []*models.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganization2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *models.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationContact2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx context.Context, sel ast.SelectionSet, v []*models.OrganizationContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganizationContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganizationContact2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationContact(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrganizationContactInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationContact(ctx context.Context, v interface{}) (*models.OrganizationContact, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationContactInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrganizationFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationFilter(ctx context.Context, v interface{}) (*models.OrganizationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrganizationInput2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationᚄ(ctx context.Context, v interface{}) ([]models.Organization, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models.Organization, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOrganizationInput2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOrganizationInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx context.Context, v interface{}) ([]*models.Organization, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Organization, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOrganizationInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganization(ctx context.Context, v interface{}) (*models.Organization, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrganizationPosition2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx context.Context, sel ast.SelectionSet, v []*models.OrganizationPosition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganizationPosition2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganizationPosition2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationPosition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationPosition(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrganizationPositionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐOrganizationPosition(ctx context.Context, v interface{}) (*models.OrganizationPosition, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationPositionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPassport2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx context.Context, sel ast.SelectionSet, v []*models.Passport) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPassport2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPassport2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx context.Context, sel ast.SelectionSet, v *models.Passport) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Passport(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPassportFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassportFilter(ctx context.Context, v interface{}) (*models.PassportFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPassportFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPassportInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassport(ctx context.Context, v interface{}) (*models.Passport, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPassportInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPassportSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassportSortᚄ(ctx context.Context, v interface{}) ([]models.PassportSort, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models.PassportSort, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPassportSort2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPassportSort(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPermission2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPermission(ctx context.Context, sel ast.SelectionSet, v []*models.Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPermission2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPermission2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPermission(ctx context.Context, sel ast.SelectionSet, v *models.Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPermissionInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPermission(ctx context.Context, v interface{}) ([]*models.Permission, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Permission, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPermissionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPermission(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPermissionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPermission(ctx context.Context, v interface{}) (*models.Permission, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPermissionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPerson2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx context.Context, sel ast.SelectionSet, v []*models.Person) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPerson2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx context.Context, sel ast.SelectionSet, v *models.Person) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Person(ctx, sel, v)
}

func (ec *executionContext) marshalOPersonCourse2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonCourse(ctx context.Context, sel ast.SelectionSet, v []*models.PersonCourse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPersonCourse2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonCourse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPersonCourse2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonCourse(ctx context.Context, sel ast.SelectionSet, v *models.PersonCourse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonCourse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPersonCourseInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonCourse(ctx context.Context, v interface{}) (*models.PersonCourse, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPersonCourseInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPersonFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx context.Context, v interface{}) ([]*models.PersonFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.PersonFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPersonFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonFilter(ctx context.Context, v interface{}) (*models.PersonFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPersonFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPersonInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx context.Context, v interface{}) ([]*models.Person, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Person, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPersonInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPerson(ctx context.Context, v interface{}) (*models.Person, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPersonInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPersonRating2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx context.Context, sel ast.SelectionSet, v []*models.PersonRating) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPersonRating2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPersonRating2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx context.Context, sel ast.SelectionSet, v *models.PersonRating) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonRating(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPersonRatingInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonRating(ctx context.Context, v interface{}) (*models.PersonRating, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPersonRatingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPersonSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonSortᚄ(ctx context.Context, v interface{}) ([]models.PersonSort, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models.PersonSort, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPersonSort2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐPersonSort(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORecognizedField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedField(ctx context.Context, sel ast.SelectionSet, v *models.RecognizedField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecognizedField(ctx, sel, v)
}

func (ec *executionContext) marshalORecognizedFields2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRecognizedFields(ctx context.Context, sel ast.SelectionSet, v *models.RecognizedFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecognizedFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegion2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx context.Context, sel ast.SelectionSet, v []*models.Region) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORegion2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx context.Context, sel ast.SelectionSet, v *models.Region) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Region(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegionFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegionFilter(ctx context.Context, v interface{}) (*models.RegionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORegionInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRegion(ctx context.Context, v interface{}) (*models.Region, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORightToObject2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRightToObject(ctx context.Context, sel ast.SelectionSet, v []*models.RightToObject) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORightToObject2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRightToObject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORightToObject2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRightToObject(ctx context.Context, sel ast.SelectionSet, v *models.RightToObject) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RightToObject(ctx, sel, v)
}

func (ec *executionContext) unmarshalORightToObjectInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRightToObject(ctx context.Context, v interface{}) ([]*models.RightToObject, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.RightToObject, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORightToObjectInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRightToObject(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORightToObjectInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRightToObject(ctx context.Context, v interface{}) (*models.RightToObject, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRightToObjectInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORole2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v []*models.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v *models.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalORoleInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐRole(ctx context.Context, v interface{}) (*models.Role, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOScriptType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐScriptType(ctx context.Context, v interface{}) (*models.ScriptType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.ScriptType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScriptType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐScriptType(ctx context.Context, sel ast.SelectionSet, v *models.ScriptType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSettlement2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx context.Context, sel ast.SelectionSet, v []*models.Settlement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSettlement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSettlement2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx context.Context, sel ast.SelectionSet, v *models.Settlement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Settlement(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSettlementFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlementFilter(ctx context.Context, v interface{}) (*models.SettlementFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSettlementFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSettlementInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSettlement(ctx context.Context, v interface{}) (*models.Settlement, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSettlementInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSortOrder(ctx context.Context, v interface{}) (*models.SortOrder, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.SortOrder)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐSortOrder(ctx context.Context, sel ast.SelectionSet, v *models.SortOrder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOStatus2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx context.Context, sel ast.SelectionSet, v []*models.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStatus2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx context.Context, sel ast.SelectionSet, v *models.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Status(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStatusInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx context.Context, v interface{}) ([]*models.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOStatusInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOStatusInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStatus(ctx context.Context, v interface{}) (*models.Status, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStatusInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStreet2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx context.Context, sel ast.SelectionSet, v []*models.Street) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStreet2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStreet2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx context.Context, sel ast.SelectionSet, v *models.Street) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Street(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStreetInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStreet(ctx context.Context, v interface{}) (*models.Street, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStreetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStringFilter(ctx context.Context, v interface{}) (*models.StringFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTag2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v []*models.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTag2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTag2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v *models.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTagInput2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx context.Context, v interface{}) ([]*models.Tag, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.Tag, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTagInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTagInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTag(ctx context.Context, v interface{}) (*models.Tag, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTagInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2ᚕᚖtimeᚐTime(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOTime2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return models.MarshalTime(*v)
}

func (ec *executionContext) unmarshalOTimeFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTimeFilter(ctx context.Context, v interface{}) (*models.TimeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTypeRole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTypeRole(ctx context.Context, v interface{}) (*models.TypeRole, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.TypeRole)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTypeRole2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐTypeRole(ctx context.Context, sel ast.SelectionSet, v *models.TypeRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUUID2ᚕᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) ([]*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUUID2ᚕᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v []*uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return models.MarshalUUID(*v)
}

func (ec *executionContext) unmarshalOUUIDFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUUIDFilter(ctx context.Context, v interface{}) (*models.UUIDFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUUIDFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalUpload(*v)
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v []*models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserFilter2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx context.Context, v interface{}) (models.UserFilter, error) {
	res, err := ec.unmarshalInputUserFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserFilter2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx context.Context, v interface{}) ([]models.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models.UserFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserFilter2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserFilter2ᚕᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx context.Context, v interface{}) ([]*models.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.UserFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserFilter2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserFilter(ctx context.Context, v interface{}) (*models.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserInput2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUser(ctx context.Context, v interface{}) (*models.User, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserSort2ᚕgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSortᚄ(ctx context.Context, v interface{}) ([]models.UserSort, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models.UserSort, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserSort2githubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSort(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserSortableField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSortableField(ctx context.Context, v interface{}) (*models.UserSortableField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.UserSortableField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserSortableField2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserSortableField(ctx context.Context, sel ast.SelectionSet, v *models.UserSortableField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserType(ctx context.Context, v interface{}) (*models.UserType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.UserType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserType2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐUserType(ctx context.Context, sel ast.SelectionSet, v *models.UserType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOWorkerOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐWorkerOrder(ctx context.Context, v interface{}) (*models.WorkerOrder, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.WorkerOrder)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorkerOrder2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐWorkerOrder(ctx context.Context, sel ast.SelectionSet, v *models.WorkerOrder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalOstat2ᚖgithubᚗcomᚋspheraᚑerpᚋspheraᚋinternalᚋmodelsᚐStat(ctx context.Context, sel ast.SelectionSet, v *models.Stat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._stat(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
