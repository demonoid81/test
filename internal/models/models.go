// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type DateFilter struct {
	Gt      *time.Time   `json:"gt"`
	Gte     *time.Time   `json:"gte"`
	Lt      *time.Time   `json:"lt"`
	Lte     *time.Time   `json:"lte"`
	Eq      *time.Time   `json:"eq"`
	NotEq   *time.Time   `json:"notEq"`
	Between []*time.Time `json:"between"`
}

type DateTimeFilter struct {
	Gt      *time.Time   `json:"gt"`
	Gte     *time.Time   `json:"gte"`
	Lt      *time.Time   `json:"lt"`
	Lte     *time.Time   `json:"lte"`
	Eq      *time.Time   `json:"eq"`
	NotEq   *time.Time   `json:"notEq"`
	Between []*time.Time `json:"between"`
}

type FloatFilter struct {
	Gt      *float64   `json:"gt"`
	Gte     *float64   `json:"gte"`
	Lt      *float64   `json:"lt"`
	Lte     *float64   `json:"lte"`
	Eq      *float64   `json:"eq"`
	NotEq   *float64   `json:"notEq"`
	Between []*float64 `json:"between"`
}

type InfoAboutJob struct {
	WorkerOrder *WorkerOrder `json:"workerOrder"`
	Courses     []*Course    `json:"courses"`
}

type IntFilter struct {
	Gt      *int   `json:"gt"`
	Gte     *int   `json:"gte"`
	Lt      *int   `json:"lt"`
	Lte     *int   `json:"lte"`
	Eq      *int   `json:"eq"`
	NotEq   *int   `json:"notEq"`
	Between []*int `json:"between"`
}

type StringFilter struct {
	Ilike *string `json:"ilike"`
	Like  *string `json:"like"`
}

type Taxes struct {
	Proceeds    *float64 `json:"proceeds"`
	Preliminary *float64 `json:"preliminary"`
	Tax         *float64 `json:"tax"`
	Penalty     *float64 `json:"penalty"`
}

type TimeFilter struct {
	Gt      *time.Time   `json:"gt"`
	Gte     *time.Time   `json:"gte"`
	Lt      *time.Time   `json:"lt"`
	Lte     *time.Time   `json:"lte"`
	Eq      *time.Time   `json:"eq"`
	NotEq   *time.Time   `json:"notEq"`
	Between []*time.Time `json:"between"`
}

type UUIDFilter struct {
	Eq    *uuid.UUID   `json:"eq"`
	NotEq *uuid.UUID   `json:"notEq"`
	In    []*uuid.UUID `json:"in"`
	NoIn  []*uuid.UUID `json:"noIn"`
}

type Stat struct {
	Month         *float64 `json:"month"`
	PreviousMonth *float64 `json:"previousMonth"`
	Quarter       *float64 `json:"quarter"`
}

type Direct string

const (
	DirectPlus  Direct = "plus"
	DirectMinus Direct = "minus"
)

var AllDirect = []Direct{
	DirectPlus,
	DirectMinus,
}

func (e Direct) IsValid() bool {
	switch e {
	case DirectPlus, DirectMinus:
		return true
	}
	return false
}

func (e Direct) String() string {
	return string(e)
}

func (e *Direct) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Direct(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Direct", str)
	}
	return nil
}

func (e Direct) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
